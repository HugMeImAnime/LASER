

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Wed Oct 16 13:01:58 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           	psect	idataBANK0
   107  003B42                     __pidataBANK0:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _accelZero
   111  003B42  0200               	dw	512
   112                           
   113                           ;initializer for _battPtr
   114  003B44  0100               	dw	_battData& (0+65535)
   115                           
   116                           ;initializer for _gyroZero
   117  003B46  0200               	dw	512
   118                           
   119                           ;initializer for _powerPtr
   120  003B48  00B9               	dw	_powerData& (0+65535)
   121                           
   122                           ;initializer for _sensorPtr
   123  003B4A  0122               	dw	_sensorData& (0+65535)
   124                           
   125                           ;initializer for _xBeePtr
   126  003B4C  0112               	dw	_xBeeData& (0+65535)
   127                           
   128                           	psect	idataBANK1
   129  0039CA                     __pidataBANK1:
   130                           	opt stack 0
   131                           
   132                           ;initializer for main@F4038
   133  0039CA  20                 	db	32
   134  0039CB  20                 	db	32
   135  0039CC  20                 	db	32
   136  0039CD  20                 	db	32
   137  0039CE  20                 	db	32
   138  0039CF  43                 	db	67
   139  0039D0  68                 	db	104
   140  0039D1  61                 	db	97
   141  0039D2  6E                 	db	110
   142  0039D3  6E                 	db	110
   143  0039D4  65                 	db	101
   144  0039D5  6C                 	db	108
   145  0039D6  20                 	db	32
   146  0039D7  32                 	db	50
   147  0039D8  20                 	db	32
   148  0039D9  3D                 	db	61
   149  0039DA  20                 	db	32
   150  0039DB  00                 	db	0
   151                           
   152                           ;initializer for main@F4036
   153  0039DC  43                 	db	67
   154  0039DD  68                 	db	104
   155  0039DE  61                 	db	97
   156  0039DF  6E                 	db	110
   157  0039E0  6E                 	db	110
   158  0039E1  65                 	db	101
   159  0039E2  6C                 	db	108
   160  0039E3  20                 	db	32
   161  0039E4  31                 	db	49
   162  0039E5  20                 	db	32
   163  0039E6  3D                 	db	61
   164  0039E7  20                 	db	32
   165  0039E8  00                 	db	0
   166                           
   167                           	psect	smallconst
   168  000600                     __psmallconst:
   169                           	opt stack 0
   170  000600                     atan@coeff_a:
   171                           	opt stack 0
   172  000600  3C                 	db	60
   173  000601  04                 	db	4
   174  000602  42                 	db	66
   175  000603  9F                 	db	159
   176  000604  6A                 	db	106
   177  000605  42                 	db	66
   178  000606  90                 	db	144
   179  000607  01                 	db	1
   180  000608  42                 	db	66
   181  000609  4D                 	db	77
   182  00060A  BB                 	db	187
   183  00060B  40                 	db	64
   184  00060C  EC                 	db	236
   185  00060D  47                 	db	71
   186  00060E  3E                 	db	62
   187  00060F  8E                 	db	142
   188  000610  1F                 	db	31
   189  000611  BB                 	db	187
   190  000612                     __end_ofatan@coeff_a:
   191                           	opt stack 0
   192  000612                     atan@coeff_b:
   193                           	opt stack 0
   194  000612  3C                 	db	60
   195  000613  04                 	db	4
   196  000614  42                 	db	66
   197  000615  5A                 	db	90
   198  000616  8B                 	db	139
   199  000617  42                 	db	66
   200  000618  04                 	db	4
   201  000619  44                 	db	68
   202  00061A  42                 	db	66
   203  00061B  9C                 	db	156
   204  00061C  4F                 	db	79
   205  00061D  41                 	db	65
   206  00061E  00                 	db	0
   207  00061F  80                 	db	128
   208  000620  3F                 	db	63
   209  000621                     __end_ofatan@coeff_b:
   210                           	opt stack 0
   211  0000                     _ADCON0	set	4034
   212  0000                     _ADCON0bits	set	4034
   213  0000                     _ADCON1	set	4033
   214  0000                     _ADCON2	set	4032
   215  0000                     _ADRESH	set	4036
   216  0000                     _ADRESL	set	4035
   217  0000                     _BAUDCON	set	4024
   218  0000                     _INTCON2bits	set	4081
   219  0000                     _INTCONbits	set	4082
   220  0000                     _IPR1bits	set	3999
   221  0000                     _PIE1	set	3997
   222  0000                     _PIE1bits	set	3997
   223  0000                     _PIR1bits	set	3998
   224  0000                     _PIR2bits	set	4001
   225  0000                     _PORTA	set	3968
   226  0000                     _PORTAbits	set	3968
   227  0000                     _PORTB	set	3969
   228  0000                     _PORTBbits	set	3969
   229  0000                     _PORTC	set	3970
   230  0000                     _PORTCbits	set	3970
   231  0000                     _RCONbits	set	4048
   232  0000                     _RCREG	set	4014
   233  0000                     _RCSTA	set	4011
   234  0000                     _RCSTAbits	set	4011
   235  0000                     _SPBRG	set	4015
   236  0000                     _SPBRGH	set	4016
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON1bits	set	4038
   241  0000                     _SSPCON2	set	4037
   242  0000                     _SSPCON2bits	set	4037
   243  0000                     _SSPSTAT	set	4039
   244  0000                     _SSPSTATbits	set	4039
   245  0000                     _T0CONbits	set	4053
   246  0000                     _T1CONbits	set	4045
   247  0000                     _TRISA	set	3986
   248  0000                     _TRISB	set	3987
   249  0000                     _TRISC	set	3988
   250  0000                     _TRISCbits	set	3988
   251  0000                     _TXREG	set	4013
   252  0000                     _TXSTA	set	4012
   253  0000                     _TXSTAbits	set	4012
   254                           
   255                           ; #config settings
   256  000621  00                 	db	0	; dummy byte at the end
   257  0000                     
   258                           	psect	cinit
   259  0031BC                     __pcinit:
   260                           	opt stack 0
   261  0031BC                     start_initialization:
   262                           	opt stack 0
   263  0031BC                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Clear objects allocated to BANK1 (48 bytes)
   267  0031BC  EE01  F000         	lfsr	0,__pbssBANK1
   268  0031C0  0E30               	movlw	48
   269  0031C2                     clear_0:
   270  0031C2  6AEE               	clrf	postinc0,c
   271  0031C4  06E8               	decf	wreg,f,c
   272  0031C6  E1FD               	bnz	clear_0
   273                           
   274                           ; Clear objects allocated to BANK0 (63 bytes)
   275  0031C8  EE00  F080         	lfsr	0,__pbssBANK0
   276  0031CC  0E3F               	movlw	63
   277  0031CE                     clear_1:
   278  0031CE  6AEE               	clrf	postinc0,c
   279  0031D0  06E8               	decf	wreg,f,c
   280  0031D2  E1FD               	bnz	clear_1
   281                           
   282                           ; Clear objects allocated to COMRAM (2 bytes)
   283  0031D4  6A7F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   284  0031D6  6A7E               	clrf	__pbssCOMRAM& (0+255),c
   285                           
   286                           ; Initialize objects allocated to BANK1 (31 bytes)
   287                           ; load TBLPTR registers with __pidataBANK1
   288  0031D8  0ECA               	movlw	low __pidataBANK1
   289  0031DA  6EF6               	movwf	tblptrl,c
   290  0031DC  0E39               	movlw	high __pidataBANK1
   291  0031DE  6EF7               	movwf	tblptrh,c
   292  0031E0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   293  0031E2  6EF8               	movwf	tblptru,c
   294  0031E4  EE01  F030         	lfsr	0,__pdataBANK1
   295  0031E8  EE10 F01F          	lfsr	1,31
   296  0031EC                     copy_data0:
   297  0031EC  0009               	tblrd		*+
   298  0031EE  CFF5 FFEE          	movff	tablat,postinc0
   299  0031F2  50E5               	movf	postdec1,w,c
   300  0031F4  50E1               	movf	fsr1l,w,c
   301  0031F6  E1FA               	bnz	copy_data0
   302                           
   303                           ; Initialize objects allocated to BANK0 (12 bytes)
   304                           ; load TBLPTR registers with __pidataBANK0
   305  0031F8  0E42               	movlw	low __pidataBANK0
   306  0031FA  6EF6               	movwf	tblptrl,c
   307  0031FC  0E3B               	movlw	high __pidataBANK0
   308  0031FE  6EF7               	movwf	tblptrh,c
   309  003200  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   310  003202  6EF8               	movwf	tblptru,c
   311  003204  EE00  F0E9         	lfsr	0,__pdataBANK0
   312  003208  EE10 F00C          	lfsr	1,12
   313  00320C                     copy_data1:
   314  00320C  0009               	tblrd		*+
   315  00320E  CFF5 FFEE          	movff	tablat,postinc0
   316  003212  50E5               	movf	postdec1,w,c
   317  003214  50E1               	movf	fsr1l,w,c
   318  003216  E1FA               	bnz	copy_data1
   319  003218                     end_of_initialization:
   320                           	opt stack 0
   321  003218                     __end_of__initialization:
   322                           	opt stack 0
   323  003218  0E00               	movlw	low (__Lmediumconst shr (0+16))
   324  00321A  6EF8               	movwf	tblptru,c
   325  00321C  0100               	movlb	0
   326  00321E  EFCD  F005         	goto	_main	;jump to C main() function
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1l	equ	0xFE1
   335                           
   336                           	psect	bssCOMRAM
   337  00007E                     __pbssCOMRAM:
   338                           	opt stack 0
   339  00007E                     _USART_Status:
   340                           	opt stack 0
   341  00007E                     	ds	1
   342  00007F                     _onLEDBlinker:
   343                           	opt stack 0
   344  00007F                     	ds	1
   345                           tblptru	equ	0xFF8
   346                           tblptrh	equ	0xFF7
   347                           tblptrl	equ	0xFF6
   348                           tablat	equ	0xFF5
   349                           postinc0	equ	0xFEE
   350                           wreg	equ	0xFE8
   351                           postdec1	equ	0xFE5
   352                           fsr1l	equ	0xFE1
   353                           
   354                           	psect	bssBANK0
   355  000080                     __pbssBANK0:
   356                           	opt stack 0
   357  000080                     _B3:
   358                           	opt stack 0
   359  000080                     	ds	4
   360  000084                     _B4:
   361                           	opt stack 0
   362  000084                     	ds	4
   363  000088                     _B5:
   364                           	opt stack 0
   365  000088                     	ds	4
   366  00008C                     _B6:
   367                           	opt stack 0
   368  00008C                     	ds	4
   369  000090                     _B7:
   370                           	opt stack 0
   371  000090                     	ds	4
   372  000094                     _altOffset:
   373                           	opt stack 0
   374  000094                     	ds	4
   375  000098                     _presSeaLevel:
   376                           	opt stack 0
   377  000098                     	ds	4
   378  00009C                     _AC1:
   379                           	opt stack 0
   380  00009C                     	ds	2
   381  00009E                     _AC2:
   382                           	opt stack 0
   383  00009E                     	ds	2
   384  0000A0                     _AC3:
   385                           	opt stack 0
   386  0000A0                     	ds	2
   387  0000A2                     _AC4:
   388                           	opt stack 0
   389  0000A2                     	ds	2
   390  0000A4                     _AC5:
   391                           	opt stack 0
   392  0000A4                     	ds	2
   393  0000A6                     _AC6:
   394                           	opt stack 0
   395  0000A6                     	ds	2
   396  0000A8                     _B1:
   397                           	opt stack 0
   398  0000A8                     	ds	2
   399  0000AA                     _B2:
   400                           	opt stack 0
   401  0000AA                     	ds	2
   402  0000AC                     _MB:
   403                           	opt stack 0
   404  0000AC                     	ds	2
   405  0000AE                     _MC:
   406                           	opt stack 0
   407  0000AE                     	ds	2
   408  0000B0                     _MD:
   409                           	opt stack 0
   410  0000B0                     	ds	2
   411  0000B2                     _errno:
   412                           	opt stack 0
   413  0000B2                     	ds	2
   414  0000B4                     gyroscope@gyroZero:
   415                           	opt stack 0
   416  0000B4                     	ds	2
   417  0000B6                     _accelFail:
   418                           	opt stack 0
   419  0000B6                     	ds	1
   420  0000B7                     _gyroFail:
   421                           	opt stack 0
   422  0000B7                     	ds	1
   423  0000B8                     gyroscope@gyroFail:
   424                           	opt stack 0
   425  0000B8                     	ds	1
   426  0000B9                     _powerData:
   427                           	opt stack 0
   428  0000B9                     	ds	6
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1l	equ	0xFE1
   437                           
   438                           	psect	dataBANK0
   439  0000E9                     __pdataBANK0:
   440                           	opt stack 0
   441  0000E9                     _accelZero:
   442                           	opt stack 0
   443  0000E9                     	ds	2
   444  0000EB                     _battPtr:
   445                           	opt stack 0
   446  0000EB                     	ds	2
   447  0000ED                     _gyroZero:
   448                           	opt stack 0
   449  0000ED                     	ds	2
   450  0000EF                     _powerPtr:
   451                           	opt stack 0
   452  0000EF                     	ds	2
   453  0000F1                     _sensorPtr:
   454                           	opt stack 0
   455  0000F1                     	ds	2
   456  0000F3                     _xBeePtr:
   457                           	opt stack 0
   458  0000F3                     	ds	2
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bssBANK1
   469  000100                     __pbssBANK1:
   470                           	opt stack 0
   471  000100                     _battData:
   472                           	opt stack 0
   473  000100                     	ds	18
   474  000112                     _xBeeData:
   475                           	opt stack 0
   476  000112                     	ds	16
   477  000122                     _sensorData:
   478                           	opt stack 0
   479  000122                     	ds	14
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           postdec1	equ	0xFE5
   487                           fsr1l	equ	0xFE1
   488                           
   489                           	psect	dataBANK1
   490  000130                     __pdataBANK1:
   491                           	opt stack 0
   492  000130                     main@F4038:
   493                           	opt stack 0
   494  000130                     	ds	18
   495  000142                     main@F4036:
   496                           	opt stack 0
   497  000142                     	ds	13
   498                           tblptru	equ	0xFF8
   499                           tblptrh	equ	0xFF7
   500                           tblptrl	equ	0xFF6
   501                           tablat	equ	0xFF5
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           postdec1	equ	0xFE5
   505                           fsr1l	equ	0xFE1
   506                           
   507                           	psect	cstackBANK0
   508  0000BF                     __pcstackBANK0:
   509                           	opt stack 0
   510  0000BF                     updateSensorARData@rawTemp:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x0
   514  0000BF                     	ds	2
   515  0000C1                     updateSensorARData@rawPres:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519  0000C1                     	ds	2
   520  0000C3                     ??_main:
   521                           
   522                           ; 0 bytes @ 0x4
   523  0000C3                     	ds	3
   524  0000C6                     main@message2:
   525                           	opt stack 0
   526                           
   527                           ; 18 bytes @ 0x7
   528  0000C6                     	ds	18
   529  0000D8                     main@message1:
   530                           	opt stack 0
   531                           
   532                           ; 13 bytes @ 0x19
   533  0000D8                     	ds	13
   534  0000E5                     main@input1:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x26
   538  0000E5                     	ds	2
   539  0000E7                     main@input2:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x28
   543  0000E7                     	ds	2
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           postinc0	equ	0xFEE
   549                           wreg	equ	0xFE8
   550                           postdec1	equ	0xFE5
   551                           fsr1l	equ	0xFE1
   552                           
   553                           	psect	cstackCOMRAM
   554  000001                     __pcstackCOMRAM:
   555                           	opt stack 0
   556  000001                     ?_WriteUSART:
   557                           	opt stack 0
   558  000001                     ?_Delay10KTCYx:
   559                           	opt stack 0
   560  000001                     ?_Delay10TCYx:
   561                           	opt stack 0
   562  000001                     ??_blinkLED:
   563  000001                     ?_OpenADC:
   564                           	opt stack 0
   565  000001                     ?_SetChanADC:
   566                           	opt stack 0
   567  000001                     ?_OpenI2C:
   568                           	opt stack 0
   569  000001                     ?_OpenUSART:
   570                           	opt stack 0
   571  000001                     ?_WriteI2C:
   572                           	opt stack 0
   573  000001                     ?_ReadADC:
   574                           	opt stack 0
   575  000001                     ?___awdiv:
   576                           	opt stack 0
   577  000001                     ?___lwmod:
   578                           	opt stack 0
   579  000001                     ?___wmul:
   580                           	opt stack 0
   581  000001                     ?___ftpack:
   582                           	opt stack 0
   583  000001                     ?___lmul:
   584                           	opt stack 0
   585  000001                     ?___aldiv:
   586                           	opt stack 0
   587  000001                     ?___lldiv:
   588                           	opt stack 0
   589  000001                     OpenADC@config:
   590                           	opt stack 0
   591  000001                     SetChanADC@channel:
   592                           	opt stack 0
   593  000001                     OpenI2C@sync_mode:
   594                           	opt stack 0
   595  000001                     WriteI2C@data_out:
   596                           	opt stack 0
   597  000001                     OpenUSART@config:
   598                           	opt stack 0
   599  000001                     ReadUSART@data:
   600                           	opt stack 0
   601  000001                     WriteUSART@data:
   602                           	opt stack 0
   603  000001                     Delay10KTCYx@unit:
   604                           	opt stack 0
   605  000001                     Delay10TCYx@unit:
   606                           	opt stack 0
   607  000001                     ___awdiv@dividend:
   608                           	opt stack 0
   609  000001                     ___lwmod@dividend:
   610                           	opt stack 0
   611  000001                     ___wmul@multiplier:
   612                           	opt stack 0
   613  000001                     ___ftpack@arg:
   614                           	opt stack 0
   615  000001                     ___aldiv@dividend:
   616                           	opt stack 0
   617  000001                     ___lldiv@dividend:
   618                           	opt stack 0
   619  000001                     ___lmul@multiplier:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x0
   623  000001                     	ds	1
   624  000002                     ??_Delay10KTCYx:
   625  000002                     ??_baroTempStart:
   626  000002                     ??_baroPresStart:
   627  000002                     ?_battConfigByte:
   628                           	opt stack 0
   629  000002                     ??_SetChanADC:
   630  000002                     ?_baroGetVal:
   631                           	opt stack 0
   632  000002                     ?_battReadWord:
   633                           	opt stack 0
   634  000002                     ?_xBeeRxInt:
   635                           	opt stack 0
   636  000002                     ?_xBeeRxLong:
   637                           	opt stack 0
   638  000002                     OpenADC@config2:
   639                           	opt stack 0
   640  000002                     OpenI2C@slew:
   641                           	opt stack 0
   642  000002                     baroGetVal@reg:
   643                           	opt stack 0
   644  000002                     battConfigByte@reg:
   645                           	opt stack 0
   646  000002                     battReadWord@reg:
   647                           	opt stack 0
   648  000002                     OpenUSART@spbrg:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x1
   652  000002                     	ds	1
   653  000003                     ??_morseLong:
   654  000003                     ??_morseShort:
   655  000003                     ??_morseStop:
   656  000003                     ??_openSMBus:
   657  000003                     OpenADC@portconfig:
   658                           	opt stack 0
   659  000003                     battConfigByte@data:
   660                           	opt stack 0
   661  000003                     ___awdiv@divisor:
   662                           	opt stack 0
   663  000003                     ___lwmod@divisor:
   664                           	opt stack 0
   665  000003                     ___wmul@multiplicand:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x2
   669  000003                     	ds	1
   670  000004                     ?_morseCode:
   671                           	opt stack 0
   672  000004                     ??_baroGetVal:
   673  000004                     ??_battConfigByte:
   674  000004                     ??_battReadWord:
   675  000004                     ??_openRS232:
   676  000004                     ??_xBeeRxInt:
   677  000004                     ??_OpenADC:
   678  000004                     morseCode@error:
   679                           	opt stack 0
   680  000004                     ___ftpack@exp:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x3
   684  000004                     	ds	1
   685  000005                     ??_battConfig:
   686  000005                     ??___awdiv:
   687  000005                     ??___lwmod:
   688  000005                     ___ftpack@sign:
   689                           	opt stack 0
   690  000005                     baroGetVal@data:
   691                           	opt stack 0
   692  000005                     xBeeRxInt@value:
   693                           	opt stack 0
   694  000005                     ___wmul@product:
   695                           	opt stack 0
   696  000005                     ___aldiv@divisor:
   697                           	opt stack 0
   698  000005                     ___lldiv@divisor:
   699                           	opt stack 0
   700  000005                     ___lmul@multiplicand:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x4
   704  000005                     	ds	1
   705  000006                     ??_xBeeRxLong:
   706  000006                     ??___ftpack:
   707  000006                     ___awdiv@counter:
   708                           	opt stack 0
   709  000006                     ___lwmod@counter:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x5
   713  000006                     	ds	1
   714  000007                     ?___lwdiv:
   715                           	opt stack 0
   716  000007                     _baroGetVal$2559:
   717                           	opt stack 0
   718  000007                     ___awdiv@sign:
   719                           	opt stack 0
   720  000007                     battReadWord@value:
   721                           	opt stack 0
   722  000007                     ___lwdiv@dividend:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x6
   726  000007                     	ds	1
   727  000008                     ___awdiv@quotient:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x7
   731  000008                     	ds	1
   732  000009                     ?_updateBattData:
   733                           	opt stack 0
   734  000009                     ??___aldiv:
   735  000009                     ??___lldiv:
   736  000009                     ?___ftneg:
   737                           	opt stack 0
   738  000009                     ?___fttol:
   739                           	opt stack 0
   740  000009                     updateBattData@data:
   741                           	opt stack 0
   742  000009                     ___lwdiv@divisor:
   743                           	opt stack 0
   744  000009                     ___ftneg@f1:
   745                           	opt stack 0
   746  000009                     ___fttol@f1:
   747                           	opt stack 0
   748  000009                     ___lmul@product:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x8
   752  000009                     	ds	1
   753  00000A                     ?_accelGetADC:
   754                           	opt stack 0
   755  00000A                     ?_gyroGetADC:
   756                           	opt stack 0
   757  00000A                     ___aldiv@counter:
   758                           	opt stack 0
   759  00000A                     ___lldiv@quotient:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0x9
   763  00000A                     	ds	1
   764  00000B                     ??_updateBattData:
   765  00000B                     ??___lwdiv:
   766  00000B                     ___aldiv@sign:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0xA
   770  00000B                     	ds	1
   771  00000C                     ??_accelGetADC:
   772  00000C                     ??_gyroGetADC:
   773  00000C                     ?___ftge:
   774                           	opt stack 0
   775  00000C                     ___lwdiv@quotient:
   776                           	opt stack 0
   777  00000C                     ___ftge@ff1:
   778                           	opt stack 0
   779  00000C                     ___aldiv@quotient:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0xB
   783  00000C                     	ds	1
   784  00000D                     ??___fttol:
   785  00000D                     accelGetADC@i:
   786                           	opt stack 0
   787  00000D                     gyroGetADC@i:
   788                           	opt stack 0
   789  00000D                     xBeeRxLong@value:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0xC
   793  00000D                     	ds	1
   794  00000E                     ___lldiv@counter:
   795                           	opt stack 0
   796  00000E                     ___lwdiv@counter:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0xD
   800  00000E                     	ds	1
   801  00000F                     ?_xBeeTxByte:
   802                           	opt stack 0
   803  00000F                     xBeeTxByte@data:
   804                           	opt stack 0
   805  00000F                     accelGetADC@accelRaw:
   806                           	opt stack 0
   807  00000F                     gyroGetADC@average:
   808                           	opt stack 0
   809  00000F                     ___ftge@ff2:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0xE
   813  00000F                     	ds	1
   814  000010                     ?_transmitError:
   815                           	opt stack 0
   816  000010                     ?_xBeeTxString:
   817                           	opt stack 0
   818  000010                     ??_xBeeSetATMode:
   819  000010                     ?_xBeeATCommandUC:
   820                           	opt stack 0
   821  000010                     ?_xBeeATCommand:
   822                           	opt stack 0
   823  000010                     ?_xBeeTxInt:
   824                           	opt stack 0
   825  000010                     ?_xBeeTxLong:
   826                           	opt stack 0
   827  000010                     ?_baroTrueTemp:
   828                           	opt stack 0
   829  000010                     ?___altoft:
   830                           	opt stack 0
   831  000010                     ?_baroTruePres:
   832                           	opt stack 0
   833  000010                     transmitError@error:
   834                           	opt stack 0
   835  000010                     xBeeATCommand@cmd1:
   836                           	opt stack 0
   837  000010                     xBeeATCommandUC@cmd1:
   838                           	opt stack 0
   839  000010                     baroTrueTemp@rawTemp:
   840                           	opt stack 0
   841  000010                     baroTruePres@rawPres:
   842                           	opt stack 0
   843  000010                     xBeeTxString@data:
   844                           	opt stack 0
   845  000010                     xBeeTxInt@data:
   846                           	opt stack 0
   847  000010                     xBeeTxLong@data:
   848                           	opt stack 0
   849  000010                     ___altoft@c:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0xF
   853  000010                     	ds	1
   854  000011                     ??_transmitError:
   855  000011                     xBeeATCommand@cmd2:
   856                           	opt stack 0
   857  000011                     xBeeATCommandUC@cmd2:
   858                           	opt stack 0
   859  000011                     accelCalibrate@average:
   860                           	opt stack 0
   861  000011                     gyroCalibrate@average:
   862                           	opt stack 0
   863  000011                     xBeeSetATMode@i:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x10
   867  000011                     	ds	1
   868  000012                     ??_baroTrueTemp:
   869  000012                     ??_xBeeEndATMode:
   870  000012                     ??_accelSelfTest:
   871  000012                     ?_battSafeCheck:
   872                           	opt stack 0
   873  000012                     ??_gyroSelfTest:
   874  000012                     ??___ftge:
   875  000012                     xBeeATCommandUC@param:
   876                           	opt stack 0
   877  000012                     ___fttol@sign1:
   878                           	opt stack 0
   879  000012                     battSafeCheck@ptr:
   880                           	opt stack 0
   881  000012                     xBeeTxString@i:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x11
   885  000012                     	ds	1
   886  000013                     ?_updateXBeeData:
   887                           	opt stack 0
   888  000013                     accelSelfTest@accelBase:
   889                           	opt stack 0
   890  000013                     accelCalibrate@i:
   891                           	opt stack 0
   892  000013                     gyroCalibrate@i:
   893                           	opt stack 0
   894  000013                     gyroSelfTest@base:
   895                           	opt stack 0
   896  000013                     updateXBeeData@data:
   897                           	opt stack 0
   898  000013                     ___fttol@lval:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x12
   902  000013                     	ds	1
   903  000014                     ??_baroTruePres:
   904  000014                     ??_xBeeConfig:
   905  000014                     ??_battSafeCheck:
   906  000014                     ??_xBeeTxLong:
   907  000014                     ??___altoft:
   908                           
   909                           ; 0 bytes @ 0x13
   910  000014                     	ds	1
   911  000015                     ??_updateXBeeData:
   912  000015                     ?_fabs:
   913                           	opt stack 0
   914  000015                     accelSelfTest@accelNew:
   915                           	opt stack 0
   916  000015                     gyroSelfTest@new:
   917                           	opt stack 0
   918  000015                     fabs@d:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x14
   922  000015                     	ds	1
   923  000016                     battSafeCheck@error:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x15
   927  000016                     	ds	1
   928  000017                     ___fttol@exp1:
   929                           	opt stack 0
   930  000017                     accelSelfTest@i:
   931                           	opt stack 0
   932  000017                     gyroSelfTest@i:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x16
   936  000017                     	ds	1
   937  000018                     ?___awtoft:
   938                           	opt stack 0
   939  000018                     ___altoft@exp:
   940                           	opt stack 0
   941  000018                     ___awtoft@c:
   942                           	opt stack 0
   943  000018                     baroTrueTemp@temperature:
   944                           	opt stack 0
   945                           
   946                           ; 4 bytes @ 0x17
   947  000018                     	ds	1
   948  000019                     _xBeeTxLong$3946:
   949                           	opt stack 0
   950  000019                     ___altoft@sign:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x18
   954  000019                     	ds	1
   955  00001A                     _xBeeTxLong$3947:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x19
   959  00001A                     	ds	1
   960  00001B                     ?_xBeeTxXBee:
   961                           	opt stack 0
   962  00001B                     ??___awtoft:
   963  00001B                     xBeeTxXBee@ptr:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x1A
   967  00001B                     	ds	1
   968  00001C                     ___awtoft@sign:
   969                           	opt stack 0
   970  00001C                     baroTrueTemp@X2:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x1B
   974  00001C                     	ds	1
   975  00001D                     ?___ftdiv:
   976                           	opt stack 0
   977  00001D                     ?___ftmul:
   978                           	opt stack 0
   979  00001D                     ___ftdiv@f1:
   980                           	opt stack 0
   981  00001D                     ___ftmul@f1:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x1C
   985  00001D                     	ds	3
   986  000020                     ___ftdiv@f2:
   987                           	opt stack 0
   988  000020                     ___ftmul@f2:
   989                           	opt stack 0
   990  000020                     baroTrueTemp@X1:
   991                           	opt stack 0
   992                           
   993                           ; 4 bytes @ 0x1F
   994  000020                     	ds	1
   995  000021                     baroTruePres@X3:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x20
   999  000021                     	ds	2
  1000  000023                     ??___ftdiv:
  1001  000023                     ??___ftmul:
  1002                           
  1003                           ; 0 bytes @ 0x22
  1004  000023                     	ds	2
  1005  000025                     _baroTruePres$4850:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0x24
  1009  000025                     	ds	3
  1010  000028                     ___ftdiv@cntr:
  1011                           	opt stack 0
  1012  000028                     ___ftmul@exp:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x27
  1016  000028                     	ds	1
  1017  000029                     ___ftdiv@f3:
  1018                           	opt stack 0
  1019  000029                     ___ftmul@f3_as_product:
  1020                           	opt stack 0
  1021  000029                     baroTruePres@X2:
  1022                           	opt stack 0
  1023                           
  1024                           ; 4 bytes @ 0x28
  1025  000029                     	ds	3
  1026  00002C                     ___ftdiv@exp:
  1027                           	opt stack 0
  1028  00002C                     ___ftmul@cntr:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x2B
  1032  00002C                     	ds	1
  1033  00002D                     ___ftdiv@sign:
  1034                           	opt stack 0
  1035  00002D                     ___ftmul@sign:
  1036                           	opt stack 0
  1037  00002D                     baroTruePres@X1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x2C
  1041  00002D                     	ds	1
  1042  00002E                     ?_getArrayVoltage:
  1043                           	opt stack 0
  1044  00002E                     ?_getArrayCurrent:
  1045                           	opt stack 0
  1046  00002E                     ?_getArrayPower:
  1047                           	opt stack 0
  1048  00002E                     ?___ftadd:
  1049                           	opt stack 0
  1050  00002E                     ?___asftmul:
  1051                           	opt stack 0
  1052  00002E                     getArrayPower@voltage:
  1053                           	opt stack 0
  1054  00002E                     ___asftmul@f1p:
  1055                           	opt stack 0
  1056  00002E                     ___ftadd@f1:
  1057                           	opt stack 0
  1058                           
  1059                           ; 3 bytes @ 0x2D
  1060  00002E                     	ds	2
  1061  000030                     ??_getArrayVoltage:
  1062  000030                     ??_getArrayCurrent:
  1063  000030                     getArrayPower@current:
  1064                           	opt stack 0
  1065  000030                     ___asftmul@f2:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x2F
  1069  000030                     	ds	1
  1070  000031                     getArrayVoltage@i:
  1071                           	opt stack 0
  1072  000031                     getArrayCurrent@i:
  1073                           	opt stack 0
  1074  000031                     ___ftadd@f2:
  1075                           	opt stack 0
  1076  000031                     baroTruePres@pressure:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x30
  1080  000031                     	ds	1
  1081  000032                     getArrayPower@temp:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0x31
  1085  000032                     	ds	1
  1086  000033                     getArrayVoltage@average:
  1087                           	opt stack 0
  1088  000033                     getArrayCurrent@average:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x32
  1092  000033                     	ds	1
  1093  000034                     ??___ftadd:
  1094                           
  1095                           ; 0 bytes @ 0x33
  1096  000034                     	ds	1
  1097  000035                     getArrayPower@power:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x34
  1101  000035                     	ds	2
  1102  000037                     ?_updatePwrData:
  1103                           	opt stack 0
  1104  000037                     updatePwrData@ptr:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x36
  1108  000037                     	ds	2
  1109  000039                     ___ftadd@sign:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x38
  1113  000039                     	ds	1
  1114  00003A                     ___ftadd@exp2:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x39
  1118  00003A                     	ds	1
  1119  00003B                     ___ftadd@exp1:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x3A
  1123  00003B                     	ds	1
  1124  00003C                     ?___ftsub:
  1125                           	opt stack 0
  1126  00003C                     ?_eval_poly:
  1127                           	opt stack 0
  1128  00003C                     ?_baroConvertAlt:
  1129                           	opt stack 0
  1130  00003C                     eval_poly@x:
  1131                           	opt stack 0
  1132  00003C                     ___ftsub@f1:
  1133                           	opt stack 0
  1134  00003C                     baroConvertAlt@pressure:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x3B
  1138  00003C                     	ds	3
  1139  00003F                     eval_poly@d:
  1140                           	opt stack 0
  1141  00003F                     ___ftsub@f2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x3E
  1145  00003F                     	ds	1
  1146  000040                     ??_baroConvertAlt:
  1147                           
  1148                           ; 0 bytes @ 0x3F
  1149  000040                     	ds	1
  1150  000041                     eval_poly@n:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x40
  1154  000041                     	ds	1
  1155  000042                     ?___asftsub:
  1156                           	opt stack 0
  1157  000042                     ___asftsub@f1p:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x41
  1161  000042                     	ds	1
  1162  000043                     ??_eval_poly:
  1163                           
  1164                           ; 0 bytes @ 0x42
  1165  000043                     	ds	1
  1166  000044                     baroConvertAlt@ratio:
  1167                           	opt stack 0
  1168  000044                     ___asftsub@f2:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x43
  1172  000044                     	ds	3
  1173  000047                     ?_sqrt:
  1174                           	opt stack 0
  1175  000047                     sqrt@y:
  1176                           	opt stack 0
  1177  000047                     _baroConvertAlt$4851:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x46
  1181  000047                     	ds	1
  1182  000048                     eval_poly@res:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x47
  1186  000048                     	ds	2
  1187  00004A                     ??_sqrt:
  1188  00004A                     baroConvertAlt@val:
  1189                           	opt stack 0
  1190                           
  1191                           ; 4 bytes @ 0x49
  1192  00004A                     	ds	1
  1193  00004B                     ?_atan:
  1194                           	opt stack 0
  1195  00004B                     atan@f:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x4A
  1199  00004B                     	ds	2
  1200  00004D                     sqrt@og:
  1201                           	opt stack 0
  1202                           
  1203                           ; 3 bytes @ 0x4C
  1204  00004D                     	ds	1
  1205  00004E                     ??_baroCalibrate:
  1206  00004E                     atan@y:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x4D
  1210  00004E                     	ds	1
  1211  00004F                     baroCalibrate@m:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x4E
  1215  00004F                     	ds	1
  1216  000050                     sqrt@z:
  1217                           	opt stack 0
  1218                           
  1219                           ; 3 bytes @ 0x4F
  1220  000050                     	ds	1
  1221  000051                     atan@x:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x50
  1225  000051                     	ds	1
  1226  000052                     baroCalibrate@b:
  1227                           	opt stack 0
  1228                           
  1229                           ; 3 bytes @ 0x51
  1230  000052                     	ds	1
  1231  000053                     sqrt@i:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0x52
  1235  000053                     	ds	1
  1236  000054                     atan@recip:
  1237                           	opt stack 0
  1238  000054                     sqrt@q:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0x53
  1242  000054                     	ds	1
  1243  000055                     baroCalibrate@presLocalRaw:
  1244                           	opt stack 0
  1245  000055                     atan@val_squared:
  1246                           	opt stack 0
  1247                           
  1248                           ; 3 bytes @ 0x54
  1249  000055                     	ds	2
  1250  000057                     baroCalibrate@temperatureRaw:
  1251                           	opt stack 0
  1252  000057                     sqrt@x:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x56
  1256  000057                     	ds	1
  1257  000058                     atan@val:
  1258                           	opt stack 0
  1259                           
  1260                           ; 3 bytes @ 0x57
  1261  000058                     	ds	1
  1262  000059                     baroCalibrate@presLocalTrue:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0x58
  1266  000059                     	ds	2
  1267  00005B                     ?_asin:
  1268                           	opt stack 0
  1269  00005B                     asin@x:
  1270                           	opt stack 0
  1271                           
  1272                           ; 3 bytes @ 0x5A
  1273  00005B                     	ds	3
  1274  00005E                     asin@sgn:
  1275                           	opt stack 0
  1276                           
  1277                           ; 3 bytes @ 0x5D
  1278  00005E                     	ds	3
  1279  000061                     _asin$4852:
  1280                           	opt stack 0
  1281                           
  1282                           ; 3 bytes @ 0x60
  1283  000061                     	ds	3
  1284  000064                     _asin$4855:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x63
  1288  000064                     	ds	3
  1289  000067                     _asin$4854:
  1290                           	opt stack 0
  1291                           
  1292                           ; 3 bytes @ 0x66
  1293  000067                     	ds	3
  1294  00006A                     asin@y:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x69
  1298  00006A                     	ds	3
  1299  00006D                     _asin$4853:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x6C
  1303  00006D                     	ds	3
  1304  000070                     ?_accelGetRoll:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x6F
  1308  000070                     	ds	2
  1309  000072                     ??_accelGetRoll:
  1310                           
  1311                           ; 0 bytes @ 0x71
  1312  000072                     	ds	2
  1313  000074                     accelGetRoll@rollAngle:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x73
  1317  000074                     	ds	2
  1318  000076                     accelGetRoll@accelRaw:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x75
  1322  000076                     	ds	2
  1323  000078                     accelGetRoll@accelTemp:
  1324                           	opt stack 0
  1325                           
  1326                           ; 3 bytes @ 0x77
  1327  000078                     	ds	3
  1328  00007B                     ?_updateSensorARData:
  1329                           	opt stack 0
  1330  00007B                     updateSensorARData@ptr:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x7A
  1334  00007B                     	ds	2
  1335  00007D                     ??_updateSensorARData:
  1336                           
  1337                           ; 0 bytes @ 0x7C
  1338  00007D                     	ds	1
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           postdec1	equ	0xFE5
  1346                           fsr1l	equ	0xFE1
  1347                           
  1348 ;;
  1349 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1350 ;;
  1351 ;; *************** function _main *****************
  1352 ;; Defined at:
  1353 ;;		line 178 in file "main.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;		None
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  message2       18    7[BANK0 ] unsigned char [18]
  1358 ;;  message1       13   25[BANK0 ] unsigned char [13]
  1359 ;;  input2          2   40[BANK0 ] unsigned int 
  1360 ;;  input1          2   38[BANK0 ] unsigned int 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1370 ;;      Params:         0       0       0       0       0       0       0
  1371 ;;      Locals:         0      35       0       0       0       0       0
  1372 ;;      Temps:          0       3       0       0       0       0       0
  1373 ;;      Totals:         0      38       0       0       0       0       0
  1374 ;;Total ram usage:       38 bytes
  1375 ;; Hardware stack levels required when called:    8
  1376 ;; This function calls:
  1377 ;;		_BusyADC
  1378 ;;		_ConvertADC
  1379 ;;		_OpenADC
  1380 ;;		_ReadADC
  1381 ;;		_SetChanADC
  1382 ;;		_accelSelfTest
  1383 ;;		_Delay10KTCYx
  1384 ;;		_transmitError
  1385 ;;		_morseCode
  1386 ;;		_accelCalibrate
  1387 ;;		_baroCalibrate
  1388 ;;		_battConfig
  1389 ;;		_openSMBus
  1390 ;;		_updateBattData
  1391 ;;		_battSafeCheck
  1392 ;;		_xBeeTxByte
  1393 ;;		_gyroCalibrate
  1394 ;;		_gyroTimerStart
  1395 ;;		_gyroSelfTest
  1396 ;;		_updatePwrData
  1397 ;;		_openRS232
  1398 ;;		_xBeeConfig
  1399 ;;		_updateXBeeData
  1400 ;;		_xBeeTxXBee
  1401 ;;		_telemTimerStart
  1402 ;;		_updateSensorARData
  1403 ;;		_blinkLED
  1404 ;;		_xBeeTxString
  1405 ;;		___lwdiv
  1406 ;;		___lwmod
  1407 ;; This function is called by:
  1408 ;;		Startup code after reset
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text0
  1413  000B9A                     __ptext0:
  1414                           	opt stack 0
  1415  000B9A                     _main:
  1416                           	opt stack 23
  1417                           
  1418                           ;main.c: 184: INTCONbits.GIEH = 1;
  1419                           
  1420                           ;incstack = 0
  1421                           ;incstack = 0
  1422  000B9A  8EF2               	bsf	intcon,7,c	;volatile
  1423                           
  1424                           ;main.c: 185: INTCONbits.GIEL = 1;
  1425  000B9C  8CF2               	bsf	intcon,6,c	;volatile
  1426                           
  1427                           ;main.c: 186: INTCONbits.TMR0IE = 1;
  1428  000B9E  8AF2               	bsf	intcon,5,c	;volatile
  1429                           
  1430                           ;main.c: 187: INTCONbits.TMR0IF = 0;
  1431  000BA0  94F2               	bcf	intcon,2,c	;volatile
  1432                           
  1433                           ;main.c: 188: INTCONbits.RBIF = 0;
  1434  000BA2  90F2               	bcf	intcon,0,c	;volatile
  1435                           
  1436                           ;main.c: 190: INTCON2bits.RBPU = 1;
  1437  000BA4  8EF1               	bsf	intcon2,7,c	;volatile
  1438                           
  1439                           ;main.c: 191: INTCON2bits.TMR0IP = 1;
  1440  000BA6  84F1               	bsf	intcon2,2,c	;volatile
  1441                           
  1442                           ;main.c: 193: PIE1bits.RCIE = 1;
  1443  000BA8  8A9D               	bsf	3997,5,c	;volatile
  1444                           
  1445                           ;main.c: 194: PIE1bits.TMR1IE = 1;
  1446  000BAA  809D               	bsf	3997,0,c	;volatile
  1447                           
  1448                           ;main.c: 196: IPR1bits.RCIP = 0;
  1449  000BAC  9A9F               	bcf	3999,5,c	;volatile
  1450                           
  1451                           ;main.c: 197: IPR1bits.TMR1IP = 0;
  1452  000BAE  909F               	bcf	3999,0,c	;volatile
  1453                           
  1454                           ;main.c: 199: RCONbits.IPEN = 1;
  1455  000BB0  8ED0               	bsf	4048,7,c	;volatile
  1456                           
  1457                           ;main.c: 201: TRISA &= 0b1100000;
  1458  000BB2  0E60               	movlw	96
  1459  000BB4  1692               	andwf	3986,f,c	;volatile
  1460                           
  1461                           ;main.c: 202: TRISA |= 0b0010111;
  1462  000BB6  0E17               	movlw	23
  1463  000BB8  1292               	iorwf	3986,f,c	;volatile
  1464                           
  1465                           ;main.c: 203: TRISB = 0b11000100;
  1466  000BBA  0EC4               	movlw	196
  1467  000BBC  6E93               	movwf	3987,c	;volatile
  1468                           
  1469                           ;main.c: 204: TRISC = 0b11110000;
  1470  000BBE  0EF0               	movlw	240
  1471  000BC0  6E94               	movwf	3988,c	;volatile
  1472                           
  1473                           ;main.c: 206: PORTA = 0b00010000;
  1474  000BC2  0E10               	movlw	16
  1475  000BC4  6E80               	movwf	3968,c	;volatile
  1476                           
  1477                           ;main.c: 207: PORTB = 0b00000000;
  1478  000BC6  0E00               	movlw	0
  1479  000BC8  6E81               	movwf	3969,c	;volatile
  1480                           
  1481                           ;main.c: 208: PORTC = 0b00000000;
  1482  000BCA  0E00               	movlw	0
  1483  000BCC  6E82               	movwf	3970,c	;volatile
  1484                           
  1485                           ;main.c: 213: openSMBus();
  1486  000BCE  EC3B  F01D         	call	_openSMBus	;wreg free
  1487                           
  1488                           ;main.c: 215: battConfig();
  1489  000BD2  ECFC  F009         	call	_battConfig	;wreg free
  1490                           
  1491                           ;main.c: 216: updateBattData(battPtr);
  1492  000BD6  C0EB  F009         	movff	_battPtr,?_updateBattData
  1493  000BDA  C0EC  F00A         	movff	_battPtr+1,?_updateBattData+1
  1494  000BDE  EC65  F010         	call	_updateBattData	;wreg free
  1495                           
  1496                           ;main.c: 217: battSafeCheck(battPtr);
  1497  000BE2  C0EB  F012         	movff	_battPtr,?_battSafeCheck
  1498  000BE6  C0EC  F013         	movff	_battPtr+1,?_battSafeCheck+1
  1499  000BEA  ECD6  F00F         	call	_battSafeCheck	;wreg free
  1500                           
  1501                           ;main.c: 219: baroCalibrate();
  1502  000BEE  ECD6  F008         	call	_baroCalibrate	;wreg free
  1503                           
  1504                           ;main.c: 224: OpenADC(0b11001111 & 0b11111111 & 0b11110001, 0b10000111 & 0b01111111 & 0b
      +                          11111110, 15);
  1505  000BF2  0100               	movlb	0	; () banked
  1506  000BF4  6FC3               	movwf	??_main& (0+255),b
  1507  000BF6  0EC1               	movlw	193
  1508  000BF8  6E01               	movwf	?_OpenADC,c
  1509  000BFA  0100               	movlb	0	; () banked
  1510  000BFC  51C3               	movf	??_main& (0+255),w,b
  1511  000BFE  0100               	movlb	0	; () banked
  1512  000C00  6FC4               	movwf	(??_main+1)& (0+255),b
  1513  000C02  0E06               	movlw	6
  1514  000C04  6E02               	movwf	?_OpenADC+1,c
  1515  000C06  0100               	movlb	0	; () banked
  1516  000C08  51C4               	movf	(??_main+1)& (0+255),w,b
  1517  000C0A  0100               	movlb	0	; () banked
  1518  000C0C  6FC5               	movwf	(??_main+2)& (0+255),b
  1519  000C0E  0E0F               	movlw	15
  1520  000C10  6E03               	movwf	?_OpenADC+2,c
  1521  000C12  0100               	movlb	0	; () banked
  1522  000C14  51C5               	movf	(??_main+2)& (0+255),w,b
  1523  000C16  ECD5  F019         	call	_OpenADC	;wreg free
  1524                           
  1525                           ;main.c: 228: gyroCalibrate();
  1526  000C1A  ECDA  F01A         	call	_gyroCalibrate	;wreg free
  1527                           
  1528                           ;main.c: 229: gyroSelfTest();
  1529  000C1E  EC87  F015         	call	_gyroSelfTest	;wreg free
  1530                           
  1531                           ;main.c: 233: accelCalibrate();
  1532  000C22  EC04  F01B         	call	_accelCalibrate	;wreg free
  1533                           
  1534                           ;main.c: 234: accelSelfTest();
  1535  000C26  EC1E  F016         	call	_accelSelfTest	;wreg free
  1536                           
  1537                           ;main.c: 236: updatePwrData(powerPtr);
  1538  000C2A  C0EF  F037         	movff	_powerPtr,?_updatePwrData
  1539  000C2E  C0F0  F038         	movff	_powerPtr+1,?_updatePwrData+1
  1540  000C32  ECA9  F018         	call	_updatePwrData	;wreg free
  1541                           
  1542                           ;main.c: 241: openRS232();
  1543  000C36  EC48  F01D         	call	_openRS232	;wreg free
  1544                           
  1545                           ;main.c: 242: xBeeConfig();
  1546  000C3A  EC92  F01B         	call	_xBeeConfig	;wreg free
  1547                           
  1548                           ;main.c: 243: updateXBeeData(xBeePtr);
  1549  000C3E  C0F3  F013         	movff	_xBeePtr,?_updateXBeeData
  1550  000C42  C0F4  F014         	movff	_xBeePtr+1,?_updateXBeeData+1
  1551  000C46  EC45  F00F         	call	_updateXBeeData	;wreg free
  1552                           
  1553                           ;main.c: 245: xBeeTxByte('H');
  1554  000C4A  0100               	movlb	0	; () banked
  1555  000C4C  6FC3               	movwf	??_main& (0+255),b
  1556  000C4E  0E48               	movlw	72
  1557  000C50  6E0F               	movwf	?_xBeeTxByte,c
  1558  000C52  0100               	movlb	0	; () banked
  1559  000C54  51C3               	movf	??_main& (0+255),w,b
  1560  000C56  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1561                           
  1562                           ;main.c: 246: xBeeTxByte('i');
  1563  000C5A  0100               	movlb	0	; () banked
  1564  000C5C  6FC3               	movwf	??_main& (0+255),b
  1565  000C5E  0E69               	movlw	105
  1566  000C60  6E0F               	movwf	?_xBeeTxByte,c
  1567  000C62  0100               	movlb	0	; () banked
  1568  000C64  51C3               	movf	??_main& (0+255),w,b
  1569  000C66  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1570                           
  1571                           ;main.c: 247: xBeeTxByte('!');
  1572  000C6A  0100               	movlb	0	; () banked
  1573  000C6C  6FC3               	movwf	??_main& (0+255),b
  1574  000C6E  0E21               	movlw	33
  1575  000C70  6E0F               	movwf	?_xBeeTxByte,c
  1576  000C72  0100               	movlb	0	; () banked
  1577  000C74  51C3               	movf	??_main& (0+255),w,b
  1578  000C76  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1579                           
  1580                           ;main.c: 249: if(!RCONbits.TO){
  1581  000C7A  B6D0               	btfsc	4048,3,c	;volatile
  1582  000C7C  D011               	goto	l7858
  1583                           
  1584                           ;main.c: 250: RCONbits.TO = 1;
  1585  000C7E  86D0               	bsf	4048,3,c	;volatile
  1586                           
  1587                           ;main.c: 251: transmitError('W');
  1588  000C80  0100               	movlb	0	; () banked
  1589  000C82  6FC3               	movwf	??_main& (0+255),b
  1590  000C84  0E57               	movlw	87
  1591  000C86  6E10               	movwf	?_transmitError,c
  1592  000C88  0100               	movlb	0	; () banked
  1593  000C8A  51C3               	movf	??_main& (0+255),w,b
  1594  000C8C  EC7E  F01C         	call	_transmitError	;wreg free
  1595                           
  1596                           ;main.c: 252: morseCode('W');
  1597  000C90  0100               	movlb	0	; () banked
  1598  000C92  6FC3               	movwf	??_main& (0+255),b
  1599  000C94  0E57               	movlw	87
  1600  000C96  6E04               	movwf	?_morseCode,c
  1601  000C98  0100               	movlb	0	; () banked
  1602  000C9A  51C3               	movf	??_main& (0+255),w,b
  1603  000C9C  ECFB  F011         	call	_morseCode	;wreg free
  1604  000CA0                     l7858:
  1605                           
  1606                           ;main.c: 253: }
  1607                           ;main.c: 255: xBeeTxXBee(xBeePtr);
  1608  000CA0  C0F3  F01B         	movff	_xBeePtr,?_xBeeTxXBee
  1609  000CA4  C0F4  F01C         	movff	_xBeePtr+1,?_xBeeTxXBee+1
  1610  000CA8  EC38  F015         	call	_xBeeTxXBee	;wreg free
  1611                           
  1612                           ;main.c: 257: telemTimerStart();
  1613  000CAC  EC68  F01D         	call	_telemTimerStart	;wreg free
  1614                           
  1615                           ;main.c: 259: if (!gyroFail){
  1616  000CB0  0100               	movlb	0	; () banked
  1617  000CB2  0100               	movlb	0	; () banked
  1618  000CB4  67B8               	tstfsz	gyroscope@gyroFail& (0+255),b
  1619  000CB6  D002               	goto	l7866
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 260: gyroTimerStart();
  1623  000CB8  EC83  F01D         	call	_gyroTimerStart	;wreg free
  1624  000CBC                     l7866:
  1625                           
  1626                           ;main.c: 261: }
  1627                           ;main.c: 264: char message1[] = "Channel 1 = ";
  1628  000CBC  EE21  F042         	lfsr	2,main@F4036
  1629  000CC0  EE10  F0D8         	lfsr	1,main@message1
  1630  000CC4  0E0D               	movlw	13
  1631  000CC6                     u7071:
  1632  000CC6  CFDE FFE6          	movff	postinc2,postinc1
  1633  000CCA  2EE8               	decfsz	wreg,f,c
  1634  000CCC  D7FC               	goto	u7071
  1635                           
  1636                           ;main.c: 265: char message2[] = "     Channel 2 = ";
  1637  000CCE  EE21  F030         	lfsr	2,main@F4038
  1638  000CD2  EE10  F0C6         	lfsr	1,main@message2
  1639  000CD6  0E12               	movlw	18
  1640  000CD8                     u7081:
  1641  000CD8  CFDE FFE6          	movff	postinc2,postinc1
  1642  000CDC  2EE8               	decfsz	wreg,f,c
  1643  000CDE  D7FC               	goto	u7081
  1644                           
  1645                           ;main.c: 266: unsigned int input1;
  1646                           ;main.c: 267: unsigned int input2;
  1647                           ;main.c: 268: TRISA &= 0xFE;
  1648  000CE0  9092               	bcf	3986,0,c	;volatile
  1649                           
  1650                           ;main.c: 269: openRS232();
  1651  000CE2  EC48  F01D         	call	_openRS232	;wreg free
  1652                           
  1653                           ;main.c: 270: OpenADC(0b11011111 & 0b11111111 & 0b11111001,0b10001111 & 0b01111111, 11);
  1654  000CE6  0100               	movlb	0	; () banked
  1655  000CE8  6FC3               	movwf	??_main& (0+255),b
  1656  000CEA  0ED9               	movlw	217
  1657  000CEC  6E01               	movwf	?_OpenADC,c
  1658  000CEE  0100               	movlb	0	; () banked
  1659  000CF0  51C3               	movf	??_main& (0+255),w,b
  1660  000CF2  0100               	movlb	0	; () banked
  1661  000CF4  6FC4               	movwf	(??_main+1)& (0+255),b
  1662  000CF6  0E0F               	movlw	15
  1663  000CF8  6E02               	movwf	?_OpenADC+1,c
  1664  000CFA  0100               	movlb	0	; () banked
  1665  000CFC  51C4               	movf	(??_main+1)& (0+255),w,b
  1666  000CFE  0100               	movlb	0	; () banked
  1667  000D00  6FC5               	movwf	(??_main+2)& (0+255),b
  1668  000D02  0E0B               	movlw	11
  1669  000D04  6E03               	movwf	?_OpenADC+2,c
  1670  000D06  0100               	movlb	0	; () banked
  1671  000D08  51C5               	movf	(??_main+2)& (0+255),w,b
  1672  000D0A  ECD5  F019         	call	_OpenADC	;wreg free
  1673                           
  1674                           ;main.c: 272: ADCON1 = 0b00001010;
  1675  000D0E  0E0A               	movlw	10
  1676  000D10  6EC1               	movwf	4033,c	;volatile
  1677  000D12                     l7878:
  1678                           
  1679                           ;main.c: 277: updateBattData(battPtr);
  1680  000D12  C0EB  F009         	movff	_battPtr,?_updateBattData
  1681  000D16  C0EC  F00A         	movff	_battPtr+1,?_updateBattData+1
  1682  000D1A  EC65  F010         	call	_updateBattData	;wreg free
  1683                           
  1684                           ;main.c: 278: battSafeCheck(battPtr);
  1685  000D1E  C0EB  F012         	movff	_battPtr,?_battSafeCheck
  1686  000D22  C0EC  F013         	movff	_battPtr+1,?_battSafeCheck+1
  1687  000D26  ECD6  F00F         	call	_battSafeCheck	;wreg free
  1688                           
  1689                           ;main.c: 279: updatePwrData(powerPtr);
  1690  000D2A  C0EF  F037         	movff	_powerPtr,?_updatePwrData
  1691  000D2E  C0F0  F038         	movff	_powerPtr+1,?_updatePwrData+1
  1692  000D32  ECA9  F018         	call	_updatePwrData	;wreg free
  1693                           
  1694                           ;main.c: 280: updateSensorARData(sensorPtr);
  1695  000D36  C0F1  F07B         	movff	_sensorPtr,?_updateSensorARData
  1696  000D3A  C0F2  F07C         	movff	_sensorPtr+1,?_updateSensorARData+1
  1697  000D3E  ECC1  F013         	call	_updateSensorARData	;wreg free
  1698                           
  1699                           ;main.c: 282: blinkLED();
  1700  000D42  ECBF  F01C         	call	_blinkLED	;wreg free
  1701                           
  1702                           ;main.c: 285: Delay10KTCYx(0);
  1703  000D46  0100               	movlb	0	; () banked
  1704  000D48  6FC3               	movwf	??_main& (0+255),b
  1705  000D4A  0E00               	movlw	0
  1706  000D4C  6E01               	movwf	?_Delay10KTCYx,c
  1707  000D4E  0100               	movlb	0	; () banked
  1708  000D50  51C3               	movf	??_main& (0+255),w,b
  1709  000D52  EC53  F01D         	call	_Delay10KTCYx	;wreg free
  1710                           
  1711                           ;main.c: 287: xBeeTxString(message1);
  1712  000D56  0100               	movlb	0	; () banked
  1713  000D58  0E00               	movlw	high main@message1
  1714  000D5A  6E11               	movwf	?_xBeeTxString+1,c
  1715  000D5C  0100               	movlb	0	; () banked
  1716  000D5E  0ED8               	movlw	low main@message1
  1717  000D60  6E10               	movwf	?_xBeeTxString,c
  1718  000D62  EC2D  F01C         	call	_xBeeTxString	;wreg free
  1719                           
  1720                           ;main.c: 288: PORTAbits.RA0 = 1;
  1721  000D66  8080               	bsf	3968,0,c	;volatile
  1722                           
  1723                           ;main.c: 291: SetChanADC(0b10001111);
  1724  000D68  0100               	movlb	0	; () banked
  1725  000D6A  6FC3               	movwf	??_main& (0+255),b
  1726  000D6C  0E8F               	movlw	143
  1727  000D6E  6E01               	movwf	?_SetChanADC,c
  1728  000D70  0100               	movlb	0	; () banked
  1729  000D72  51C3               	movf	??_main& (0+255),w,b
  1730  000D74  EC5E  F01D         	call	_SetChanADC	;wreg free
  1731                           
  1732                           ;main.c: 292: ConvertADC();
  1733  000D78  ECBA  F01D         	call	_ConvertADC	;wreg free
  1734  000D7C                     l7898:
  1735  000D7C  ECB7  F01D         	call	_BusyADC	;wreg free
  1736  000D80  0900               	iorlw	0
  1737  000D82  A4D8               	btfss	status,2,c
  1738  000D84  D7FB               	goto	l7898
  1739                           
  1740                           ;main.c: 294: input1 = ReadADC();
  1741  000D86  ECB2  F01D         	call	_ReadADC	;wreg free
  1742  000D8A  C001  F0E5         	movff	?_ReadADC,main@input1
  1743  000D8E  C002  F0E6         	movff	?_ReadADC+1,main@input1+1
  1744                           
  1745                           ;main.c: 296: xBeeTxByte((input1 / 1000) + 48);
  1746  000D92  C0E5  F007         	movff	main@input1,?___lwdiv
  1747  000D96  C0E6  F008         	movff	main@input1+1,?___lwdiv+1
  1748  000D9A  0E03               	movlw	3
  1749  000D9C  6E0A               	movwf	?___lwdiv+3,c
  1750  000D9E  0EE8               	movlw	232
  1751  000DA0  6E09               	movwf	?___lwdiv+2,c
  1752  000DA2  EC03  F01A         	call	___lwdiv	;wreg free
  1753  000DA6  5007               	movf	?___lwdiv,w,c
  1754  000DA8  0F30               	addlw	48
  1755  000DAA  6E0F               	movwf	?_xBeeTxByte,c
  1756  000DAC  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1757                           
  1758                           ;main.c: 297: xBeeTxByte(((input1 % 1000) / 100) + 48);
  1759  000DB0  0E03               	movlw	3
  1760  000DB2  6E04               	movwf	?___lwmod+3,c
  1761  000DB4  0EE8               	movlw	232
  1762  000DB6  6E03               	movwf	?___lwmod+2,c
  1763  000DB8  C0E5  F001         	movff	main@input1,?___lwmod
  1764  000DBC  C0E6  F002         	movff	main@input1+1,?___lwmod+1
  1765  000DC0  EC2C  F01B         	call	___lwmod	;wreg free
  1766  000DC4  C001  F007         	movff	?___lwmod,?___lwdiv
  1767  000DC8  C002  F008         	movff	?___lwmod+1,?___lwdiv+1
  1768  000DCC  0E00               	movlw	0
  1769  000DCE  6E0A               	movwf	?___lwdiv+3,c
  1770  000DD0  0E64               	movlw	100
  1771  000DD2  6E09               	movwf	?___lwdiv+2,c
  1772  000DD4  EC03  F01A         	call	___lwdiv	;wreg free
  1773  000DD8  5007               	movf	?___lwdiv,w,c
  1774  000DDA  0F30               	addlw	48
  1775  000DDC  6E0F               	movwf	?_xBeeTxByte,c
  1776  000DDE  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1777                           
  1778                           ;main.c: 298: xBeeTxByte(((input1 % 100) / 10) + 48);
  1779  000DE2  0E00               	movlw	0
  1780  000DE4  6E04               	movwf	?___lwmod+3,c
  1781  000DE6  0E64               	movlw	100
  1782  000DE8  6E03               	movwf	?___lwmod+2,c
  1783  000DEA  C0E5  F001         	movff	main@input1,?___lwmod
  1784  000DEE  C0E6  F002         	movff	main@input1+1,?___lwmod+1
  1785  000DF2  EC2C  F01B         	call	___lwmod	;wreg free
  1786  000DF6  C001  F007         	movff	?___lwmod,?___lwdiv
  1787  000DFA  C002  F008         	movff	?___lwmod+1,?___lwdiv+1
  1788  000DFE  0E00               	movlw	0
  1789  000E00  6E0A               	movwf	?___lwdiv+3,c
  1790  000E02  0E0A               	movlw	10
  1791  000E04  6E09               	movwf	?___lwdiv+2,c
  1792  000E06  EC03  F01A         	call	___lwdiv	;wreg free
  1793  000E0A  5007               	movf	?___lwdiv,w,c
  1794  000E0C  0F30               	addlw	48
  1795  000E0E  6E0F               	movwf	?_xBeeTxByte,c
  1796  000E10  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1797                           
  1798                           ;main.c: 299: xBeeTxByte((input1 % 10) + 48);
  1799  000E14  C0E5  F001         	movff	main@input1,?___lwmod
  1800  000E18  C0E6  F002         	movff	main@input1+1,?___lwmod+1
  1801  000E1C  0E00               	movlw	0
  1802  000E1E  6E04               	movwf	?___lwmod+3,c
  1803  000E20  0E0A               	movlw	10
  1804  000E22  6E03               	movwf	?___lwmod+2,c
  1805  000E24  EC2C  F01B         	call	___lwmod	;wreg free
  1806  000E28  5001               	movf	?___lwmod,w,c
  1807  000E2A  0F30               	addlw	48
  1808  000E2C  6E0F               	movwf	?_xBeeTxByte,c
  1809  000E2E  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1810                           
  1811                           ;main.c: 302: xBeeTxString(message2);
  1812  000E32  0100               	movlb	0	; () banked
  1813  000E34  0E00               	movlw	high main@message2
  1814  000E36  6E11               	movwf	?_xBeeTxString+1,c
  1815  000E38  0100               	movlb	0	; () banked
  1816  000E3A  0EC6               	movlw	low main@message2
  1817  000E3C  6E10               	movwf	?_xBeeTxString,c
  1818  000E3E  EC2D  F01C         	call	_xBeeTxString	;wreg free
  1819                           
  1820                           ;main.c: 303: SetChanADC(0b10010111);
  1821  000E42  0100               	movlb	0	; () banked
  1822  000E44  6FC3               	movwf	??_main& (0+255),b
  1823  000E46  0E97               	movlw	151
  1824  000E48  6E01               	movwf	?_SetChanADC,c
  1825  000E4A  0100               	movlb	0	; () banked
  1826  000E4C  51C3               	movf	??_main& (0+255),w,b
  1827  000E4E  EC5E  F01D         	call	_SetChanADC	;wreg free
  1828                           
  1829                           ;main.c: 304: ConvertADC();
  1830  000E52  ECBA  F01D         	call	_ConvertADC	;wreg free
  1831  000E56                     l7916:
  1832  000E56  ECB7  F01D         	call	_BusyADC	;wreg free
  1833  000E5A  0900               	iorlw	0
  1834  000E5C  A4D8               	btfss	status,2,c
  1835  000E5E  D7FB               	goto	l7916
  1836                           
  1837                           ;main.c: 306: input2 = ReadADC();
  1838  000E60  ECB2  F01D         	call	_ReadADC	;wreg free
  1839  000E64  C001  F0E7         	movff	?_ReadADC,main@input2
  1840  000E68  C002  F0E8         	movff	?_ReadADC+1,main@input2+1
  1841                           
  1842                           ;main.c: 308: xBeeTxByte((input2 / 1000) + 48);
  1843  000E6C  C0E7  F007         	movff	main@input2,?___lwdiv
  1844  000E70  C0E8  F008         	movff	main@input2+1,?___lwdiv+1
  1845  000E74  0E03               	movlw	3
  1846  000E76  6E0A               	movwf	?___lwdiv+3,c
  1847  000E78  0EE8               	movlw	232
  1848  000E7A  6E09               	movwf	?___lwdiv+2,c
  1849  000E7C  EC03  F01A         	call	___lwdiv	;wreg free
  1850  000E80  5007               	movf	?___lwdiv,w,c
  1851  000E82  0F30               	addlw	48
  1852  000E84  6E0F               	movwf	?_xBeeTxByte,c
  1853  000E86  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1854                           
  1855                           ;main.c: 309: xBeeTxByte(((input2 % 1000) / 100) + 48);
  1856  000E8A  0E03               	movlw	3
  1857  000E8C  6E04               	movwf	?___lwmod+3,c
  1858  000E8E  0EE8               	movlw	232
  1859  000E90  6E03               	movwf	?___lwmod+2,c
  1860  000E92  C0E7  F001         	movff	main@input2,?___lwmod
  1861  000E96  C0E8  F002         	movff	main@input2+1,?___lwmod+1
  1862  000E9A  EC2C  F01B         	call	___lwmod	;wreg free
  1863  000E9E  C001  F007         	movff	?___lwmod,?___lwdiv
  1864  000EA2  C002  F008         	movff	?___lwmod+1,?___lwdiv+1
  1865  000EA6  0E00               	movlw	0
  1866  000EA8  6E0A               	movwf	?___lwdiv+3,c
  1867  000EAA  0E64               	movlw	100
  1868  000EAC  6E09               	movwf	?___lwdiv+2,c
  1869  000EAE  EC03  F01A         	call	___lwdiv	;wreg free
  1870  000EB2  5007               	movf	?___lwdiv,w,c
  1871  000EB4  0F30               	addlw	48
  1872  000EB6  6E0F               	movwf	?_xBeeTxByte,c
  1873  000EB8  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1874                           
  1875                           ;main.c: 310: xBeeTxByte(((input2 % 100) / 10) + 48);
  1876  000EBC  0E00               	movlw	0
  1877  000EBE  6E04               	movwf	?___lwmod+3,c
  1878  000EC0  0E64               	movlw	100
  1879  000EC2  6E03               	movwf	?___lwmod+2,c
  1880  000EC4  C0E7  F001         	movff	main@input2,?___lwmod
  1881  000EC8  C0E8  F002         	movff	main@input2+1,?___lwmod+1
  1882  000ECC  EC2C  F01B         	call	___lwmod	;wreg free
  1883  000ED0  C001  F007         	movff	?___lwmod,?___lwdiv
  1884  000ED4  C002  F008         	movff	?___lwmod+1,?___lwdiv+1
  1885  000ED8  0E00               	movlw	0
  1886  000EDA  6E0A               	movwf	?___lwdiv+3,c
  1887  000EDC  0E0A               	movlw	10
  1888  000EDE  6E09               	movwf	?___lwdiv+2,c
  1889  000EE0  EC03  F01A         	call	___lwdiv	;wreg free
  1890  000EE4  5007               	movf	?___lwdiv,w,c
  1891  000EE6  0F30               	addlw	48
  1892  000EE8  6E0F               	movwf	?_xBeeTxByte,c
  1893  000EEA  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1894                           
  1895                           ;main.c: 311: xBeeTxByte((input2 % 10) + 48);
  1896  000EEE  C0E7  F001         	movff	main@input2,?___lwmod
  1897  000EF2  C0E8  F002         	movff	main@input2+1,?___lwmod+1
  1898  000EF6  0E00               	movlw	0
  1899  000EF8  6E04               	movwf	?___lwmod+3,c
  1900  000EFA  0E0A               	movlw	10
  1901  000EFC  6E03               	movwf	?___lwmod+2,c
  1902  000EFE  EC2C  F01B         	call	___lwmod	;wreg free
  1903  000F02  5001               	movf	?___lwmod,w,c
  1904  000F04  0F30               	addlw	48
  1905  000F06  6E0F               	movwf	?_xBeeTxByte,c
  1906  000F08  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1907                           
  1908                           ;main.c: 314: PORTAbits.RA0 = 0;
  1909  000F0C  9080               	bcf	3968,0,c	;volatile
  1910                           
  1911                           ;main.c: 315: Delay10KTCYx(0);
  1912  000F0E  0100               	movlb	0	; () banked
  1913  000F10  6FC3               	movwf	??_main& (0+255),b
  1914  000F12  0E00               	movlw	0
  1915  000F14  6E01               	movwf	?_Delay10KTCYx,c
  1916  000F16  0100               	movlb	0	; () banked
  1917  000F18  51C3               	movf	??_main& (0+255),w,b
  1918  000F1A  EC53  F01D         	call	_Delay10KTCYx	;wreg free
  1919                           
  1920                           ;main.c: 317: xBeeTxByte(0x0A);
  1921  000F1E  0100               	movlb	0	; () banked
  1922  000F20  6FC3               	movwf	??_main& (0+255),b
  1923  000F22  0E0A               	movlw	10
  1924  000F24  6E0F               	movwf	?_xBeeTxByte,c
  1925  000F26  0100               	movlb	0	; () banked
  1926  000F28  51C3               	movf	??_main& (0+255),w,b
  1927  000F2A  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  1928  000F2E  D6F1               	goto	l7878
  1929  000F30                     __end_of_main:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           intcon	equ	0xFF2
  1936                           intcon2	equ	0xFF1
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postinc1	equ	0xFE6
  1940                           postdec1	equ	0xFE5
  1941                           fsr1l	equ	0xFE1
  1942                           postinc2	equ	0xFDE
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function ___lwmod *****************
  1946 ;; Defined at:
  1947 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lwmod.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  dividend        2    0[COMRAM] unsigned int 
  1950 ;;  divisor         2    2[COMRAM] unsigned int 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  counter         1    5[COMRAM] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  2    0[COMRAM] unsigned int 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1962 ;;      Params:         4       0       0       0       0       0       0
  1963 ;;      Locals:         1       0       0       0       0       0       0
  1964 ;;      Temps:          1       0       0       0       0       0       0
  1965 ;;      Totals:         6       0       0       0       0       0       0
  1966 ;;Total ram usage:        6 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; This function calls:
  1969 ;;		Nothing
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text1
  1976  003658                     __ptext1:
  1977                           	opt stack 0
  1978  003658                     ___lwmod:
  1979                           	opt stack 30
  1980                           
  1981                           ;incstack = 0
  1982                           ;incstack = 0
  1983  003658  5004               	movf	___lwmod@divisor+1,w,c
  1984  00365A  1003               	iorwf	___lwmod@divisor,w,c
  1985  00365C  B4D8               	btfsc	status,2,c
  1986  00365E  D01A               	goto	l2035
  1987  003660  6E05               	movwf	??___lwmod& (0+255),c
  1988  003662  0E01               	movlw	1
  1989  003664  6E06               	movwf	___lwmod@counter,c
  1990  003666  5005               	movf	??___lwmod& (0+255),w,c
  1991  003668  D004               	goto	l6724
  1992  00366A                     l6722:
  1993  00366A  90D8               	bcf	status,0,c
  1994  00366C  3603               	rlcf	___lwmod@divisor,f,c
  1995  00366E  3604               	rlcf	___lwmod@divisor+1,f,c
  1996  003670  2A06               	incf	___lwmod@counter,f,c
  1997  003672                     l6724:
  1998  003672  AE04               	btfss	___lwmod@divisor+1,7,c
  1999  003674  D7FA               	goto	l6722
  2000  003676                     l6726:
  2001  003676  5003               	movf	___lwmod@divisor,w,c
  2002  003678  5C01               	subwf	___lwmod@dividend,w,c
  2003  00367A  5004               	movf	___lwmod@divisor+1,w,c
  2004  00367C  5802               	subwfb	___lwmod@dividend+1,w,c
  2005  00367E  A0D8               	btfss	status,0,c
  2006  003680  D004               	goto	l6730
  2007  003682  5003               	movf	___lwmod@divisor,w,c
  2008  003684  5E01               	subwf	___lwmod@dividend,f,c
  2009  003686  5004               	movf	___lwmod@divisor+1,w,c
  2010  003688  5A02               	subwfb	___lwmod@dividend+1,f,c
  2011  00368A                     l6730:
  2012  00368A  90D8               	bcf	status,0,c
  2013  00368C  3204               	rrcf	___lwmod@divisor+1,f,c
  2014  00368E  3203               	rrcf	___lwmod@divisor,f,c
  2015  003690  2E06               	decfsz	___lwmod@counter,f,c
  2016  003692  D7F1               	goto	l6726
  2017  003694                     l2035:
  2018  003694  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2019  003698  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2020  00369C  0012               	return	
  2021  00369E                     __end_of___lwmod:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           intcon	equ	0xFF2
  2028                           intcon2	equ	0xFF1
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postinc1	equ	0xFE6
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           postinc2	equ	0xFDE
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function ___lwdiv *****************
  2038 ;; Defined at:
  2039 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  dividend        2    6[COMRAM] unsigned int 
  2042 ;;  divisor         2    8[COMRAM] unsigned int 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  quotient        2   11[COMRAM] unsigned int 
  2045 ;;  counter         1   13[COMRAM] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  2    6[COMRAM] unsigned int 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2055 ;;      Params:         4       0       0       0       0       0       0
  2056 ;;      Locals:         3       0       0       0       0       0       0
  2057 ;;      Temps:          1       0       0       0       0       0       0
  2058 ;;      Totals:         8       0       0       0       0       0       0
  2059 ;;Total ram usage:        8 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_main
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text2
  2069  003406                     __ptext2:
  2070                           	opt stack 0
  2071  003406                     ___lwdiv:
  2072                           	opt stack 30
  2073                           
  2074                           ;incstack = 0
  2075                           ;incstack = 0
  2076  003406  0E00               	movlw	0
  2077  003408  6E0D               	movwf	___lwdiv@quotient+1,c
  2078  00340A  0E00               	movlw	0
  2079  00340C  6E0C               	movwf	___lwdiv@quotient,c
  2080  00340E  500A               	movf	___lwdiv@divisor+1,w,c
  2081  003410  1009               	iorwf	___lwdiv@divisor,w,c
  2082  003412  B4D8               	btfsc	status,2,c
  2083  003414  D01E               	goto	l2025
  2084  003416  6E0B               	movwf	??___lwdiv& (0+255),c
  2085  003418  0E01               	movlw	1
  2086  00341A  6E0E               	movwf	___lwdiv@counter,c
  2087  00341C  500B               	movf	??___lwdiv& (0+255),w,c
  2088  00341E  D004               	goto	l7110
  2089  003420                     l7108:
  2090  003420  90D8               	bcf	status,0,c
  2091  003422  3609               	rlcf	___lwdiv@divisor,f,c
  2092  003424  360A               	rlcf	___lwdiv@divisor+1,f,c
  2093  003426  2A0E               	incf	___lwdiv@counter,f,c
  2094  003428                     l7110:
  2095  003428  AE0A               	btfss	___lwdiv@divisor+1,7,c
  2096  00342A  D7FA               	goto	l7108
  2097  00342C                     l7112:
  2098  00342C  90D8               	bcf	status,0,c
  2099  00342E  360C               	rlcf	___lwdiv@quotient,f,c
  2100  003430  360D               	rlcf	___lwdiv@quotient+1,f,c
  2101  003432  5009               	movf	___lwdiv@divisor,w,c
  2102  003434  5C07               	subwf	___lwdiv@dividend,w,c
  2103  003436  500A               	movf	___lwdiv@divisor+1,w,c
  2104  003438  5808               	subwfb	___lwdiv@dividend+1,w,c
  2105  00343A  A0D8               	btfss	status,0,c
  2106  00343C  D005               	goto	l7120
  2107  00343E  5009               	movf	___lwdiv@divisor,w,c
  2108  003440  5E07               	subwf	___lwdiv@dividend,f,c
  2109  003442  500A               	movf	___lwdiv@divisor+1,w,c
  2110  003444  5A08               	subwfb	___lwdiv@dividend+1,f,c
  2111  003446  800C               	bsf	___lwdiv@quotient,0,c
  2112  003448                     l7120:
  2113  003448  90D8               	bcf	status,0,c
  2114  00344A  320A               	rrcf	___lwdiv@divisor+1,f,c
  2115  00344C  3209               	rrcf	___lwdiv@divisor,f,c
  2116  00344E  2E0E               	decfsz	___lwdiv@counter,f,c
  2117  003450  D7ED               	goto	l7112
  2118  003452                     l2025:
  2119  003452  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  2120  003456  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2121  00345A  0012               	return	
  2122  00345C                     __end_of___lwdiv:
  2123                           	opt stack 0
  2124                           tblptru	equ	0xFF8
  2125                           tblptrh	equ	0xFF7
  2126                           tblptrl	equ	0xFF6
  2127                           tablat	equ	0xFF5
  2128                           intcon	equ	0xFF2
  2129                           intcon2	equ	0xFF1
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           postinc1	equ	0xFE6
  2133                           postdec1	equ	0xFE5
  2134                           fsr1l	equ	0xFE1
  2135                           postinc2	equ	0xFDE
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _xBeeTxString *****************
  2139 ;; Defined at:
  2140 ;;		line 160 in file "telemetry.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  data            2   15[COMRAM] PTR unsigned char 
  2143 ;;		 -> main@message2(18), main@message1(13), 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               2   17[COMRAM] int 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2155 ;;      Params:         2       0       0       0       0       0       0
  2156 ;;      Locals:         2       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0
  2158 ;;      Totals:         4       0       0       0       0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    2
  2162 ;; This function calls:
  2163 ;;		_xBeeTxByte
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text3
  2170  00385A                     __ptext3:
  2171                           	opt stack 0
  2172  00385A                     _xBeeTxString:
  2173                           	opt stack 28
  2174                           
  2175                           ;telemetry.c: 161: int i = 0;
  2176                           
  2177                           ;incstack = 0
  2178                           ;incstack = 0
  2179  00385A  0E00               	movlw	0
  2180  00385C  6E13               	movwf	xBeeTxString@i+1,c
  2181  00385E  0E00               	movlw	0
  2182  003860  6E12               	movwf	xBeeTxString@i,c
  2183                           
  2184                           ;telemetry.c: 162: while (data[i]){
  2185  003862  D00C               	goto	l7262
  2186  003864                     l7258:
  2187                           
  2188                           ;telemetry.c: 163: xBeeTxByte(data[i]);
  2189  003864  5012               	movf	xBeeTxString@i,w,c
  2190  003866  2410               	addwf	xBeeTxString@data,w,c
  2191  003868  6ED9               	movwf	fsr2l,c
  2192  00386A  5013               	movf	xBeeTxString@i+1,w,c
  2193  00386C  2011               	addwfc	xBeeTxString@data+1,w,c
  2194  00386E  6EDA               	movwf	fsr2h,c
  2195  003870  50DF               	movf	indf2,w,c
  2196  003872  6E0F               	movwf	?_xBeeTxByte,c
  2197  003874  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  2198                           
  2199                           ;telemetry.c: 164: i++;
  2200  003878  4A12               	infsnz	xBeeTxString@i,f,c
  2201  00387A  2A13               	incf	xBeeTxString@i+1,f,c
  2202  00387C                     l7262:
  2203  00387C  5012               	movf	xBeeTxString@i,w,c
  2204  00387E  2410               	addwf	xBeeTxString@data,w,c
  2205  003880  6ED9               	movwf	fsr2l,c
  2206  003882  5013               	movf	xBeeTxString@i+1,w,c
  2207  003884  2011               	addwfc	xBeeTxString@data+1,w,c
  2208  003886  6EDA               	movwf	fsr2h,c
  2209  003888  50DF               	movf	indf2,w,c
  2210  00388A  B4D8               	btfsc	status,2,c
  2211  00388C  0012               	return	
  2212  00388E  D7EA               	goto	l7258
  2213  003890                     __end_of_xBeeTxString:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           intcon	equ	0xFF2
  2220                           intcon2	equ	0xFF1
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postinc1	equ	0xFE6
  2224                           postdec1	equ	0xFE5
  2225                           fsr1l	equ	0xFE1
  2226                           indf2	equ	0xFDF
  2227                           postinc2	equ	0xFDE
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _blinkLED *****************
  2233 ;; Defined at:
  2234 ;;		line 79 in file "power.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;		None               void
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2248 ;;      Params:         0       0       0       0       0       0       0
  2249 ;;      Locals:         0       0       0       0       0       0       0
  2250 ;;      Temps:          1       0       0       0       0       0       0
  2251 ;;      Totals:         1       0       0       0       0       0       0
  2252 ;;Total ram usage:        1 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text4
  2262  00397E                     __ptext4:
  2263                           	opt stack 0
  2264  00397E                     _blinkLED:
  2265                           	opt stack 30
  2266                           
  2267                           ;power.c: 80: onLEDBlinker = !onLEDBlinker;
  2268                           
  2269                           ;incstack = 0
  2270                           ;incstack = 0
  2271  00397E  507F               	movf	_onLEDBlinker,w,c
  2272  003980  A4D8               	btfss	status,2,c
  2273  003982  D002               	goto	u5020
  2274  003984  0E01               	movlw	1
  2275  003986  D001               	goto	u5026
  2276  003988                     u5020:
  2277  003988  0E00               	movlw	0
  2278  00398A                     u5026:
  2279  00398A  6E7F               	movwf	_onLEDBlinker,c
  2280                           
  2281                           ;power.c: 81: PORTAbits.RA5 = (onLEDBlinker & 1);
  2282  00398C  C07F  F001         	movff	_onLEDBlinker,??_blinkLED
  2283  003990  0E01               	movlw	1
  2284  003992  1601               	andwf	??_blinkLED,f,c
  2285  003994  3A01               	swapf	??_blinkLED,f,c
  2286  003996  4601               	rlncf	??_blinkLED,f,c
  2287  003998  5080               	movf	3968,w,c	;volatile
  2288  00399A  1801               	xorwf	??_blinkLED,w,c
  2289  00399C  0BDF               	andlw	-33
  2290  00399E  1801               	xorwf	??_blinkLED,w,c
  2291  0039A0  6E80               	movwf	3968,c	;volatile
  2292  0039A2  0012               	return	
  2293  0039A4                     __end_of_blinkLED:
  2294                           	opt stack 0
  2295                           tblptru	equ	0xFF8
  2296                           tblptrh	equ	0xFF7
  2297                           tblptrl	equ	0xFF6
  2298                           tablat	equ	0xFF5
  2299                           intcon	equ	0xFF2
  2300                           intcon2	equ	0xFF1
  2301                           postinc0	equ	0xFEE
  2302                           wreg	equ	0xFE8
  2303                           postinc1	equ	0xFE6
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           postinc2	equ	0xFDE
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _updateSensorARData *****************
  2313 ;; Defined at:
  2314 ;;		line 296 in file "telemetry.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  ptr             2  122[COMRAM] PTR struct .
  2317 ;;		 -> sensorData(14), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  rawPres         2    2[BANK0 ] unsigned short 
  2320 ;;  rawTemp         2    0[BANK0 ] unsigned short 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;		None               void
  2323 ;; Registers used:
  2324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2330 ;;      Params:         2       0       0       0       0       0       0
  2331 ;;      Locals:         0       4       0       0       0       0       0
  2332 ;;      Temps:          1       0       0       0       0       0       0
  2333 ;;      Totals:         3       4       0       0       0       0       0
  2334 ;;Total ram usage:        7 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    7
  2337 ;; This function calls:
  2338 ;;		_accelGetRoll
  2339 ;;		_baroGetVal
  2340 ;;		_baroTempStart
  2341 ;;		_baroPresStart
  2342 ;;		_baroTrueTemp
  2343 ;;		_baroTruePres
  2344 ;;		_baroConvertAlt
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text5
  2351  002782                     __ptext5:
  2352                           	opt stack 0
  2353  002782                     _updateSensorARData:
  2354                           	opt stack 23
  2355                           
  2356                           ;telemetry.c: 297: unsigned short rawTemp;
  2357                           ;telemetry.c: 298: unsigned short rawPres;
  2358                           ;telemetry.c: 300: baroTempStart();
  2359                           
  2360                           ;incstack = 0
  2361                           ;incstack = 0
  2362  002782  EC84  F01A         	call	_baroTempStart	;wreg free
  2363                           
  2364                           ;telemetry.c: 301: rawTemp = baroGetVal(0xF6);
  2365  002786  6E7D               	movwf	??_updateSensorARData& (0+255),c
  2366  002788  0EF6               	movlw	246
  2367  00278A  6E02               	movwf	?_baroGetVal,c
  2368  00278C  507D               	movf	??_updateSensorARData& (0+255),w,c
  2369  00278E  ECF7  F016         	call	_baroGetVal	;wreg free
  2370  002792  C002  F0BF         	movff	?_baroGetVal,updateSensorARData@rawTemp
  2371  002796  C003  F0C0         	movff	?_baroGetVal+1,updateSensorARData@rawTemp+1
  2372                           
  2373                           ;telemetry.c: 302: ptr->temp = baroTrueTemp(rawTemp);
  2374  00279A  C0BF  F010         	movff	updateSensorARData@rawTemp,?_baroTrueTemp
  2375  00279E  C0C0  F011         	movff	updateSensorARData@rawTemp+1,?_baroTrueTemp+1
  2376  0027A2  EC85  F00D         	call	_baroTrueTemp	;wreg free
  2377  0027A6  C07B  FFD9         	movff	updateSensorARData@ptr,fsr2l
  2378  0027AA  C07C  FFDA         	movff	updateSensorARData@ptr+1,fsr2h
  2379  0027AE  C010  FFDE         	movff	?_baroTrueTemp,postinc2
  2380  0027B2  C011  FFDD         	movff	?_baroTrueTemp+1,postdec2
  2381                           
  2382                           ;telemetry.c: 304: baroPresStart();
  2383  0027B6  EC59  F01A         	call	_baroPresStart	;wreg free
  2384                           
  2385                           ;telemetry.c: 305: rawPres = baroGetVal(0xF6);
  2386  0027BA  6E7D               	movwf	??_updateSensorARData& (0+255),c
  2387  0027BC  0EF6               	movlw	246
  2388  0027BE  6E02               	movwf	?_baroGetVal,c
  2389  0027C0  507D               	movf	??_updateSensorARData& (0+255),w,c
  2390  0027C2  ECF7  F016         	call	_baroGetVal	;wreg free
  2391  0027C6  C002  F0C1         	movff	?_baroGetVal,updateSensorARData@rawPres
  2392  0027CA  C003  F0C2         	movff	?_baroGetVal+1,updateSensorARData@rawPres+1
  2393                           
  2394                           ;telemetry.c: 306: ptr->pressure = baroTruePres(rawPres);
  2395  0027CE  C0C1  F010         	movff	updateSensorARData@rawPres,?_baroTruePres
  2396  0027D2  C0C2  F011         	movff	updateSensorARData@rawPres+1,?_baroTruePres+1
  2397  0027D6  EC11  F003         	call	_baroTruePres	;wreg free
  2398  0027DA  EE20 F002          	lfsr	2,2
  2399  0027DE  507B               	movf	updateSensorARData@ptr,w,c
  2400  0027E0  26D9               	addwf	fsr2l,f,c
  2401  0027E2  507C               	movf	updateSensorARData@ptr+1,w,c
  2402  0027E4  22DA               	addwfc	fsr2h,f,c
  2403  0027E6  C010  FFDE         	movff	?_baroTruePres,postinc2
  2404  0027EA  C011  FFDE         	movff	?_baroTruePres+1,postinc2
  2405  0027EE  C012  FFDE         	movff	?_baroTruePres+2,postinc2
  2406  0027F2  C013  FFDD         	movff	?_baroTruePres+3,postdec2
  2407  0027F6  06D9               	decf	fsr2l,f,c
  2408  0027F8  06D9               	decf	fsr2l,f,c
  2409                           
  2410                           ;telemetry.c: 308: ptr->altitude = baroConvertAlt(ptr->pressure);
  2411  0027FA  EE20 F002          	lfsr	2,2
  2412  0027FE  507B               	movf	updateSensorARData@ptr,w,c
  2413  002800  26D9               	addwf	fsr2l,f,c
  2414  002802  507C               	movf	updateSensorARData@ptr+1,w,c
  2415  002804  22DA               	addwfc	fsr2h,f,c
  2416  002806  CFDE F03C          	movff	postinc2,?_baroConvertAlt
  2417  00280A  CFDE F03D          	movff	postinc2,?_baroConvertAlt+1
  2418  00280E  CFDE F03E          	movff	postinc2,?_baroConvertAlt+2
  2419  002812  CFDE F03F          	movff	postinc2,?_baroConvertAlt+3
  2420  002816  ECB1  F00E         	call	_baroConvertAlt	;wreg free
  2421  00281A  EE20 F006          	lfsr	2,6
  2422  00281E  507B               	movf	updateSensorARData@ptr,w,c
  2423  002820  26D9               	addwf	fsr2l,f,c
  2424  002822  507C               	movf	updateSensorARData@ptr+1,w,c
  2425  002824  22DA               	addwfc	fsr2h,f,c
  2426  002826  C03C  FFDE         	movff	?_baroConvertAlt,postinc2
  2427  00282A  C03D  FFDE         	movff	?_baroConvertAlt+1,postinc2
  2428  00282E  C03E  FFDE         	movff	?_baroConvertAlt+2,postinc2
  2429  002832  C03F  FFDD         	movff	?_baroConvertAlt+3,postdec2
  2430  002836  06D9               	decf	fsr2l,f,c
  2431  002838  06D9               	decf	fsr2l,f,c
  2432                           
  2433                           ;telemetry.c: 310: ptr->roll = accelGetRoll();
  2434  00283A  EC1C  F00E         	call	_accelGetRoll	;wreg free
  2435  00283E  EE20 F00C          	lfsr	2,12
  2436  002842  507B               	movf	updateSensorARData@ptr,w,c
  2437  002844  26D9               	addwf	fsr2l,f,c
  2438  002846  507C               	movf	updateSensorARData@ptr+1,w,c
  2439  002848  22DA               	addwfc	fsr2h,f,c
  2440  00284A  C070  FFDE         	movff	?_accelGetRoll,postinc2
  2441  00284E  C071  FFDD         	movff	?_accelGetRoll+1,postdec2
  2442  002852  0012               	return	
  2443  002854                     __end_of_updateSensorARData:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           postinc0	equ	0xFEE
  2452                           wreg	equ	0xFE8
  2453                           postinc1	equ	0xFE6
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           indf2	equ	0xFDF
  2457                           postinc2	equ	0xFDE
  2458                           postdec2	equ	0xFDD
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _accelGetRoll *****************
  2464 ;; Defined at:
  2465 ;;		line 97 in file "accelmeter.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  accelTemp       3  119[COMRAM] float 
  2470 ;;  accelRaw        2  117[COMRAM] int 
  2471 ;;  rollAngle       2  115[COMRAM] int 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2  111[COMRAM] int 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2481 ;;      Params:         2       0       0       0       0       0       0
  2482 ;;      Locals:         7       0       0       0       0       0       0
  2483 ;;      Temps:          2       0       0       0       0       0       0
  2484 ;;      Totals:        11       0       0       0       0       0       0
  2485 ;;Total ram usage:       11 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    6
  2488 ;; This function calls:
  2489 ;;		_accelGetADC
  2490 ;;		_asin
  2491 ;;		___ftdiv
  2492 ;;		___ftmul
  2493 ;;		___awtoft
  2494 ;;		___ftge
  2495 ;;		___fttol
  2496 ;; This function is called by:
  2497 ;;		_updateSensorARData
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text6
  2502  001C38                     __ptext6:
  2503                           	opt stack 0
  2504  001C38                     _accelGetRoll:
  2505                           	opt stack 23
  2506                           
  2507                           ;accelmeter.c: 98: int accelRaw;
  2508                           ;accelmeter.c: 99: float accelTemp;
  2509                           ;accelmeter.c: 100: int rollAngle;
  2510                           ;accelmeter.c: 102: accelRaw = accelGetADC();
  2511                           
  2512                           ;incstack = 0
  2513                           ;incstack = 0
  2514  001C38  EC3A  F018         	call	_accelGetADC	;wreg free
  2515  001C3C  C00A  F076         	movff	?_accelGetADC,accelGetRoll@accelRaw
  2516  001C40  C00B  F077         	movff	?_accelGetADC+1,accelGetRoll@accelRaw+1
  2517                           
  2518                           ;accelmeter.c: 103: accelRaw = accelZero - accelRaw;
  2519  001C44  C076  F072         	movff	accelGetRoll@accelRaw,??_accelGetRoll
  2520  001C48  C077  F073         	movff	accelGetRoll@accelRaw+1,??_accelGetRoll+1
  2521  001C4C  1E72               	comf	??_accelGetRoll,f,c
  2522  001C4E  1E73               	comf	??_accelGetRoll+1,f,c
  2523  001C50  4A72               	infsnz	??_accelGetRoll,f,c
  2524  001C52  2A73               	incf	??_accelGetRoll+1,f,c
  2525  001C54  0100               	movlb	0	; () banked
  2526  001C56  0100               	movlb	0	; () banked
  2527  001C58  51E9               	movf	_accelZero& (0+255),w,b
  2528  001C5A  2472               	addwf	??_accelGetRoll,w,c
  2529  001C5C  6E76               	movwf	accelGetRoll@accelRaw,c
  2530  001C5E  0100               	movlb	0	; () banked
  2531  001C60  0100               	movlb	0	; () banked
  2532  001C62  51EA               	movf	(_accelZero+1)& (0+255),w,b
  2533  001C64  2073               	addwfc	??_accelGetRoll+1,w,c
  2534  001C66  6E77               	movwf	accelGetRoll@accelRaw+1,c
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;accelmeter.c: 104: accelTemp = ((float)accelRaw) / 173.77;
  2538  001C68  C076  F018         	movff	accelGetRoll@accelRaw,?___awtoft
  2539  001C6C  C077  F019         	movff	accelGetRoll@accelRaw+1,?___awtoft+1
  2540  001C70  EC4F  F01B         	call	___awtoft	;wreg free
  2541  001C74  C01A  F01F         	movff	?___awtoft+2,?___ftdiv+2
  2542  001C78  C019  F01E         	movff	?___awtoft+1,?___ftdiv+1
  2543  001C7C  C018  F01D         	movff	?___awtoft,?___ftdiv
  2544  001C80  0EC5               	movlw	197
  2545  001C82  6E20               	movwf	?___ftdiv+3,c
  2546  001C84  0E2D               	movlw	45
  2547  001C86  6E21               	movwf	?___ftdiv+4,c
  2548  001C88  0E43               	movlw	67
  2549  001C8A  6E22               	movwf	?___ftdiv+5,c
  2550  001C8C  EC7C  F011         	call	___ftdiv	;wreg free
  2551  001C90  C01F  F07A         	movff	?___ftdiv+2,accelGetRoll@accelTemp+2
  2552  001C94  C01E  F079         	movff	?___ftdiv+1,accelGetRoll@accelTemp+1
  2553  001C98  C01D  F078         	movff	?___ftdiv,accelGetRoll@accelTemp
  2554                           
  2555                           ;accelmeter.c: 107: (accelTemp > 1.0) ? 1.0 : accelTemp;
  2556  001C9C  0E00               	movlw	0
  2557  001C9E  6E0C               	movwf	?___ftge,c
  2558  001CA0  0E80               	movlw	128
  2559  001CA2  6E0D               	movwf	?___ftge+1,c
  2560  001CA4  0E3F               	movlw	63
  2561  001CA6  6E0E               	movwf	?___ftge+2,c
  2562  001CA8  C078  F00F         	movff	accelGetRoll@accelTemp,?___ftge+3
  2563  001CAC  C079  F010         	movff	accelGetRoll@accelTemp+1,?___ftge+4
  2564  001CB0  C07A  F011         	movff	accelGetRoll@accelTemp+2,?___ftge+5
  2565  001CB4  ECAF  F016         	call	___ftge	;wreg free
  2566                           
  2567                           ;accelmeter.c: 108: (accelTemp < -1.0) ? -1.0 : accelTemp;
  2568  001CB8  C078  F00C         	movff	accelGetRoll@accelTemp,?___ftge
  2569  001CBC  C079  F00D         	movff	accelGetRoll@accelTemp+1,?___ftge+1
  2570  001CC0  C07A  F00E         	movff	accelGetRoll@accelTemp+2,?___ftge+2
  2571  001CC4  0E00               	movlw	0
  2572  001CC6  6E0F               	movwf	?___ftge+3,c
  2573  001CC8  0E80               	movlw	128
  2574  001CCA  6E10               	movwf	?___ftge+4,c
  2575  001CCC  0EBF               	movlw	191
  2576  001CCE  6E11               	movwf	?___ftge+5,c
  2577  001CD0  ECAF  F016         	call	___ftge	;wreg free
  2578                           
  2579                           ;accelmeter.c: 111: accelTemp = asin(accelTemp);
  2580  001CD4  C078  F05B         	movff	accelGetRoll@accelTemp,?_asin
  2581  001CD8  C079  F05C         	movff	accelGetRoll@accelTemp+1,?_asin+1
  2582  001CDC  C07A  F05D         	movff	accelGetRoll@accelTemp+2,?_asin+2
  2583  001CE0  EC98  F007         	call	_asin	;wreg free
  2584  001CE4  C05D  F07A         	movff	?_asin+2,accelGetRoll@accelTemp+2
  2585  001CE8  C05C  F079         	movff	?_asin+1,accelGetRoll@accelTemp+1
  2586  001CEC  C05B  F078         	movff	?_asin,accelGetRoll@accelTemp
  2587                           
  2588                           ;accelmeter.c: 112: accelTemp = accelTemp * 57.296;
  2589  001CF0  C078  F01D         	movff	accelGetRoll@accelTemp,?___ftmul
  2590  001CF4  C079  F01E         	movff	accelGetRoll@accelTemp+1,?___ftmul+1
  2591  001CF8  C07A  F01F         	movff	accelGetRoll@accelTemp+2,?___ftmul+2
  2592  001CFC  0E2F               	movlw	47
  2593  001CFE  6E20               	movwf	?___ftmul+3,c
  2594  001D00  0E65               	movlw	101
  2595  001D02  6E21               	movwf	?___ftmul+4,c
  2596  001D04  0E42               	movlw	66
  2597  001D06  6E22               	movwf	?___ftmul+5,c
  2598  001D08  ECF4  F010         	call	___ftmul	;wreg free
  2599  001D0C  C01F  F07A         	movff	?___ftmul+2,accelGetRoll@accelTemp+2
  2600  001D10  C01E  F079         	movff	?___ftmul+1,accelGetRoll@accelTemp+1
  2601  001D14  C01D  F078         	movff	?___ftmul,accelGetRoll@accelTemp
  2602                           
  2603                           ;accelmeter.c: 113: accelTemp = accelTemp * 100;
  2604  001D18  C078  F01D         	movff	accelGetRoll@accelTemp,?___ftmul
  2605  001D1C  C079  F01E         	movff	accelGetRoll@accelTemp+1,?___ftmul+1
  2606  001D20  C07A  F01F         	movff	accelGetRoll@accelTemp+2,?___ftmul+2
  2607  001D24  0E00               	movlw	0
  2608  001D26  6E20               	movwf	?___ftmul+3,c
  2609  001D28  0EC8               	movlw	200
  2610  001D2A  6E21               	movwf	?___ftmul+4,c
  2611  001D2C  0E42               	movlw	66
  2612  001D2E  6E22               	movwf	?___ftmul+5,c
  2613  001D30  ECF4  F010         	call	___ftmul	;wreg free
  2614  001D34  C01F  F07A         	movff	?___ftmul+2,accelGetRoll@accelTemp+2
  2615  001D38  C01E  F079         	movff	?___ftmul+1,accelGetRoll@accelTemp+1
  2616  001D3C  C01D  F078         	movff	?___ftmul,accelGetRoll@accelTemp
  2617                           
  2618                           ;accelmeter.c: 114: rollAngle = (int)accelTemp;
  2619  001D40  C078  F009         	movff	accelGetRoll@accelTemp,?___fttol
  2620  001D44  C079  F00A         	movff	accelGetRoll@accelTemp+1,?___fttol+1
  2621  001D48  C07A  F00B         	movff	accelGetRoll@accelTemp+2,?___fttol+2
  2622  001D4C  ECE5  F012         	call	___fttol	;wreg free
  2623  001D50  C009  F074         	movff	?___fttol,accelGetRoll@rollAngle
  2624  001D54  C00A  F075         	movff	?___fttol+1,accelGetRoll@rollAngle+1
  2625                           
  2626                           ;accelmeter.c: 116: return rollAngle;
  2627  001D58  C074  F070         	movff	accelGetRoll@rollAngle,?_accelGetRoll
  2628  001D5C  C075  F071         	movff	accelGetRoll@rollAngle+1,?_accelGetRoll+1
  2629  001D60  0012               	return	
  2630  001D62                     __end_of_accelGetRoll:
  2631                           	opt stack 0
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           intcon	equ	0xFF2
  2637                           intcon2	equ	0xFF1
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postinc1	equ	0xFE6
  2641                           postdec1	equ	0xFE5
  2642                           fsr1l	equ	0xFE1
  2643                           indf2	equ	0xFDF
  2644                           postinc2	equ	0xFDE
  2645                           postdec2	equ	0xFDD
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _asin *****************
  2651 ;; Defined at:
  2652 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\asin.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  x               3   90[COMRAM] int 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  y               3  105[COMRAM] int 
  2657 ;;  sgn             3   93[COMRAM] int 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  3   90[COMRAM] int 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2667 ;;      Params:         3       0       0       0       0       0       0
  2668 ;;      Locals:        18       0       0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0
  2670 ;;      Totals:        21       0       0       0       0       0       0
  2671 ;;Total ram usage:       21 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    5
  2674 ;; This function calls:
  2675 ;;		___ftadd
  2676 ;;		___ftdiv
  2677 ;;		___ftmul
  2678 ;;		_fabs
  2679 ;;		_sqrt
  2680 ;;		_atan
  2681 ;;		___ftge
  2682 ;;		___ftneg
  2683 ;; This function is called by:
  2684 ;;		_accelGetRoll
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text7
  2689  000F30                     __ptext7:
  2690                           	opt stack 0
  2691  000F30                     _asin:
  2692                           	opt stack 23
  2693                           
  2694                           ;incstack = 0
  2695                           ;incstack = 0
  2696  000F30  0E00               	movlw	0
  2697  000F32  6E0C               	movwf	?___ftge,c
  2698  000F34  0E80               	movlw	128
  2699  000F36  6E0D               	movwf	?___ftge+1,c
  2700  000F38  0E3F               	movlw	63
  2701  000F3A  6E0E               	movwf	?___ftge+2,c
  2702  000F3C  C05B  F015         	movff	asin@x,?_fabs
  2703  000F40  C05C  F016         	movff	asin@x+1,?_fabs+1
  2704  000F44  C05D  F017         	movff	asin@x+2,?_fabs+2
  2705  000F48  EC71  F01B         	call	_fabs	;wreg free
  2706  000F4C  C017  F011         	movff	?_fabs+2,?___ftge+5
  2707  000F50  C016  F010         	movff	?_fabs+1,?___ftge+4
  2708  000F54  C015  F00F         	movff	?_fabs,?___ftge+3
  2709  000F58  ECAF  F016         	call	___ftge	;wreg free
  2710  000F5C  B0D8               	btfsc	status,0,c
  2711  000F5E  D00E               	goto	l7728
  2712  000F60  0E00               	movlw	0
  2713  000F62  0100               	movlb	0	; () banked
  2714  000F64  0100               	movlb	0	; () banked
  2715  000F66  6FB3               	movwf	(_errno+1)& (0+255),b
  2716  000F68  0E21               	movlw	33
  2717  000F6A  0100               	movlb	0	; () banked
  2718  000F6C  6FB2               	movwf	_errno& (0+255),b
  2719  000F6E  0E00               	movlw	0
  2720  000F70  6E5B               	movwf	?_asin,c
  2721  000F72  0E00               	movlw	0
  2722  000F74  6E5C               	movwf	?_asin+1,c
  2723  000F76  0E00               	movlw	0
  2724  000F78  6E5D               	movwf	?_asin+2,c
  2725  000F7A  D117               	goto	l1592
  2726  000F7C                     l7728:
  2727  000F7C  0E00               	movlw	0
  2728  000F7E  6E5E               	movwf	asin@sgn,c
  2729  000F80  0E80               	movlw	128
  2730  000F82  6E5F               	movwf	asin@sgn+1,c
  2731  000F84  0E3F               	movlw	63
  2732  000F86  6E60               	movwf	asin@sgn+2,c
  2733  000F88  C05B  F020         	movff	asin@x,?___ftmul+3
  2734  000F8C  C05C  F021         	movff	asin@x+1,?___ftmul+4
  2735  000F90  C05D  F022         	movff	asin@x+2,?___ftmul+5
  2736  000F94  C05B  F01D         	movff	asin@x,?___ftmul
  2737  000F98  C05C  F01E         	movff	asin@x+1,?___ftmul+1
  2738  000F9C  C05D  F01F         	movff	asin@x+2,?___ftmul+2
  2739  000FA0  ECF4  F010         	call	___ftmul	;wreg free
  2740  000FA4  C01F  F00B         	movff	?___ftmul+2,?___ftneg+2
  2741  000FA8  C01E  F00A         	movff	?___ftmul+1,?___ftneg+1
  2742  000FAC  C01D  F009         	movff	?___ftmul,?___ftneg
  2743  000FB0  ECD2  F01C         	call	___ftneg	;wreg free
  2744  000FB4  C00B  F030         	movff	?___ftneg+2,?___ftadd+2
  2745  000FB8  C00A  F02F         	movff	?___ftneg+1,?___ftadd+1
  2746  000FBC  C009  F02E         	movff	?___ftneg,?___ftadd
  2747  000FC0  0E00               	movlw	0
  2748  000FC2  6E31               	movwf	?___ftadd+3,c
  2749  000FC4  0E80               	movlw	128
  2750  000FC6  6E32               	movwf	?___ftadd+4,c
  2751  000FC8  0E3F               	movlw	63
  2752  000FCA  6E33               	movwf	?___ftadd+5,c
  2753  000FCC  EC0B  F00B         	call	___ftadd	;wreg free
  2754  000FD0  C030  F063         	movff	?___ftadd+2,_asin$4852+2
  2755  000FD4  C02F  F062         	movff	?___ftadd+1,_asin$4852+1
  2756  000FD8  C02E  F061         	movff	?___ftadd,_asin$4852
  2757  000FDC  C061  F047         	movff	_asin$4852,?_sqrt
  2758  000FE0  C062  F048         	movff	_asin$4852+1,?_sqrt+1
  2759  000FE4  C063  F049         	movff	_asin$4852+2,?_sqrt+2
  2760  000FE8  ECD1  F00C         	call	_sqrt	;wreg free
  2761  000FEC  C049  F06C         	movff	?_sqrt+2,asin@y+2
  2762  000FF0  C048  F06B         	movff	?_sqrt+1,asin@y+1
  2763  000FF4  C047  F06A         	movff	?_sqrt,asin@y
  2764  000FF8  C05B  F015         	movff	asin@x,?_fabs
  2765  000FFC  C05C  F016         	movff	asin@x+1,?_fabs+1
  2766  001000  C05D  F017         	movff	asin@x+2,?_fabs+2
  2767  001004  EC71  F01B         	call	_fabs	;wreg free
  2768  001008  C017  F00E         	movff	?_fabs+2,?___ftge+2
  2769  00100C  C016  F00D         	movff	?_fabs+1,?___ftge+1
  2770  001010  C015  F00C         	movff	?_fabs,?___ftge
  2771  001014  0EC3               	movlw	195
  2772  001016  6E0F               	movwf	?___ftge+3,c
  2773  001018  0E35               	movlw	53
  2774  00101A  6E10               	movwf	?___ftge+4,c
  2775  00101C  0E3F               	movlw	63
  2776  00101E  6E11               	movwf	?___ftge+5,c
  2777  001020  ECAF  F016         	call	___ftge	;wreg free
  2778  001024  B0D8               	btfsc	status,0,c
  2779  001026  D023               	goto	l7742
  2780  001028  C05B  F01D         	movff	asin@x,?___ftdiv
  2781  00102C  C05C  F01E         	movff	asin@x+1,?___ftdiv+1
  2782  001030  C05D  F01F         	movff	asin@x+2,?___ftdiv+2
  2783  001034  C06A  F020         	movff	asin@y,?___ftdiv+3
  2784  001038  C06B  F021         	movff	asin@y+1,?___ftdiv+4
  2785  00103C  C06C  F022         	movff	asin@y+2,?___ftdiv+5
  2786  001040  EC7C  F011         	call	___ftdiv	;wreg free
  2787  001044  C01F  F06F         	movff	?___ftdiv+2,_asin$4853+2
  2788  001048  C01E  F06E         	movff	?___ftdiv+1,_asin$4853+1
  2789  00104C  C01D  F06D         	movff	?___ftdiv,_asin$4853
  2790  001050  C06D  F04B         	movff	_asin$4853,?_atan
  2791  001054  C06E  F04C         	movff	_asin$4853+1,?_atan+1
  2792  001058  C06F  F04D         	movff	_asin$4853+2,?_atan+2
  2793  00105C  ECF1  F00B         	call	_atan	;wreg free
  2794  001060  C04D  F05D         	movff	?_atan+2,?_asin+2
  2795  001064  C04C  F05C         	movff	?_atan+1,?_asin+1
  2796  001068  C04B  F05B         	movff	?_atan,?_asin
  2797  00106C  D09E               	goto	l1592
  2798  00106E                     l7742:
  2799  00106E  505D               	movf	asin@x+2,w,c
  2800  001070  0A80               	xorlw	128
  2801  001072  0F80               	addlw	128
  2802  001074  E105               	bnz	u7045
  2803  001076  0E00               	movlw	0
  2804  001078  5C5C               	subwf	asin@x+1,w,c
  2805  00107A  E102               	bnz	u7045
  2806  00107C  0E00               	movlw	0
  2807  00107E  5C5B               	subwf	asin@x,w,c
  2808  001080                     u7045:
  2809  001080  B0D8               	btfsc	status,0,c
  2810  001082  D055               	goto	l7754
  2811  001084  C05B  F020         	movff	asin@x,?___ftdiv+3
  2812  001088  C05C  F021         	movff	asin@x+1,?___ftdiv+4
  2813  00108C  C05D  F022         	movff	asin@x+2,?___ftdiv+5
  2814  001090  C06A  F009         	movff	asin@y,?___ftneg
  2815  001094  C06B  F00A         	movff	asin@y+1,?___ftneg+1
  2816  001098  C06C  F00B         	movff	asin@y+2,?___ftneg+2
  2817  00109C  ECD2  F01C         	call	___ftneg	;wreg free
  2818  0010A0  C00B  F01F         	movff	?___ftneg+2,?___ftdiv+2
  2819  0010A4  C00A  F01E         	movff	?___ftneg+1,?___ftdiv+1
  2820  0010A8  C009  F01D         	movff	?___ftneg,?___ftdiv
  2821  0010AC  EC7C  F011         	call	___ftdiv	;wreg free
  2822  0010B0  C01F  F06F         	movff	?___ftdiv+2,_asin$4853+2
  2823  0010B4  C01E  F06E         	movff	?___ftdiv+1,_asin$4853+1
  2824  0010B8  C01D  F06D         	movff	?___ftdiv,_asin$4853
  2825  0010BC  C06D  F04B         	movff	_asin$4853,?_atan
  2826  0010C0  C06E  F04C         	movff	_asin$4853+1,?_atan+1
  2827  0010C4  C06F  F04D         	movff	_asin$4853+2,?_atan+2
  2828  0010C8  ECF1  F00B         	call	_atan	;wreg free
  2829  0010CC  C04D  F069         	movff	?_atan+2,_asin$4854+2
  2830  0010D0  C04C  F068         	movff	?_atan+1,_asin$4854+1
  2831  0010D4  C04B  F067         	movff	?_atan,_asin$4854
  2832  0010D8  0E10               	movlw	16
  2833  0010DA  6E31               	movwf	?___ftadd+3,c
  2834  0010DC  0EC9               	movlw	201
  2835  0010DE  6E32               	movwf	?___ftadd+4,c
  2836  0010E0  0E3F               	movlw	63
  2837  0010E2  6E33               	movwf	?___ftadd+5,c
  2838  0010E4  C067  F009         	movff	_asin$4854,?___ftneg
  2839  0010E8  C068  F00A         	movff	_asin$4854+1,?___ftneg+1
  2840  0010EC  C069  F00B         	movff	_asin$4854+2,?___ftneg+2
  2841  0010F0  ECD2  F01C         	call	___ftneg	;wreg free
  2842  0010F4  C00B  F030         	movff	?___ftneg+2,?___ftadd+2
  2843  0010F8  C00A  F02F         	movff	?___ftneg+1,?___ftadd+1
  2844  0010FC  C009  F02E         	movff	?___ftneg,?___ftadd
  2845  001100  EC0B  F00B         	call	___ftadd	;wreg free
  2846  001104  C030  F066         	movff	?___ftadd+2,_asin$4855+2
  2847  001108  C02F  F065         	movff	?___ftadd+1,_asin$4855+1
  2848  00110C  C02E  F064         	movff	?___ftadd,_asin$4855
  2849  001110  C064  F009         	movff	_asin$4855,?___ftneg
  2850  001114  C065  F00A         	movff	_asin$4855+1,?___ftneg+1
  2851  001118  C066  F00B         	movff	_asin$4855+2,?___ftneg+2
  2852  00111C  ECD2  F01C         	call	___ftneg	;wreg free
  2853  001120  C00B  F05D         	movff	?___ftneg+2,?_asin+2
  2854  001124  C00A  F05C         	movff	?___ftneg+1,?_asin+1
  2855  001128  C009  F05B         	movff	?___ftneg,?_asin
  2856  00112C  D03E               	goto	l1592
  2857  00112E                     l7754:
  2858  00112E  C05B  F020         	movff	asin@x,?___ftdiv+3
  2859  001132  C05C  F021         	movff	asin@x+1,?___ftdiv+4
  2860  001136  C05D  F022         	movff	asin@x+2,?___ftdiv+5
  2861  00113A  C06A  F01D         	movff	asin@y,?___ftdiv
  2862  00113E  C06B  F01E         	movff	asin@y+1,?___ftdiv+1
  2863  001142  C06C  F01F         	movff	asin@y+2,?___ftdiv+2
  2864  001146  EC7C  F011         	call	___ftdiv	;wreg free
  2865  00114A  C01F  F06F         	movff	?___ftdiv+2,_asin$4853+2
  2866  00114E  C01E  F06E         	movff	?___ftdiv+1,_asin$4853+1
  2867  001152  C01D  F06D         	movff	?___ftdiv,_asin$4853
  2868  001156  C06D  F04B         	movff	_asin$4853,?_atan
  2869  00115A  C06E  F04C         	movff	_asin$4853+1,?_atan+1
  2870  00115E  C06F  F04D         	movff	_asin$4853+2,?_atan+2
  2871  001162  ECF1  F00B         	call	_atan	;wreg free
  2872  001166  C04D  F069         	movff	?_atan+2,_asin$4854+2
  2873  00116A  C04C  F068         	movff	?_atan+1,_asin$4854+1
  2874  00116E  C04B  F067         	movff	?_atan,_asin$4854
  2875  001172  C067  F009         	movff	_asin$4854,?___ftneg
  2876  001176  C068  F00A         	movff	_asin$4854+1,?___ftneg+1
  2877  00117A  C069  F00B         	movff	_asin$4854+2,?___ftneg+2
  2878  00117E  ECD2  F01C         	call	___ftneg	;wreg free
  2879  001182  C00B  F030         	movff	?___ftneg+2,?___ftadd+2
  2880  001186  C00A  F02F         	movff	?___ftneg+1,?___ftadd+1
  2881  00118A  C009  F02E         	movff	?___ftneg,?___ftadd
  2882  00118E  0E10               	movlw	16
  2883  001190  6E31               	movwf	?___ftadd+3,c
  2884  001192  0EC9               	movlw	201
  2885  001194  6E32               	movwf	?___ftadd+4,c
  2886  001196  0E3F               	movlw	63
  2887  001198  6E33               	movwf	?___ftadd+5,c
  2888  00119A  EC0B  F00B         	call	___ftadd	;wreg free
  2889  00119E  C030  F05D         	movff	?___ftadd+2,?_asin+2
  2890  0011A2  C02F  F05C         	movff	?___ftadd+1,?_asin+1
  2891  0011A6  C02E  F05B         	movff	?___ftadd,?_asin
  2892  0011AA                     l1592:
  2893  0011AA  0012               	return	
  2894  0011AC                     __end_of_asin:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           intcon	equ	0xFF2
  2901                           intcon2	equ	0xFF1
  2902                           postinc0	equ	0xFEE
  2903                           wreg	equ	0xFE8
  2904                           postinc1	equ	0xFE6
  2905                           postdec1	equ	0xFE5
  2906                           fsr1l	equ	0xFE1
  2907                           indf2	equ	0xFDF
  2908                           postinc2	equ	0xFDE
  2909                           postdec2	equ	0xFDD
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _atan *****************
  2915 ;; Defined at:
  2916 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\atan.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  f               3   74[COMRAM] int 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  val             3   87[COMRAM] int 
  2921 ;;  val_squared     3   84[COMRAM] int 
  2922 ;;  x               3   80[COMRAM] int 
  2923 ;;  y               3   77[COMRAM] int 
  2924 ;;  recip           1   83[COMRAM] unsigned char 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  3   74[COMRAM] unsigned char 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2934 ;;      Params:         3       0       0       0       0       0       0
  2935 ;;      Locals:        13       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0
  2937 ;;      Totals:        16       0       0       0       0       0       0
  2938 ;;Total ram usage:       16 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    3
  2941 ;; This function calls:
  2942 ;;		___ftadd
  2943 ;;		___ftdiv
  2944 ;;		___asftmul
  2945 ;;		___ftmul
  2946 ;;		_fabs
  2947 ;;		_eval_poly
  2948 ;;		___ftge
  2949 ;;		___ftneg
  2950 ;; This function is called by:
  2951 ;;		_asin
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text8
  2956  0017E2                     __ptext8:
  2957                           	opt stack 0
  2958  0017E2                     _atan:
  2959                           	opt stack 24
  2960                           
  2961                           ;incstack = 0
  2962                           ;incstack = 0
  2963  0017E2  C04B  F015         	movff	atan@f,?_fabs
  2964  0017E6  C04C  F016         	movff	atan@f+1,?_fabs+1
  2965  0017EA  C04D  F017         	movff	atan@f+2,?_fabs+2
  2966  0017EE  EC71  F01B         	call	_fabs	;wreg free
  2967  0017F2  C017  F05A         	movff	?_fabs+2,atan@val+2
  2968  0017F6  C016  F059         	movff	?_fabs+1,atan@val+1
  2969  0017FA  C015  F058         	movff	?_fabs,atan@val
  2970  0017FE  0E7F               	movlw	127
  2971  001800  145A               	andwf	(atan@val+2)& (0+255),w,c
  2972  001802  1059               	iorwf	(atan@val+1)& (0+255),w,c
  2973  001804  1058               	iorwf	atan@val& (0+255),w,c
  2974  001806  A4D8               	btfss	status,2,c
  2975  001808  D007               	goto	l7700
  2976  00180A  0E00               	movlw	0
  2977  00180C  6E4B               	movwf	?_atan,c
  2978  00180E  0E00               	movlw	0
  2979  001810  6E4C               	movwf	?_atan+1,c
  2980  001812  0E00               	movlw	0
  2981  001814  6E4D               	movwf	?_atan+2,c
  2982  001816  D0C4               	goto	l1611
  2983  001818                     l7700:
  2984  001818  0E00               	movlw	0
  2985  00181A  6E0C               	movwf	?___ftge,c
  2986  00181C  0E80               	movlw	128
  2987  00181E  6E0D               	movwf	?___ftge+1,c
  2988  001820  0E3F               	movlw	63
  2989  001822  6E0E               	movwf	?___ftge+2,c
  2990  001824  C058  F00F         	movff	atan@val,?___ftge+3
  2991  001828  C059  F010         	movff	atan@val+1,?___ftge+4
  2992  00182C  C05A  F011         	movff	atan@val+2,?___ftge+5
  2993  001830  ECAF  F016         	call	___ftge	;wreg free
  2994  001834  B0D8               	btfsc	status,0,c
  2995  001836  D002               	goto	u6980
  2996  001838  0E01               	movlw	1
  2997  00183A  D001               	goto	u6986
  2998  00183C                     u6980:
  2999  00183C  0E00               	movlw	0
  3000  00183E                     u6986:
  3001  00183E  6E54               	movwf	atan@recip,c
  3002  001840  5054               	movf	atan@recip& (0+255),w,c
  3003  001842  B4D8               	btfsc	status,2,c
  3004  001844  D014               	goto	l1612
  3005  001846  0E00               	movlw	0
  3006  001848  6E1D               	movwf	?___ftdiv,c
  3007  00184A  0E80               	movlw	128
  3008  00184C  6E1E               	movwf	?___ftdiv+1,c
  3009  00184E  0E3F               	movlw	63
  3010  001850  6E1F               	movwf	?___ftdiv+2,c
  3011  001852  C058  F020         	movff	atan@val,?___ftdiv+3
  3012  001856  C059  F021         	movff	atan@val+1,?___ftdiv+4
  3013  00185A  C05A  F022         	movff	atan@val+2,?___ftdiv+5
  3014  00185E  EC7C  F011         	call	___ftdiv	;wreg free
  3015  001862  C01F  F05A         	movff	?___ftdiv+2,atan@val+2
  3016  001866  C01E  F059         	movff	?___ftdiv+1,atan@val+1
  3017  00186A  C01D  F058         	movff	?___ftdiv,atan@val
  3018  00186E                     l1612:
  3019  00186E  C058  F01D         	movff	atan@val,?___ftmul
  3020  001872  C059  F01E         	movff	atan@val+1,?___ftmul+1
  3021  001876  C05A  F01F         	movff	atan@val+2,?___ftmul+2
  3022  00187A  C058  F020         	movff	atan@val,?___ftmul+3
  3023  00187E  C059  F021         	movff	atan@val+1,?___ftmul+4
  3024  001882  C05A  F022         	movff	atan@val+2,?___ftmul+5
  3025  001886  ECF4  F010         	call	___ftmul	;wreg free
  3026  00188A  C01F  F057         	movff	?___ftmul+2,atan@val_squared+2
  3027  00188E  C01E  F056         	movff	?___ftmul+1,atan@val_squared+1
  3028  001892  C01D  F055         	movff	?___ftmul,atan@val_squared
  3029  001896  C055  F03C         	movff	atan@val_squared,?_eval_poly
  3030  00189A  C056  F03D         	movff	atan@val_squared+1,?_eval_poly+1
  3031  00189E  C057  F03E         	movff	atan@val_squared+2,?_eval_poly+2
  3032  0018A2  0E06               	movlw	high atan@coeff_b
  3033  0018A4  6E40               	movwf	?_eval_poly+4,c
  3034  0018A6  0E12               	movlw	low atan@coeff_b
  3035  0018A8  6E3F               	movwf	?_eval_poly+3,c
  3036  0018AA  0E00               	movlw	0
  3037  0018AC  6E42               	movwf	?_eval_poly+6,c
  3038  0018AE  0E04               	movlw	4
  3039  0018B0  6E41               	movwf	?_eval_poly+5,c
  3040  0018B2  EC74  F012         	call	_eval_poly	;wreg free
  3041  0018B6  C03E  F050         	movff	?_eval_poly+2,atan@y+2
  3042  0018BA  C03D  F04F         	movff	?_eval_poly+1,atan@y+1
  3043  0018BE  C03C  F04E         	movff	?_eval_poly,atan@y
  3044  0018C2  C055  F03C         	movff	atan@val_squared,?_eval_poly
  3045  0018C6  C056  F03D         	movff	atan@val_squared+1,?_eval_poly+1
  3046  0018CA  C057  F03E         	movff	atan@val_squared+2,?_eval_poly+2
  3047  0018CE  0E06               	movlw	high atan@coeff_a
  3048  0018D0  6E40               	movwf	?_eval_poly+4,c
  3049  0018D2  0E00               	movlw	low atan@coeff_a
  3050  0018D4  6E3F               	movwf	?_eval_poly+3,c
  3051  0018D6  0E00               	movlw	0
  3052  0018D8  6E42               	movwf	?_eval_poly+6,c
  3053  0018DA  0E05               	movlw	5
  3054  0018DC  6E41               	movwf	?_eval_poly+5,c
  3055  0018DE  EC74  F012         	call	_eval_poly	;wreg free
  3056  0018E2  C03E  F053         	movff	?_eval_poly+2,atan@x+2
  3057  0018E6  C03D  F052         	movff	?_eval_poly+1,atan@x+1
  3058  0018EA  C03C  F051         	movff	?_eval_poly,atan@x
  3059  0018EE  0E00               	movlw	high atan@val
  3060  0018F0  6E2F               	movwf	?___asftmul+1,c
  3061  0018F2  0E58               	movlw	low atan@val
  3062  0018F4  6E2E               	movwf	?___asftmul,c
  3063  0018F6  C04E  F020         	movff	atan@y,?___ftdiv+3
  3064  0018FA  C04F  F021         	movff	atan@y+1,?___ftdiv+4
  3065  0018FE  C050  F022         	movff	atan@y+2,?___ftdiv+5
  3066  001902  C051  F01D         	movff	atan@x,?___ftdiv
  3067  001906  C052  F01E         	movff	atan@x+1,?___ftdiv+1
  3068  00190A  C053  F01F         	movff	atan@x+2,?___ftdiv+2
  3069  00190E  EC7C  F011         	call	___ftdiv	;wreg free
  3070  001912  C01F  F032         	movff	?___ftdiv+2,?___asftmul+4
  3071  001916  C01E  F031         	movff	?___ftdiv+1,?___asftmul+3
  3072  00191A  C01D  F030         	movff	?___ftdiv,?___asftmul+2
  3073  00191E  ECF2  F01B         	call	___asftmul	;wreg free
  3074  001922  5054               	movf	atan@recip,w,c
  3075  001924  B4D8               	btfsc	status,2,c
  3076  001926  D01C               	goto	l7714
  3077  001928  C058  F009         	movff	atan@val,?___ftneg
  3078  00192C  C059  F00A         	movff	atan@val+1,?___ftneg+1
  3079  001930  C05A  F00B         	movff	atan@val+2,?___ftneg+2
  3080  001934  ECD2  F01C         	call	___ftneg	;wreg free
  3081  001938  C00B  F030         	movff	?___ftneg+2,?___ftadd+2
  3082  00193C  C00A  F02F         	movff	?___ftneg+1,?___ftadd+1
  3083  001940  C009  F02E         	movff	?___ftneg,?___ftadd
  3084  001944  0E10               	movlw	16
  3085  001946  6E31               	movwf	?___ftadd+3,c
  3086  001948  0EC9               	movlw	201
  3087  00194A  6E32               	movwf	?___ftadd+4,c
  3088  00194C  0E3F               	movlw	63
  3089  00194E  6E33               	movwf	?___ftadd+5,c
  3090  001950  EC0B  F00B         	call	___ftadd	;wreg free
  3091  001954  C030  F05A         	movff	?___ftadd+2,atan@val+2
  3092  001958  C02F  F059         	movff	?___ftadd+1,atan@val+1
  3093  00195C  C02E  F058         	movff	?___ftadd,atan@val
  3094  001960                     l7714:
  3095  001960  504D               	movf	atan@f+2,w,c
  3096  001962  0A80               	xorlw	128
  3097  001964  0F80               	addlw	128
  3098  001966  E105               	bnz	u7015
  3099  001968  0E00               	movlw	0
  3100  00196A  5C4C               	subwf	atan@f+1,w,c
  3101  00196C  E102               	bnz	u7015
  3102  00196E  0E00               	movlw	0
  3103  001970  5C4B               	subwf	atan@f,w,c
  3104  001972                     u7015:
  3105  001972  A0D8               	btfss	status,0,c
  3106  001974  D007               	goto	l7718
  3107  001976  C058  F04B         	movff	atan@val,?_atan
  3108  00197A  C059  F04C         	movff	atan@val+1,?_atan+1
  3109  00197E  C05A  F04D         	movff	atan@val+2,?_atan+2
  3110  001982  D00E               	goto	l1611
  3111  001984                     l7718:
  3112  001984  C058  F009         	movff	atan@val,?___ftneg
  3113  001988  C059  F00A         	movff	atan@val+1,?___ftneg+1
  3114  00198C  C05A  F00B         	movff	atan@val+2,?___ftneg+2
  3115  001990  ECD2  F01C         	call	___ftneg	;wreg free
  3116  001994  C00B  F04D         	movff	?___ftneg+2,?_atan+2
  3117  001998  C00A  F04C         	movff	?___ftneg+1,?_atan+1
  3118  00199C  C009  F04B         	movff	?___ftneg,?_atan
  3119  0019A0                     l1611:
  3120  0019A0  0012               	return	
  3121  0019A2                     __end_of_atan:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           intcon	equ	0xFF2
  3128                           intcon2	equ	0xFF1
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           postinc1	equ	0xFE6
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _eval_poly *****************
  3142 ;; Defined at:
  3143 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\evalpoly.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  x               3   59[COMRAM] unsigned char 
  3146 ;;  d               2   62[COMRAM] PTR const 
  3147 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
  3148 ;;  n               2   64[COMRAM] int 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  res             3   71[COMRAM] int 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  3   59[COMRAM] int 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3160 ;;      Params:         7       0       0       0       0       0       0
  3161 ;;      Locals:         3       0       0       0       0       0       0
  3162 ;;      Temps:          5       0       0       0       0       0       0
  3163 ;;      Totals:        15       0       0       0       0       0       0
  3164 ;;Total ram usage:       15 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    2
  3167 ;; This function calls:
  3168 ;;		___ftadd
  3169 ;;		___ftmul
  3170 ;;		___wmul
  3171 ;; This function is called by:
  3172 ;;		_atan
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text9
  3177  0024E8                     __ptext9:
  3178                           	opt stack 0
  3179  0024E8                     _eval_poly:
  3180                           	opt stack 24
  3181                           
  3182                           ;incstack = 0
  3183                           ;incstack = 0
  3184  0024E8  C041  F001         	movff	eval_poly@n,?___wmul
  3185  0024EC  C042  F002         	movff	eval_poly@n+1,?___wmul+1
  3186  0024F0  0E00               	movlw	0
  3187  0024F2  6E04               	movwf	?___wmul+3,c
  3188  0024F4  0E03               	movlw	3
  3189  0024F6  6E03               	movwf	?___wmul+2,c
  3190  0024F8  EC10  F01C         	call	___wmul	;wreg free
  3191  0024FC  5001               	movf	?___wmul,w,c
  3192  0024FE  243F               	addwf	eval_poly@d,w,c
  3193  002500  6E43               	movwf	??_eval_poly& (0+255),c
  3194  002502  5002               	movf	?___wmul+1,w,c
  3195  002504  2040               	addwfc	eval_poly@d+1,w,c
  3196  002506  6E44               	movwf	(??_eval_poly+1)& (0+255),c
  3197  002508  C043  FFF6         	movff	??_eval_poly,tblptrl
  3198  00250C  C044  FFF7         	movff	??_eval_poly+1,tblptrh
  3199  002510  0009               	tblrd		*+
  3200  002512  CFF5 F045          	movff	tablat,??_eval_poly+2
  3201  002516  0009               	tblrd		*+
  3202  002518  CFF5 F046          	movff	tablat,??_eval_poly+3
  3203  00251C  0009               	tblrd		*+
  3204  00251E  CFF5 F047          	movff	tablat,??_eval_poly+4
  3205  002522  C047  F04A         	movff	??_eval_poly+4,eval_poly@res+2
  3206  002526  C046  F049         	movff	??_eval_poly+3,eval_poly@res+1
  3207  00252A  C045  F048         	movff	??_eval_poly+2,eval_poly@res
  3208  00252E  D042               	goto	l7372
  3209  002530                     l7370:
  3210  002530  C048  F020         	movff	eval_poly@res,?___ftmul+3
  3211  002534  C049  F021         	movff	eval_poly@res+1,?___ftmul+4
  3212  002538  C04A  F022         	movff	eval_poly@res+2,?___ftmul+5
  3213  00253C  C03C  F01D         	movff	eval_poly@x,?___ftmul
  3214  002540  C03D  F01E         	movff	eval_poly@x+1,?___ftmul+1
  3215  002544  C03E  F01F         	movff	eval_poly@x+2,?___ftmul+2
  3216  002548  ECF4  F010         	call	___ftmul	;wreg free
  3217  00254C  C01F  F030         	movff	?___ftmul+2,?___ftadd+2
  3218  002550  C01E  F02F         	movff	?___ftmul+1,?___ftadd+1
  3219  002554  C01D  F02E         	movff	?___ftmul,?___ftadd
  3220  002558  0E00               	movlw	0
  3221  00255A  6E04               	movwf	?___wmul+3,c
  3222  00255C  0E03               	movlw	3
  3223  00255E  6E03               	movwf	?___wmul+2,c
  3224  002560  0641               	decf	eval_poly@n,f,c
  3225  002562  A0D8               	btfss	status,0,c
  3226  002564  0642               	decf	eval_poly@n+1,f,c
  3227  002566  C041  F001         	movff	eval_poly@n,?___wmul
  3228  00256A  C042  F002         	movff	eval_poly@n+1,?___wmul+1
  3229  00256E  EC10  F01C         	call	___wmul	;wreg free
  3230  002572  5001               	movf	?___wmul,w,c
  3231  002574  243F               	addwf	eval_poly@d,w,c
  3232  002576  6E43               	movwf	??_eval_poly& (0+255),c
  3233  002578  5002               	movf	?___wmul+1,w,c
  3234  00257A  2040               	addwfc	eval_poly@d+1,w,c
  3235  00257C  6E44               	movwf	(??_eval_poly+1)& (0+255),c
  3236  00257E  C043  FFF6         	movff	??_eval_poly,tblptrl
  3237  002582  C044  FFF7         	movff	??_eval_poly+1,tblptrh
  3238  002586  0009               	tblrd		*+
  3239  002588  CFF5 F045          	movff	tablat,??_eval_poly+2
  3240  00258C  0009               	tblrd		*+
  3241  00258E  CFF5 F046          	movff	tablat,??_eval_poly+3
  3242  002592  0009               	tblrd		*+
  3243  002594  CFF5 F047          	movff	tablat,??_eval_poly+4
  3244  002598  C047  F033         	movff	??_eval_poly+4,?___ftadd+5
  3245  00259C  C046  F032         	movff	??_eval_poly+3,?___ftadd+4
  3246  0025A0  C045  F031         	movff	??_eval_poly+2,?___ftadd+3
  3247  0025A4  EC0B  F00B         	call	___ftadd	;wreg free
  3248  0025A8  C030  F04A         	movff	?___ftadd+2,eval_poly@res+2
  3249  0025AC  C02F  F049         	movff	?___ftadd+1,eval_poly@res+1
  3250  0025B0  C02E  F048         	movff	?___ftadd,eval_poly@res
  3251  0025B4                     l7372:
  3252  0025B4  5042               	movf	eval_poly@n+1,w,c
  3253  0025B6  1041               	iorwf	eval_poly@n,w,c
  3254  0025B8  A4D8               	btfss	status,2,c
  3255  0025BA  D7BA               	goto	l7370
  3256  0025BC  C048  F03C         	movff	eval_poly@res,?_eval_poly
  3257  0025C0  C049  F03D         	movff	eval_poly@res+1,?_eval_poly+1
  3258  0025C4  C04A  F03E         	movff	eval_poly@res+2,?_eval_poly+2
  3259  0025C8  0012               	return	
  3260  0025CA                     __end_of_eval_poly:
  3261                           	opt stack 0
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           intcon	equ	0xFF2
  3267                           intcon2	equ	0xFF1
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           postinc1	equ	0xFE6
  3271                           postdec1	equ	0xFE5
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _fabs *****************
  3281 ;; Defined at:
  3282 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\fabs.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  d               3   20[COMRAM] int 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  3   20[COMRAM] int 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2, status,0, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3296 ;;      Params:         3       0       0       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0
  3299 ;;      Totals:         3       0       0       0       0       0       0
  3300 ;;Total ram usage:        3 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    1
  3303 ;; This function calls:
  3304 ;;		___ftneg
  3305 ;; This function is called by:
  3306 ;;		_asin
  3307 ;;		_atan
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text10
  3312  0036E2                     __ptext10:
  3313                           	opt stack 0
  3314  0036E2                     _fabs:
  3315                           	opt stack 25
  3316                           
  3317                           ;incstack = 0
  3318                           ;incstack = 0
  3319  0036E2  5017               	movf	fabs@d+2,w,c
  3320  0036E4  0A80               	xorlw	128
  3321  0036E6  0F80               	addlw	128
  3322  0036E8  E105               	bnz	u6675
  3323  0036EA  0E00               	movlw	0
  3324  0036EC  5C16               	subwf	fabs@d+1,w,c
  3325  0036EE  E102               	bnz	u6675
  3326  0036F0  0E00               	movlw	0
  3327  0036F2  5C15               	subwf	fabs@d,w,c
  3328  0036F4                     u6675:
  3329  0036F4  B0D8               	btfsc	status,0,c
  3330  0036F6  D00F               	goto	l1741
  3331  0036F8  C015  F009         	movff	fabs@d,?___ftneg
  3332  0036FC  C016  F00A         	movff	fabs@d+1,?___ftneg+1
  3333  003700  C017  F00B         	movff	fabs@d+2,?___ftneg+2
  3334  003704  ECD2  F01C         	call	___ftneg	;wreg free
  3335  003708  C00B  F017         	movff	?___ftneg+2,?_fabs+2
  3336  00370C  C00A  F016         	movff	?___ftneg+1,?_fabs+1
  3337  003710  C009  F015         	movff	?___ftneg,?_fabs
  3338  003714  D006               	goto	l1742
  3339  003716                     l1741:
  3340  003716  C015  F015         	movff	fabs@d,?_fabs
  3341  00371A  C016  F016         	movff	fabs@d+1,?_fabs+1
  3342  00371E  C017  F017         	movff	fabs@d+2,?_fabs+2
  3343  003722                     l1742:
  3344  003722  0012               	return	
  3345  003724                     __end_of_fabs:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postinc1	equ	0xFE6
  3356                           postdec1	equ	0xFE5
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function ___ftneg *****************
  3366 ;; Defined at:
  3367 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftneg.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  f1              3    8[COMRAM] float 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  3    8[COMRAM] float 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3381 ;;      Params:         3       0       0       0       0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0
  3384 ;;      Totals:         3       0       0       0       0       0       0
  3385 ;;Total ram usage:        3 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_asin
  3391 ;;		_atan
  3392 ;;		_fabs
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text11
  3397  0039A4                     __ptext11:
  3398                           	opt stack 0
  3399  0039A4                     ___ftneg:
  3400                           	opt stack 27
  3401                           
  3402                           ;incstack = 0
  3403                           ;incstack = 0
  3404  0039A4  0E7F               	movlw	127
  3405  0039A6  140B               	andwf	___ftneg@f1+2,w,c
  3406  0039A8  100A               	iorwf	___ftneg@f1+1,w,c
  3407  0039AA  1009               	iorwf	___ftneg@f1,w,c
  3408  0039AC  B4D8               	btfsc	status,2,c
  3409  0039AE  D006               	goto	l1907
  3410  0039B0  0E00               	movlw	0
  3411  0039B2  1A09               	xorwf	___ftneg@f1,f,c
  3412  0039B4  0E00               	movlw	0
  3413  0039B6  1A0A               	xorwf	___ftneg@f1+1,f,c
  3414  0039B8  0E80               	movlw	128
  3415  0039BA  1A0B               	xorwf	___ftneg@f1+2,f,c
  3416  0039BC                     l1907:
  3417  0039BC  C009  F009         	movff	___ftneg@f1,?___ftneg
  3418  0039C0  C00A  F00A         	movff	___ftneg@f1+1,?___ftneg+1
  3419  0039C4  C00B  F00B         	movff	___ftneg@f1+2,?___ftneg+2
  3420  0039C8  0012               	return	
  3421  0039CA                     __end_of___ftneg:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           postinc1	equ	0xFE6
  3432                           postdec1	equ	0xFE5
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           postdec2	equ	0xFDD
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _sqrt *****************
  3442 ;; Defined at:
  3443 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\sqrt.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  y               3   70[COMRAM] float 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  x               3   86[COMRAM] float 
  3448 ;;  q               3   83[COMRAM] float 
  3449 ;;  z               3   79[COMRAM] float 
  3450 ;;  og              3   76[COMRAM] float 
  3451 ;;  i               1   82[COMRAM] unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  3   70[COMRAM] unsigned char 
  3454 ;; Registers used:
  3455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3461 ;;      Params:         3       0       0       0       0       0       0
  3462 ;;      Locals:        13       0       0       0       0       0       0
  3463 ;;      Temps:          3       0       0       0       0       0       0
  3464 ;;      Totals:        19       0       0       0       0       0       0
  3465 ;;Total ram usage:       19 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    4
  3468 ;; This function calls:
  3469 ;;		___asftmul
  3470 ;;		___ftmul
  3471 ;;		___asftsub
  3472 ;;		___ftge
  3473 ;; This function is called by:
  3474 ;;		_asin
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text12
  3479  0019A2                     __ptext12:
  3480                           	opt stack 0
  3481  0019A2                     _sqrt:
  3482                           	opt stack 23
  3483                           
  3484                           ;incstack = 0
  3485                           ;incstack = 0
  3486  0019A2  0E00               	movlw	0
  3487  0019A4  6E0C               	movwf	?___ftge,c
  3488  0019A6  0E00               	movlw	0
  3489  0019A8  6E0D               	movwf	?___ftge+1,c
  3490  0019AA  0E00               	movlw	0
  3491  0019AC  6E0E               	movwf	?___ftge+2,c
  3492  0019AE  C047  F00F         	movff	sqrt@y,?___ftge+3
  3493  0019B2  C048  F010         	movff	sqrt@y+1,?___ftge+4
  3494  0019B6  C049  F011         	movff	sqrt@y+2,?___ftge+5
  3495  0019BA  ECAF  F016         	call	___ftge	;wreg free
  3496  0019BE  A0D8               	btfss	status,0,c
  3497  0019C0  D019               	goto	l2057
  3498  0019C2  5049               	movf	sqrt@y+2,w,c
  3499  0019C4  0A80               	xorlw	128
  3500  0019C6  0F80               	addlw	128
  3501  0019C8  E105               	bnz	u6965
  3502  0019CA  0E00               	movlw	0
  3503  0019CC  5C48               	subwf	sqrt@y+1,w,c
  3504  0019CE  E102               	bnz	u6965
  3505  0019D0  0E00               	movlw	0
  3506  0019D2  5C47               	subwf	sqrt@y,w,c
  3507  0019D4                     u6965:
  3508  0019D4  B0D8               	btfsc	status,0,c
  3509  0019D6  D007               	goto	l2058
  3510  0019D8  0E00               	movlw	0
  3511  0019DA  0100               	movlb	0	; () banked
  3512  0019DC  0100               	movlb	0	; () banked
  3513  0019DE  6FB3               	movwf	(_errno+1)& (0+255),b
  3514  0019E0  0E21               	movlw	33
  3515  0019E2  0100               	movlb	0	; () banked
  3516  0019E4  6FB2               	movwf	_errno& (0+255),b
  3517  0019E6                     l2058:
  3518  0019E6  0E00               	movlw	0
  3519  0019E8  6E47               	movwf	?_sqrt,c
  3520  0019EA  0E00               	movlw	0
  3521  0019EC  6E48               	movwf	?_sqrt+1,c
  3522  0019EE  0E00               	movlw	0
  3523  0019F0  6E49               	movwf	?_sqrt+2,c
  3524  0019F2  D08A               	goto	l2059
  3525  0019F4                     l2057:
  3526  0019F4  C047  F050         	movff	sqrt@y,sqrt@z
  3527  0019F8  C048  F051         	movff	sqrt@y+1,sqrt@z+1
  3528  0019FC  C049  F052         	movff	sqrt@y+2,sqrt@z+2
  3529  001A00  C047  F04A         	movff	sqrt@y,??_sqrt
  3530  001A04  C048  F04B         	movff	sqrt@y+1,??_sqrt+1
  3531  001A08  C049  F04C         	movff	sqrt@y+2,??_sqrt+2
  3532  001A0C  1E4A               	comf	??_sqrt,f,c
  3533  001A0E  1E4B               	comf	??_sqrt+1,f,c
  3534  001A10  1E4C               	comf	??_sqrt+2,f,c
  3535  001A12  2A4A               	incf	??_sqrt,f,c
  3536  001A14  0E00               	movlw	0
  3537  001A16  224B               	addwfc	??_sqrt+1,f,c
  3538  001A18  224C               	addwfc	??_sqrt+2,f,c
  3539  001A1A  0EC8               	movlw	200
  3540  001A1C  244A               	addwf	??_sqrt,w,c
  3541  001A1E  6E57               	movwf	sqrt@x,c
  3542  001A20  0E6E               	movlw	110
  3543  001A22  204B               	addwfc	??_sqrt+1,w,c
  3544  001A24  6E58               	movwf	sqrt@x+1,c
  3545  001A26  0EBE               	movlw	190
  3546  001A28  204C               	addwfc	??_sqrt+2,w,c
  3547  001A2A  6E59               	movwf	sqrt@x+2,c
  3548  001A2C  90D8               	bcf	status,0,c
  3549  001A2E  3259               	rrcf	sqrt@x+2,f,c
  3550  001A30  3258               	rrcf	sqrt@x+1,f,c
  3551  001A32  3257               	rrcf	sqrt@x,f,c
  3552  001A34  0E00               	movlw	0
  3553  001A36  5E50               	subwf	sqrt@z,f,c
  3554  001A38  0E80               	movlw	128
  3555  001A3A  5A51               	subwfb	sqrt@z+1,f,c
  3556  001A3C  0E00               	movlw	0
  3557  001A3E  5A52               	subwfb	sqrt@z+2,f,c
  3558  001A40  6E4A               	movwf	??_sqrt& (0+255),c
  3559  001A42  0E04               	movlw	4
  3560  001A44  6E53               	movwf	sqrt@i,c
  3561  001A46  504A               	movf	??_sqrt& (0+255),w,c
  3562  001A48                     l7676:
  3563  001A48  C057  F04D         	movff	sqrt@x,sqrt@og
  3564  001A4C  C058  F04E         	movff	sqrt@x+1,sqrt@og+1
  3565  001A50  C059  F04F         	movff	sqrt@x+2,sqrt@og+2
  3566  001A54  C057  F01D         	movff	sqrt@x,?___ftmul
  3567  001A58  C058  F01E         	movff	sqrt@x+1,?___ftmul+1
  3568  001A5C  C059  F01F         	movff	sqrt@x+2,?___ftmul+2
  3569  001A60  C050  F020         	movff	sqrt@z,?___ftmul+3
  3570  001A64  C051  F021         	movff	sqrt@z+1,?___ftmul+4
  3571  001A68  C052  F022         	movff	sqrt@z+2,?___ftmul+5
  3572  001A6C  ECF4  F010         	call	___ftmul	;wreg free
  3573  001A70  C01F  F056         	movff	?___ftmul+2,sqrt@q+2
  3574  001A74  C01E  F055         	movff	?___ftmul+1,sqrt@q+1
  3575  001A78  C01D  F054         	movff	?___ftmul,sqrt@q
  3576  001A7C  0E00               	movlw	high sqrt@q
  3577  001A7E  6E2F               	movwf	?___asftmul+1,c
  3578  001A80  0E54               	movlw	low sqrt@q
  3579  001A82  6E2E               	movwf	?___asftmul,c
  3580  001A84  C057  F030         	movff	sqrt@x,?___asftmul+2
  3581  001A88  C058  F031         	movff	sqrt@x+1,?___asftmul+3
  3582  001A8C  C059  F032         	movff	sqrt@x+2,?___asftmul+4
  3583  001A90  ECF2  F01B         	call	___asftmul	;wreg free
  3584  001A94  0E00               	movlw	high sqrt@q
  3585  001A96  6E2F               	movwf	?___asftmul+1,c
  3586  001A98  0E54               	movlw	low sqrt@q
  3587  001A9A  6E2E               	movwf	?___asftmul,c
  3588  001A9C  C057  F030         	movff	sqrt@x,?___asftmul+2
  3589  001AA0  C058  F031         	movff	sqrt@x+1,?___asftmul+3
  3590  001AA4  C059  F032         	movff	sqrt@x+2,?___asftmul+4
  3591  001AA8  ECF2  F01B         	call	___asftmul	;wreg free
  3592  001AAC  0E00               	movlw	high sqrt@x
  3593  001AAE  6E2F               	movwf	?___asftmul+1,c
  3594  001AB0  0E57               	movlw	low sqrt@x
  3595  001AB2  6E2E               	movwf	?___asftmul,c
  3596  001AB4  0E00               	movlw	0
  3597  001AB6  6E30               	movwf	?___asftmul+2,c
  3598  001AB8  0EC0               	movlw	192
  3599  001ABA  6E31               	movwf	?___asftmul+3,c
  3600  001ABC  0E3F               	movlw	63
  3601  001ABE  6E32               	movwf	?___asftmul+4,c
  3602  001AC0  ECF2  F01B         	call	___asftmul	;wreg free
  3603  001AC4  0E00               	movlw	high sqrt@x
  3604  001AC6  6E43               	movwf	?___asftsub+1,c
  3605  001AC8  0E57               	movlw	low sqrt@x
  3606  001ACA  6E42               	movwf	?___asftsub,c
  3607  001ACC  C054  F044         	movff	sqrt@q,?___asftsub+2
  3608  001AD0  C055  F045         	movff	sqrt@q+1,?___asftsub+3
  3609  001AD4  C056  F046         	movff	sqrt@q+2,?___asftsub+4
  3610  001AD8  ECD4  F01B         	call	___asftsub	;wreg free
  3611  001ADC  2E53               	decfsz	sqrt@i,f,c
  3612  001ADE  D7B4               	goto	l7676
  3613  001AE0  C057  F01D         	movff	sqrt@x,?___ftmul
  3614  001AE4  C058  F01E         	movff	sqrt@x+1,?___ftmul+1
  3615  001AE8  C059  F01F         	movff	sqrt@x+2,?___ftmul+2
  3616  001AEC  C047  F020         	movff	sqrt@y,?___ftmul+3
  3617  001AF0  C048  F021         	movff	sqrt@y+1,?___ftmul+4
  3618  001AF4  C049  F022         	movff	sqrt@y+2,?___ftmul+5
  3619  001AF8  ECF4  F010         	call	___ftmul	;wreg free
  3620  001AFC  C01F  F049         	movff	?___ftmul+2,?_sqrt+2
  3621  001B00  C01E  F048         	movff	?___ftmul+1,?_sqrt+1
  3622  001B04  C01D  F047         	movff	?___ftmul,?_sqrt
  3623  001B08                     l2059:
  3624  001B08  0012               	return	
  3625  001B0A                     __end_of_sqrt:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           intcon	equ	0xFF2
  3632                           intcon2	equ	0xFF1
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           postinc1	equ	0xFE6
  3636                           postdec1	equ	0xFE5
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           postdec2	equ	0xFDD
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function ___asftsub *****************
  3646 ;; Defined at:
  3647 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\asftsub.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  f1p             2   65[COMRAM] PTR float 
  3650 ;;		 -> sqrt@x(3), 
  3651 ;;  f2              3   67[COMRAM] float 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  3   65[COMRAM] float 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         5       0       0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0
  3666 ;;      Totals:         5       0       0       0       0       0       0
  3667 ;;Total ram usage:        5 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    3
  3670 ;; This function calls:
  3671 ;;		___ftsub
  3672 ;; This function is called by:
  3673 ;;		_sqrt
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text13
  3678  0037A8                     __ptext13:
  3679                           	opt stack 0
  3680  0037A8                     ___asftsub:
  3681                           	opt stack 23
  3682                           
  3683                           ;	Return value of ___asftsub is never used
  3684                           
  3685                           ;incstack = 0
  3686                           ;incstack = 0
  3687  0037A8  C042  FFD9         	movff	___asftsub@f1p,fsr2l
  3688  0037AC  C043  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3689  0037B0  CFDE F03C          	movff	postinc2,?___ftsub
  3690  0037B4  CFDE F03D          	movff	postinc2,?___ftsub+1
  3691  0037B8  CFDD F03E          	movff	postdec2,?___ftsub+2
  3692  0037BC  C044  F03F         	movff	___asftsub@f2,?___ftsub+3
  3693  0037C0  C045  F040         	movff	___asftsub@f2+1,?___ftsub+4
  3694  0037C4  C046  F041         	movff	___asftsub@f2+2,?___ftsub+5
  3695  0037C8  EC48  F01C         	call	___ftsub	;wreg free
  3696  0037CC  C042  FFD9         	movff	___asftsub@f1p,fsr2l
  3697  0037D0  C043  FFDA         	movff	___asftsub@f1p+1,fsr2h
  3698  0037D4  C03C  FFDE         	movff	?___ftsub,postinc2
  3699  0037D8  C03D  FFDE         	movff	?___ftsub+1,postinc2
  3700  0037DC  C03E  FFDD         	movff	?___ftsub+2,postdec2
  3701  0037E0  52DD               	movf	postdec2,f,c
  3702  0037E2  0012               	return	
  3703  0037E4                     __end_of___asftsub:
  3704                           	opt stack 0
  3705                           tblptru	equ	0xFF8
  3706                           tblptrh	equ	0xFF7
  3707                           tblptrl	equ	0xFF6
  3708                           tablat	equ	0xFF5
  3709                           intcon	equ	0xFF2
  3710                           intcon2	equ	0xFF1
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postinc1	equ	0xFE6
  3714                           postdec1	equ	0xFE5
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function ___ftsub *****************
  3724 ;; Defined at:
  3725 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftsub.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  f1              3   59[COMRAM] float 
  3728 ;;  f2              3   62[COMRAM] float 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  3   59[COMRAM] float 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3740 ;;      Params:         6       0       0       0       0       0       0
  3741 ;;      Locals:         0       0       0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0
  3743 ;;      Totals:         6       0       0       0       0       0       0
  3744 ;;Total ram usage:        6 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    2
  3747 ;; This function calls:
  3748 ;;		___ftadd
  3749 ;; This function is called by:
  3750 ;;		___asftsub
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text14
  3755  003890                     __ptext14:
  3756                           	opt stack 0
  3757  003890                     ___ftsub:
  3758                           	opt stack 23
  3759                           
  3760                           ;incstack = 0
  3761                           ;incstack = 0
  3762  003890  0E00               	movlw	0
  3763  003892  1A3F               	xorwf	___ftsub@f2,f,c
  3764  003894  0E00               	movlw	0
  3765  003896  1A40               	xorwf	___ftsub@f2+1,f,c
  3766  003898  0E80               	movlw	128
  3767  00389A  1A41               	xorwf	___ftsub@f2+2,f,c
  3768  00389C  C03C  F02E         	movff	___ftsub@f1,?___ftadd
  3769  0038A0  C03D  F02F         	movff	___ftsub@f1+1,?___ftadd+1
  3770  0038A4  C03E  F030         	movff	___ftsub@f1+2,?___ftadd+2
  3771  0038A8  C03F  F031         	movff	___ftsub@f2,?___ftadd+3
  3772  0038AC  C040  F032         	movff	___ftsub@f2+1,?___ftadd+4
  3773  0038B0  C041  F033         	movff	___ftsub@f2+2,?___ftadd+5
  3774  0038B4  EC0B  F00B         	call	___ftadd	;wreg free
  3775  0038B8  C030  F03E         	movff	?___ftadd+2,?___ftsub+2
  3776  0038BC  C02F  F03D         	movff	?___ftadd+1,?___ftsub+1
  3777  0038C0  C02E  F03C         	movff	?___ftadd,?___ftsub
  3778  0038C4  0012               	return	
  3779  0038C6                     __end_of___ftsub:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           intcon	equ	0xFF2
  3786                           intcon2	equ	0xFF1
  3787                           postinc0	equ	0xFEE
  3788                           wreg	equ	0xFE8
  3789                           postinc1	equ	0xFE6
  3790                           postdec1	equ	0xFE5
  3791                           fsr1l	equ	0xFE1
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function ___asftmul *****************
  3800 ;; Defined at:
  3801 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\asftmul.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  f1p             2   45[COMRAM] PTR float 
  3804 ;;		 -> sqrt@q(3), sqrt@x(3), atan@val(3), 
  3805 ;;  f2              3   47[COMRAM] float 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  3   45[COMRAM] float 
  3810 ;; Registers used:
  3811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3817 ;;      Params:         5       0       0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0
  3820 ;;      Totals:         5       0       0       0       0       0       0
  3821 ;;Total ram usage:        5 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    2
  3824 ;; This function calls:
  3825 ;;		___ftmul
  3826 ;; This function is called by:
  3827 ;;		_atan
  3828 ;;		_sqrt
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text15
  3833  0037E4                     __ptext15:
  3834                           	opt stack 0
  3835  0037E4                     ___asftmul:
  3836                           	opt stack 24
  3837                           
  3838                           ;	Return value of ___asftmul is never used
  3839                           
  3840                           ;incstack = 0
  3841                           ;incstack = 0
  3842  0037E4  C02E  FFD9         	movff	___asftmul@f1p,fsr2l
  3843  0037E8  C02F  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3844  0037EC  CFDE F01D          	movff	postinc2,?___ftmul
  3845  0037F0  CFDE F01E          	movff	postinc2,?___ftmul+1
  3846  0037F4  CFDD F01F          	movff	postdec2,?___ftmul+2
  3847  0037F8  C030  F020         	movff	___asftmul@f2,?___ftmul+3
  3848  0037FC  C031  F021         	movff	___asftmul@f2+1,?___ftmul+4
  3849  003800  C032  F022         	movff	___asftmul@f2+2,?___ftmul+5
  3850  003804  ECF4  F010         	call	___ftmul	;wreg free
  3851  003808  C02E  FFD9         	movff	___asftmul@f1p,fsr2l
  3852  00380C  C02F  FFDA         	movff	___asftmul@f1p+1,fsr2h
  3853  003810  C01D  FFDE         	movff	?___ftmul,postinc2
  3854  003814  C01E  FFDE         	movff	?___ftmul+1,postinc2
  3855  003818  C01F  FFDD         	movff	?___ftmul+2,postdec2
  3856  00381C  52DD               	movf	postdec2,f,c
  3857  00381E  0012               	return	
  3858  003820                     __end_of___asftmul:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           intcon	equ	0xFF2
  3865                           intcon2	equ	0xFF1
  3866                           postinc0	equ	0xFEE
  3867                           wreg	equ	0xFE8
  3868                           postinc1	equ	0xFE6
  3869                           postdec1	equ	0xFE5
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _telemTimerStart *****************
  3879 ;; Defined at:
  3880 ;;		line 276 in file "telemetry.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;		None               void
  3887 ;; Registers used:
  3888 ;;		wreg, status,2
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3894 ;;      Params:         0       0       0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;;		_xBeeWake
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text16
  3909  003AD0                     __ptext16:
  3910                           	opt stack 0
  3911  003AD0                     _telemTimerStart:
  3912                           	opt stack 30
  3913                           
  3914                           ;telemetry.c: 277: T1CONbits.TMR1ON = 1;
  3915                           
  3916                           ;incstack = 0
  3917                           ;incstack = 0
  3918  003AD0  80CD               	bsf	4045,0,c	;volatile
  3919                           
  3920                           ;telemetry.c: 278: T1CONbits.TMR1CS = 0;
  3921  003AD2  92CD               	bcf	4045,1,c	;volatile
  3922                           
  3923                           ;telemetry.c: 279: T1CONbits.T1SYNC = 1;
  3924  003AD4  84CD               	bsf	4045,2,c	;volatile
  3925                           
  3926                           ;telemetry.c: 280: T1CONbits.T1OSCEN = 0;
  3927  003AD6  96CD               	bcf	4045,3,c	;volatile
  3928                           
  3929                           ;telemetry.c: 281: T1CONbits.T1CKPS = 11;
  3930  003AD8  0E30               	movlw	48
  3931  003ADA  12CD               	iorwf	4045,f,c	;volatile
  3932                           
  3933                           ;telemetry.c: 282: T1CONbits.T1RUN = 0;
  3934  003ADC  9CCD               	bcf	4045,6,c	;volatile
  3935                           
  3936                           ;telemetry.c: 283: T1CONbits.RD16 = 0;
  3937  003ADE  9ECD               	bcf	4045,7,c	;volatile
  3938  003AE0  0012               	return	
  3939  003AE2                     __end_of_telemTimerStart:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           intcon	equ	0xFF2
  3946                           intcon2	equ	0xFF1
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           postinc1	equ	0xFE6
  3950                           postdec1	equ	0xFE5
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _xBeeTxXBee *****************
  3960 ;; Defined at:
  3961 ;;		line 232 in file "telemetry.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  ptr             2   26[COMRAM] PTR struct .
  3964 ;;		 -> xBeeData(16), 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;		None               void
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3976 ;;      Params:         2       0       0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0
  3979 ;;      Totals:         2       0       0       0       0       0       0
  3980 ;;Total ram usage:        2 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    3
  3983 ;; This function calls:
  3984 ;;		_xBeeTxInt
  3985 ;;		_xBeeTxLong
  3986 ;; This function is called by:
  3987 ;;		_main
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text17
  3992  002A70                     __ptext17:
  3993                           	opt stack 0
  3994  002A70                     _xBeeTxXBee:
  3995                           	opt stack 27
  3996                           
  3997                           ;telemetry.c: 233: xBeeTxLong(ptr->configCode);
  3998                           
  3999                           ;incstack = 0
  4000                           ;incstack = 0
  4001  002A70  EE20 F006          	lfsr	2,6
  4002  002A74  501B               	movf	xBeeTxXBee@ptr,w,c
  4003  002A76  26D9               	addwf	fsr2l,f,c
  4004  002A78  501C               	movf	xBeeTxXBee@ptr+1,w,c
  4005  002A7A  22DA               	addwfc	fsr2h,f,c
  4006  002A7C  CFDE F010          	movff	postinc2,?_xBeeTxLong
  4007  002A80  CFDE F011          	movff	postinc2,?_xBeeTxLong+1
  4008  002A84  CFDE F012          	movff	postinc2,?_xBeeTxLong+2
  4009  002A88  CFDE F013          	movff	postinc2,?_xBeeTxLong+3
  4010  002A8C  ECD4  F015         	call	_xBeeTxLong	;wreg free
  4011                           
  4012                           ;telemetry.c: 234: xBeeTxLong(ptr->firmVers);
  4013  002A90  C01B  FFD9         	movff	xBeeTxXBee@ptr,fsr2l
  4014  002A94  C01C  FFDA         	movff	xBeeTxXBee@ptr+1,fsr2h
  4015  002A98  CFDE F010          	movff	postinc2,?_xBeeTxLong
  4016  002A9C  CFDE F011          	movff	postinc2,?_xBeeTxLong+1
  4017  002AA0  CFDE F012          	movff	postinc2,?_xBeeTxLong+2
  4018  002AA4  CFDE F013          	movff	postinc2,?_xBeeTxLong+3
  4019  002AA8  ECD4  F015         	call	_xBeeTxLong	;wreg free
  4020                           
  4021                           ;telemetry.c: 235: xBeeTxInt(ptr->hardVers);
  4022  002AAC  EE20 F004          	lfsr	2,4
  4023  002AB0  501B               	movf	xBeeTxXBee@ptr,w,c
  4024  002AB2  26D9               	addwf	fsr2l,f,c
  4025  002AB4  501C               	movf	xBeeTxXBee@ptr+1,w,c
  4026  002AB6  22DA               	addwfc	fsr2h,f,c
  4027  002AB8  CFDE F010          	movff	postinc2,?_xBeeTxInt
  4028  002ABC  CFDD F011          	movff	postdec2,?_xBeeTxInt+1
  4029  002AC0  EC71  F01D         	call	_xBeeTxInt	;wreg free
  4030                           
  4031                           ;telemetry.c: 236: xBeeTxInt(ptr->nRFerrors);
  4032  002AC4  EE20 F00A          	lfsr	2,10
  4033  002AC8  501B               	movf	xBeeTxXBee@ptr,w,c
  4034  002ACA  26D9               	addwf	fsr2l,f,c
  4035  002ACC  501C               	movf	xBeeTxXBee@ptr+1,w,c
  4036  002ACE  22DA               	addwfc	fsr2h,f,c
  4037  002AD0  CFDE F010          	movff	postinc2,?_xBeeTxInt
  4038  002AD4  CFDD F011          	movff	postdec2,?_xBeeTxInt+1
  4039  002AD8  EC71  F01D         	call	_xBeeTxInt	;wreg free
  4040                           
  4041                           ;telemetry.c: 237: xBeeTxInt(ptr->supplyV);
  4042  002ADC  EE20 F00E          	lfsr	2,14
  4043  002AE0  501B               	movf	xBeeTxXBee@ptr,w,c
  4044  002AE2  26D9               	addwf	fsr2l,f,c
  4045  002AE4  501C               	movf	xBeeTxXBee@ptr+1,w,c
  4046  002AE6  22DA               	addwfc	fsr2h,f,c
  4047  002AE8  CFDE F010          	movff	postinc2,?_xBeeTxInt
  4048  002AEC  CFDD F011          	movff	postdec2,?_xBeeTxInt+1
  4049  002AF0  EC71  F01D         	call	_xBeeTxInt	;wreg free
  4050                           
  4051                           ;telemetry.c: 238: xBeeTxInt(ptr->temp);
  4052  002AF4  EE20 F00C          	lfsr	2,12
  4053  002AF8  501B               	movf	xBeeTxXBee@ptr,w,c
  4054  002AFA  26D9               	addwf	fsr2l,f,c
  4055  002AFC  501C               	movf	xBeeTxXBee@ptr+1,w,c
  4056  002AFE  22DA               	addwfc	fsr2h,f,c
  4057  002B00  CFDE F010          	movff	postinc2,?_xBeeTxInt
  4058  002B04  CFDD F011          	movff	postdec2,?_xBeeTxInt+1
  4059  002B08  EC71  F01D         	call	_xBeeTxInt	;wreg free
  4060  002B0C  0012               	return	
  4061  002B0E                     __end_of_xBeeTxXBee:
  4062                           	opt stack 0
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           intcon	equ	0xFF2
  4068                           intcon2	equ	0xFF1
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postinc1	equ	0xFE6
  4072                           postdec1	equ	0xFE5
  4073                           fsr1l	equ	0xFE1
  4074                           indf2	equ	0xFDF
  4075                           postinc2	equ	0xFDE
  4076                           postdec2	equ	0xFDD
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _xBeeTxLong *****************
  4082 ;; Defined at:
  4083 ;;		line 187 in file "telemetry.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  data            4   15[COMRAM] long 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;		None               void
  4090 ;; Registers used:
  4091 ;;		wreg, status,2, status,0, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4097 ;;      Params:         4       0       0       0       0       0       0
  4098 ;;      Locals:         2       0       0       0       0       0       0
  4099 ;;      Temps:          5       0       0       0       0       0       0
  4100 ;;      Totals:        11       0       0       0       0       0       0
  4101 ;;Total ram usage:       11 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    2
  4104 ;; This function calls:
  4105 ;;		_xBeeTxByte
  4106 ;; This function is called by:
  4107 ;;		_xBeeTxXBee
  4108 ;;		_xBeeTxSense
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text18
  4113  002BA8                     __ptext18:
  4114                           	opt stack 0
  4115  002BA8                     _xBeeTxLong:
  4116                           	opt stack 27
  4117                           
  4118                           ;telemetry.c: 188: xBeeTxByte((unsigned char)(data >> 24));
  4119                           
  4120                           ;incstack = 0
  4121                           ;incstack = 0
  4122  002BA8  C013  F00F         	movff	xBeeTxLong@data+3,?_xBeeTxByte
  4123  002BAC  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4124                           
  4125                           ;telemetry.c: 189: xBeeTxByte((unsigned char)((data >> 16)&& 0xFF));
  4126  002BB0  6E14               	movwf	??_xBeeTxLong& (0+255),c
  4127  002BB2  0E00               	movlw	0
  4128  002BB4  6E19               	movwf	_xBeeTxLong$3946,c
  4129  002BB6  5014               	movf	??_xBeeTxLong& (0+255),w,c
  4130  002BB8  0E10               	movlw	16
  4131  002BBA  6E14               	movwf	??_xBeeTxLong& (0+255),c
  4132  002BBC  C010  F015         	movff	xBeeTxLong@data,??_xBeeTxLong+1
  4133  002BC0  C011  F016         	movff	xBeeTxLong@data+1,??_xBeeTxLong+2
  4134  002BC4  C012  F017         	movff	xBeeTxLong@data+2,??_xBeeTxLong+3
  4135  002BC8  C013  F018         	movff	xBeeTxLong@data+3,??_xBeeTxLong+4
  4136  002BCC                     u6645:
  4137  002BCC  6614               	tstfsz	??_xBeeTxLong,c
  4138  002BCE  D001               	goto	u6646
  4139  002BD0  D007               	goto	u6647
  4140  002BD2                     u6646:
  4141  002BD2  3418               	rlcf	??_xBeeTxLong+4,w,c
  4142  002BD4  3218               	rrcf	??_xBeeTxLong+4,f,c
  4143  002BD6  3217               	rrcf	??_xBeeTxLong+3,f,c
  4144  002BD8  3216               	rrcf	??_xBeeTxLong+2,f,c
  4145  002BDA  3215               	rrcf	??_xBeeTxLong+1,f,c
  4146  002BDC  2E14               	decfsz	??_xBeeTxLong,f,c
  4147  002BDE  D7F6               	goto	u6645
  4148  002BE0                     u6647:
  4149  002BE0  5018               	movf	??_xBeeTxLong+4,w,c
  4150  002BE2  1015               	iorwf	??_xBeeTxLong+1,w,c
  4151  002BE4  1016               	iorwf	??_xBeeTxLong+2,w,c
  4152  002BE6  1017               	iorwf	??_xBeeTxLong+3,w,c
  4153  002BE8  B4D8               	btfsc	status,2,c
  4154  002BEA  D004               	goto	l7344
  4155  002BEC  6E14               	movwf	??_xBeeTxLong& (0+255),c
  4156  002BEE  0E01               	movlw	1
  4157  002BF0  6E19               	movwf	_xBeeTxLong$3946,c
  4158  002BF2  5014               	movf	??_xBeeTxLong& (0+255),w,c
  4159  002BF4                     l7344:
  4160  002BF4  C019  F00F         	movff	_xBeeTxLong$3946,?_xBeeTxByte
  4161  002BF8  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4162                           
  4163                           ;telemetry.c: 190: xBeeTxByte((unsigned char)((data >> 8)&& 0xFF));
  4164  002BFC  6E14               	movwf	??_xBeeTxLong& (0+255),c
  4165  002BFE  0E00               	movlw	0
  4166  002C00  6E1A               	movwf	_xBeeTxLong$3947,c
  4167  002C02  5014               	movf	??_xBeeTxLong& (0+255),w,c
  4168  002C04  C011  F014         	movff	xBeeTxLong@data+1,??_xBeeTxLong
  4169  002C08  C012  F015         	movff	xBeeTxLong@data+2,??_xBeeTxLong+1
  4170  002C0C  C013  F016         	movff	xBeeTxLong@data+3,??_xBeeTxLong+2
  4171  002C10  6A17               	clrf	(??_xBeeTxLong+3)& (0+255),c
  4172  002C12  BE16               	btfsc	(??_xBeeTxLong+2)& (0+255),7,c
  4173  002C14  6817               	setf	(??_xBeeTxLong+3)& (0+255),c
  4174  002C16  5017               	movf	??_xBeeTxLong+3,w,c
  4175  002C18  1014               	iorwf	??_xBeeTxLong,w,c
  4176  002C1A  1015               	iorwf	??_xBeeTxLong+1,w,c
  4177  002C1C  1016               	iorwf	??_xBeeTxLong+2,w,c
  4178  002C1E  B4D8               	btfsc	status,2,c
  4179  002C20  D004               	goto	l7352
  4180  002C22  6E14               	movwf	??_xBeeTxLong& (0+255),c
  4181  002C24  0E01               	movlw	1
  4182  002C26  6E1A               	movwf	_xBeeTxLong$3947,c
  4183  002C28  5014               	movf	??_xBeeTxLong& (0+255),w,c
  4184  002C2A                     l7352:
  4185  002C2A  C01A  F00F         	movff	_xBeeTxLong$3947,?_xBeeTxByte
  4186  002C2E  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4187                           
  4188                           ;telemetry.c: 191: xBeeTxByte((unsigned char)(data & 0xFF));
  4189  002C32  C010  F00F         	movff	xBeeTxLong@data,?_xBeeTxByte
  4190  002C36  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4191  002C3A  0012               	return	
  4192  002C3C                     __end_of_xBeeTxLong:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           intcon	equ	0xFF2
  4199                           intcon2	equ	0xFF1
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           postinc1	equ	0xFE6
  4203                           postdec1	equ	0xFE5
  4204                           fsr1l	equ	0xFE1
  4205                           indf2	equ	0xFDF
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function _xBeeTxInt *****************
  4213 ;; Defined at:
  4214 ;;		line 171 in file "telemetry.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  data            2   15[COMRAM] int 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4228 ;;      Params:         2       0       0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0
  4231 ;;      Totals:         2       0       0       0       0       0       0
  4232 ;;Total ram usage:        2 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    2
  4235 ;; This function calls:
  4236 ;;		_xBeeTxByte
  4237 ;; This function is called by:
  4238 ;;		_xBeeTxXBee
  4239 ;;		_xBeeTxSense
  4240 ;;		_xBeeTxBatt
  4241 ;;		_xBeeTxPwr
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text19
  4246  003AE2                     __ptext19:
  4247                           	opt stack 0
  4248  003AE2                     _xBeeTxInt:
  4249                           	opt stack 27
  4250                           
  4251                           ;telemetry.c: 172: xBeeTxByte((unsigned char)(data >> 8));
  4252                           
  4253                           ;incstack = 0
  4254                           ;incstack = 0
  4255  003AE2  5011               	movf	xBeeTxInt@data+1,w,c
  4256  003AE4  6E0F               	movwf	?_xBeeTxByte,c
  4257  003AE6  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4258                           
  4259                           ;telemetry.c: 173: xBeeTxByte((unsigned char)(data & 0xFF));
  4260  003AEA  C010  F00F         	movff	xBeeTxInt@data,?_xBeeTxByte
  4261  003AEE  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  4262  003AF2  0012               	return	
  4263  003AF4                     __end_of_xBeeTxInt:
  4264                           	opt stack 0
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           intcon	equ	0xFF2
  4270                           intcon2	equ	0xFF1
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postinc1	equ	0xFE6
  4274                           postdec1	equ	0xFE5
  4275                           fsr1l	equ	0xFE1
  4276                           indf2	equ	0xFDF
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _updateXBeeData *****************
  4284 ;; Defined at:
  4285 ;;		line 91 in file "telemetry.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  data            2   18[COMRAM] PTR struct .
  4288 ;;		 -> xBeeData(16), 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4300 ;;      Params:         2       0       0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0
  4302 ;;      Temps:          2       0       0       0       0       0       0
  4303 ;;      Totals:         4       0       0       0       0       0       0
  4304 ;;Total ram usage:        4 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    3
  4307 ;; This function calls:
  4308 ;;		_xBeeSetATMode
  4309 ;;		_xBeeATCommand
  4310 ;;		_xBeeRxLong
  4311 ;;		_xBeeRxInt
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text20
  4318  001E8A                     __ptext20:
  4319                           	opt stack 0
  4320  001E8A                     _updateXBeeData:
  4321                           	opt stack 27
  4322                           
  4323                           ;telemetry.c: 92: xBeeSetATMode();
  4324                           
  4325                           ;incstack = 0
  4326                           ;incstack = 0
  4327  001E8A  EC11  F019         	call	_xBeeSetATMode	;wreg free
  4328                           
  4329                           ;telemetry.c: 94: xBeeATCommand('V','R');
  4330  001E8E  6E15               	movwf	??_updateXBeeData& (0+255),c
  4331  001E90  0E56               	movlw	86
  4332  001E92  6E10               	movwf	?_xBeeATCommand,c
  4333  001E94  5015               	movf	??_updateXBeeData& (0+255),w,c
  4334  001E96  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4335  001E98  0E52               	movlw	82
  4336  001E9A  6E11               	movwf	?_xBeeATCommand+1,c
  4337  001E9C  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4338  001E9E  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4339                           
  4340                           ;telemetry.c: 95: data->firmVers = xBeeRxLong();
  4341  001EA2  EC44  F019         	call	_xBeeRxLong	;wreg free
  4342  001EA6  C013  FFD9         	movff	updateXBeeData@data,fsr2l
  4343  001EAA  C014  FFDA         	movff	updateXBeeData@data+1,fsr2h
  4344  001EAE  C002  FFDE         	movff	?_xBeeRxLong,postinc2
  4345  001EB2  C003  FFDE         	movff	?_xBeeRxLong+1,postinc2
  4346  001EB6  C004  FFDE         	movff	?_xBeeRxLong+2,postinc2
  4347  001EBA  C005  FFDD         	movff	?_xBeeRxLong+3,postdec2
  4348  001EBE  06D9               	decf	fsr2l,f,c
  4349  001EC0  06D9               	decf	fsr2l,f,c
  4350                           
  4351                           ;telemetry.c: 97: xBeeATCommand('H','V');
  4352  001EC2  6E15               	movwf	??_updateXBeeData& (0+255),c
  4353  001EC4  0E48               	movlw	72
  4354  001EC6  6E10               	movwf	?_xBeeATCommand,c
  4355  001EC8  5015               	movf	??_updateXBeeData& (0+255),w,c
  4356  001ECA  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4357  001ECC  0E56               	movlw	86
  4358  001ECE  6E11               	movwf	?_xBeeATCommand+1,c
  4359  001ED0  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4360  001ED2  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4361                           
  4362                           ;telemetry.c: 98: data->hardVers = xBeeRxInt();
  4363  001ED6  EC04  F01D         	call	_xBeeRxInt	;wreg free
  4364  001EDA  EE20 F004          	lfsr	2,4
  4365  001EDE  5013               	movf	updateXBeeData@data,w,c
  4366  001EE0  26D9               	addwf	fsr2l,f,c
  4367  001EE2  5014               	movf	updateXBeeData@data+1,w,c
  4368  001EE4  22DA               	addwfc	fsr2h,f,c
  4369  001EE6  C002  FFDE         	movff	?_xBeeRxInt,postinc2
  4370  001EEA  C003  FFDD         	movff	?_xBeeRxInt+1,postdec2
  4371                           
  4372                           ;telemetry.c: 100: xBeeATCommand('C','K');
  4373  001EEE  6E15               	movwf	??_updateXBeeData& (0+255),c
  4374  001EF0  0E43               	movlw	67
  4375  001EF2  6E10               	movwf	?_xBeeATCommand,c
  4376  001EF4  5015               	movf	??_updateXBeeData& (0+255),w,c
  4377  001EF6  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4378  001EF8  0E4B               	movlw	75
  4379  001EFA  6E11               	movwf	?_xBeeATCommand+1,c
  4380  001EFC  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4381  001EFE  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4382                           
  4383                           ;telemetry.c: 101: data->configCode = xBeeRxLong();
  4384  001F02  EC44  F019         	call	_xBeeRxLong	;wreg free
  4385  001F06  EE20 F006          	lfsr	2,6
  4386  001F0A  5013               	movf	updateXBeeData@data,w,c
  4387  001F0C  26D9               	addwf	fsr2l,f,c
  4388  001F0E  5014               	movf	updateXBeeData@data+1,w,c
  4389  001F10  22DA               	addwfc	fsr2h,f,c
  4390  001F12  C002  FFDE         	movff	?_xBeeRxLong,postinc2
  4391  001F16  C003  FFDE         	movff	?_xBeeRxLong+1,postinc2
  4392  001F1A  C004  FFDE         	movff	?_xBeeRxLong+2,postinc2
  4393  001F1E  C005  FFDD         	movff	?_xBeeRxLong+3,postdec2
  4394  001F22  06D9               	decf	fsr2l,f,c
  4395  001F24  06D9               	decf	fsr2l,f,c
  4396                           
  4397                           ;telemetry.c: 103: xBeeATCommand('E','R');
  4398  001F26  6E15               	movwf	??_updateXBeeData& (0+255),c
  4399  001F28  0E45               	movlw	69
  4400  001F2A  6E10               	movwf	?_xBeeATCommand,c
  4401  001F2C  5015               	movf	??_updateXBeeData& (0+255),w,c
  4402  001F2E  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4403  001F30  0E52               	movlw	82
  4404  001F32  6E11               	movwf	?_xBeeATCommand+1,c
  4405  001F34  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4406  001F36  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4407                           
  4408                           ;telemetry.c: 104: data->nRFerrors = xBeeRxInt();
  4409  001F3A  EC04  F01D         	call	_xBeeRxInt	;wreg free
  4410  001F3E  EE20 F00A          	lfsr	2,10
  4411  001F42  5013               	movf	updateXBeeData@data,w,c
  4412  001F44  26D9               	addwf	fsr2l,f,c
  4413  001F46  5014               	movf	updateXBeeData@data+1,w,c
  4414  001F48  22DA               	addwfc	fsr2h,f,c
  4415  001F4A  C002  FFDE         	movff	?_xBeeRxInt,postinc2
  4416  001F4E  C003  FFDD         	movff	?_xBeeRxInt+1,postdec2
  4417                           
  4418                           ;telemetry.c: 106: xBeeATCommand('T','P');
  4419  001F52  6E15               	movwf	??_updateXBeeData& (0+255),c
  4420  001F54  0E54               	movlw	84
  4421  001F56  6E10               	movwf	?_xBeeATCommand,c
  4422  001F58  5015               	movf	??_updateXBeeData& (0+255),w,c
  4423  001F5A  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4424  001F5C  0E50               	movlw	80
  4425  001F5E  6E11               	movwf	?_xBeeATCommand+1,c
  4426  001F60  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4427  001F62  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4428                           
  4429                           ;telemetry.c: 107: data->temp = xBeeRxInt();
  4430  001F66  EC04  F01D         	call	_xBeeRxInt	;wreg free
  4431  001F6A  EE20 F00C          	lfsr	2,12
  4432  001F6E  5013               	movf	updateXBeeData@data,w,c
  4433  001F70  26D9               	addwf	fsr2l,f,c
  4434  001F72  5014               	movf	updateXBeeData@data+1,w,c
  4435  001F74  22DA               	addwfc	fsr2h,f,c
  4436  001F76  C002  FFDE         	movff	?_xBeeRxInt,postinc2
  4437  001F7A  C003  FFDD         	movff	?_xBeeRxInt+1,postdec2
  4438                           
  4439                           ;telemetry.c: 109: xBeeATCommand('%','V');
  4440  001F7E  6E15               	movwf	??_updateXBeeData& (0+255),c
  4441  001F80  0E25               	movlw	37
  4442  001F82  6E10               	movwf	?_xBeeATCommand,c
  4443  001F84  5015               	movf	??_updateXBeeData& (0+255),w,c
  4444  001F86  6E16               	movwf	(??_updateXBeeData+1)& (0+255),c
  4445  001F88  0E56               	movlw	86
  4446  001F8A  6E11               	movwf	?_xBeeATCommand+1,c
  4447  001F8C  5016               	movf	(??_updateXBeeData+1)& (0+255),w,c
  4448  001F8E  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4449                           
  4450                           ;telemetry.c: 110: data->supplyV = xBeeRxInt();
  4451  001F92  EC04  F01D         	call	_xBeeRxInt	;wreg free
  4452  001F96  EE20 F00E          	lfsr	2,14
  4453  001F9A  5013               	movf	updateXBeeData@data,w,c
  4454  001F9C  26D9               	addwf	fsr2l,f,c
  4455  001F9E  5014               	movf	updateXBeeData@data+1,w,c
  4456  001FA0  22DA               	addwfc	fsr2h,f,c
  4457  001FA2  C002  FFDE         	movff	?_xBeeRxInt,postinc2
  4458  001FA6  C003  FFDD         	movff	?_xBeeRxInt+1,postdec2
  4459  001FAA  0012               	return	
  4460  001FAC                     __end_of_updateXBeeData:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           intcon	equ	0xFF2
  4467                           intcon2	equ	0xFF1
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postinc1	equ	0xFE6
  4471                           postdec1	equ	0xFE5
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _xBeeRxInt *****************
  4481 ;; Defined at:
  4482 ;;		line 252 in file "telemetry.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  value           2    4[COMRAM] int 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2    1[COMRAM] int 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4496 ;;      Params:         2       0       0       0       0       0       0
  4497 ;;      Locals:         2       0       0       0       0       0       0
  4498 ;;      Temps:          1       0       0       0       0       0       0
  4499 ;;      Totals:         5       0       0       0       0       0       0
  4500 ;;Total ram usage:        5 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    2
  4503 ;; This function calls:
  4504 ;;		_xBeeRxByte
  4505 ;; This function is called by:
  4506 ;;		_updateXBeeData
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text21
  4511  003A08                     __ptext21:
  4512                           	opt stack 0
  4513  003A08                     _xBeeRxInt:
  4514                           	opt stack 27
  4515                           
  4516                           ;telemetry.c: 253: int value;
  4517                           ;telemetry.c: 254: value = xBeeRxByte() << 8;
  4518                           
  4519                           ;incstack = 0
  4520                           ;incstack = 0
  4521  003A08  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4522  003A0C  6E06               	movwf	xBeeRxInt@value+1,c
  4523  003A0E  6A05               	clrf	xBeeRxInt@value,c
  4524                           
  4525                           ;telemetry.c: 255: value |= xBeeRxByte();
  4526  003A10  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4527  003A14  6E04               	movwf	??_xBeeRxInt& (0+255),c
  4528  003A16  5004               	movf	??_xBeeRxInt,w,c
  4529  003A18  1205               	iorwf	xBeeRxInt@value,f,c
  4530                           
  4531                           ;telemetry.c: 257: return value;
  4532  003A1A  C005  F002         	movff	xBeeRxInt@value,?_xBeeRxInt
  4533  003A1E  C006  F003         	movff	xBeeRxInt@value+1,?_xBeeRxInt+1
  4534  003A22  0012               	return	
  4535  003A24                     __end_of_xBeeRxInt:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           intcon	equ	0xFF2
  4542                           intcon2	equ	0xFF1
  4543                           postinc0	equ	0xFEE
  4544                           wreg	equ	0xFE8
  4545                           postinc1	equ	0xFE6
  4546                           postdec1	equ	0xFE5
  4547                           fsr1l	equ	0xFE1
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _xBeeRxLong *****************
  4556 ;; Defined at:
  4557 ;;		line 263 in file "telemetry.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;		None
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  value           4   12[COMRAM] long 
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  4    1[COMRAM] long 
  4564 ;; Registers used:
  4565 ;;		wreg, status,2, status,0, cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4571 ;;      Params:         4       0       0       0       0       0       0
  4572 ;;      Locals:         4       0       0       0       0       0       0
  4573 ;;      Temps:          7       0       0       0       0       0       0
  4574 ;;      Totals:        15       0       0       0       0       0       0
  4575 ;;Total ram usage:       15 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; Hardware stack levels required when called:    2
  4578 ;; This function calls:
  4579 ;;		_xBeeRxByte
  4580 ;; This function is called by:
  4581 ;;		_updateXBeeData
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text22
  4586  003288                     __ptext22:
  4587                           	opt stack 0
  4588  003288                     _xBeeRxLong:
  4589                           	opt stack 27
  4590                           
  4591                           ;telemetry.c: 264: long value;
  4592                           ;telemetry.c: 265: value = xBeeRxByte() << 24;
  4593                           
  4594                           ;incstack = 0
  4595                           ;incstack = 0
  4596  003288  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4597  00328C  6E06               	movwf	??_xBeeRxLong& (0+255),c
  4598  00328E  5006               	movf	??_xBeeRxLong,w,c
  4599  003290  6E0D               	movwf	xBeeRxLong@value,c
  4600  003292  6A0E               	clrf	xBeeRxLong@value+1,c
  4601  003294  6A0F               	clrf	xBeeRxLong@value+2,c
  4602  003296  6A10               	clrf	xBeeRxLong@value+3,c
  4603                           
  4604                           ;telemetry.c: 266: value |= xBeeRxByte() << 16;
  4605  003298  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4606  00329C  6E06               	movwf	??_xBeeRxLong& (0+255),c
  4607  00329E  5006               	movf	??_xBeeRxLong,w,c
  4608  0032A0  120D               	iorwf	xBeeRxLong@value,f,c
  4609                           
  4610                           ;telemetry.c: 267: value |= xBeeRxByte() << 8;
  4611  0032A2  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4612  0032A6  6E06               	movwf	??_xBeeRxLong& (0+255),c
  4613  0032A8  5006               	movf	??_xBeeRxLong,w,c
  4614  0032AA  6E08               	movwf	(??_xBeeRxLong+2)& (0+255),c
  4615  0032AC  6A07               	clrf	(??_xBeeRxLong+1)& (0+255),c
  4616  0032AE  C007  F009         	movff	??_xBeeRxLong+1,??_xBeeRxLong+3
  4617  0032B2  C008  F00A         	movff	??_xBeeRxLong+2,??_xBeeRxLong+4
  4618  0032B6  0E00               	movlw	0
  4619  0032B8  BE0A               	btfsc	(??_xBeeRxLong+4)& (0+255),7,c
  4620  0032BA  0EFF               	movlw	255
  4621  0032BC  6E0B               	movwf	(??_xBeeRxLong+5)& (0+255),c
  4622  0032BE  6E0C               	movwf	(??_xBeeRxLong+6)& (0+255),c
  4623  0032C0  5009               	movf	??_xBeeRxLong+3,w,c
  4624  0032C2  120D               	iorwf	xBeeRxLong@value,f,c
  4625  0032C4  500A               	movf	??_xBeeRxLong+4,w,c
  4626  0032C6  120E               	iorwf	xBeeRxLong@value+1,f,c
  4627  0032C8  500B               	movf	??_xBeeRxLong+5,w,c
  4628  0032CA  120F               	iorwf	xBeeRxLong@value+2,f,c
  4629  0032CC  500C               	movf	??_xBeeRxLong+6,w,c
  4630  0032CE  1210               	iorwf	xBeeRxLong@value+3,f,c
  4631                           
  4632                           ;telemetry.c: 268: value |= xBeeRxByte();
  4633  0032D0  ECAD  F01D         	call	_xBeeRxByte	;wreg free
  4634  0032D4  6E06               	movwf	??_xBeeRxLong& (0+255),c
  4635  0032D6  5006               	movf	??_xBeeRxLong,w,c
  4636  0032D8  120D               	iorwf	xBeeRxLong@value,f,c
  4637                           
  4638                           ;telemetry.c: 270: return value;
  4639  0032DA  C00D  F002         	movff	xBeeRxLong@value,?_xBeeRxLong
  4640  0032DE  C00E  F003         	movff	xBeeRxLong@value+1,?_xBeeRxLong+1
  4641  0032E2  C00F  F004         	movff	xBeeRxLong@value+2,?_xBeeRxLong+2
  4642  0032E6  C010  F005         	movff	xBeeRxLong@value+3,?_xBeeRxLong+3
  4643  0032EA  0012               	return	
  4644  0032EC                     __end_of_xBeeRxLong:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           intcon	equ	0xFF2
  4651                           intcon2	equ	0xFF1
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           fsr1l	equ	0xFE1
  4657                           indf2	equ	0xFDF
  4658                           postinc2	equ	0xFDE
  4659                           postdec2	equ	0xFDD
  4660                           fsr2h	equ	0xFDA
  4661                           fsr2l	equ	0xFD9
  4662                           status	equ	0xFD8
  4663                           
  4664 ;; *************** function _xBeeRxByte *****************
  4665 ;; Defined at:
  4666 ;;		line 244 in file "telemetry.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      unsigned char 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4680 ;;      Params:         0       0       0       0       0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0
  4682 ;;      Temps:          0       0       0       0       0       0       0
  4683 ;;      Totals:         0       0       0       0       0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    1
  4687 ;; This function calls:
  4688 ;;		_ReadUSART
  4689 ;; This function is called by:
  4690 ;;		_xBeeRxInt
  4691 ;;		_xBeeRxLong
  4692 ;;		_LowInt_ISR
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           	psect	text23
  4697  003B5A                     __ptext23:
  4698                           	opt stack 0
  4699  003B5A                     _xBeeRxByte:
  4700                           	opt stack 27
  4701  003B5A                     l1443:
  4702  003B5A  AA9E               	btfss	3998,5,c	;volatile
  4703  003B5C  D7FE               	goto	l1443
  4704                           
  4705                           ;telemetry.c: 246: return ReadUSART();
  4706  003B5E  ECF5  F01C         	call	_ReadUSART	;wreg free
  4707  003B62  0012               	return	
  4708  003B64                     __end_of_xBeeRxByte:
  4709                           	opt stack 0
  4710                           tblptru	equ	0xFF8
  4711                           tblptrh	equ	0xFF7
  4712                           tblptrl	equ	0xFF6
  4713                           tablat	equ	0xFF5
  4714                           intcon	equ	0xFF2
  4715                           intcon2	equ	0xFF1
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postinc1	equ	0xFE6
  4719                           postdec1	equ	0xFE5
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _ReadUSART *****************
  4729 ;; Defined at:
  4730 ;;		line 16 in file "USART/uread.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  data            1    0[COMRAM] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      unsigned char 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         0       0       0       0       0       0       0
  4745 ;;      Locals:         1       0       0       0       0       0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0
  4747 ;;      Totals:         1       0       0       0       0       0       0
  4748 ;;Total ram usage:        1 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_xBeeRxByte
  4754 ;;		_getsUSART
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text24
  4759  0039EA                     __ptext24:
  4760                           	opt stack 0
  4761  0039EA                     _ReadUSART:
  4762                           	opt stack 27
  4763                           
  4764                           ;uread.c: 17: char data;
  4765                           ;uread.c: 19: USART_Status.val &= 0xf2;
  4766                           
  4767                           ;incstack = 0
  4768                           ;incstack = 0
  4769  0039EA  0EF2               	movlw	242
  4770  0039EC  167E               	andwf	_USART_Status,f,c
  4771                           
  4772                           ;uread.c: 21: if(RCSTAbits.RX9)
  4773  0039EE  ACAB               	btfss	4011,6,c	;volatile
  4774  0039F0  D003               	goto	l645
  4775                           
  4776                           ;uread.c: 22: {
  4777                           ;uread.c: 23: USART_Status.RX_NINE = 0;
  4778  0039F2  907E               	bcf	_USART_Status,0,c
  4779                           
  4780                           ;uread.c: 24: if(RCSTAbits.RX9D)
  4781  0039F4  B0AB               	btfsc	4011,0,c	;volatile
  4782                           
  4783                           ;uread.c: 25: USART_Status.RX_NINE = 1;
  4784  0039F6  807E               	bsf	_USART_Status,0,c
  4785  0039F8                     l645:
  4786                           
  4787                           ;uread.c: 26: }
  4788                           ;uread.c: 28: if(RCSTAbits.FERR)
  4789  0039F8  B4AB               	btfsc	4011,2,c	;volatile
  4790                           
  4791                           ;uread.c: 29: USART_Status.FRAME_ERROR = 1;
  4792  0039FA  847E               	bsf	_USART_Status,2,c
  4793                           
  4794                           ;uread.c: 31: if(RCSTAbits.OERR)
  4795  0039FC  B2AB               	btfsc	4011,1,c	;volatile
  4796                           
  4797                           ;uread.c: 32: USART_Status.OVERRUN_ERROR = 1;
  4798  0039FE  867E               	bsf	_USART_Status,3,c
  4799                           
  4800                           ;uread.c: 34: data = RCREG;
  4801  003A00  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  4802                           
  4803                           ;uread.c: 36: return (data);
  4804  003A04  5001               	movf	ReadUSART@data,w,c
  4805  003A06  0012               	return	
  4806  003A08                     __end_of_ReadUSART:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           intcon	equ	0xFF2
  4813                           intcon2	equ	0xFF1
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postinc1	equ	0xFE6
  4817                           postdec1	equ	0xFE5
  4818                           fsr1l	equ	0xFE1
  4819                           indf2	equ	0xFDF
  4820                           postinc2	equ	0xFDE
  4821                           postdec2	equ	0xFDD
  4822                           fsr2h	equ	0xFDA
  4823                           fsr2l	equ	0xFD9
  4824                           status	equ	0xFD8
  4825                           
  4826 ;; *************** function _xBeeConfig *****************
  4827 ;; Defined at:
  4828 ;;		line 39 in file "telemetry.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;		None               void
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4842 ;;      Params:         0       0       0       0       0       0       0
  4843 ;;      Locals:         0       0       0       0       0       0       0
  4844 ;;      Temps:          3       0       0       0       0       0       0
  4845 ;;      Totals:         3       0       0       0       0       0       0
  4846 ;;Total ram usage:        3 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    4
  4849 ;; This function calls:
  4850 ;;		_xBeeSetATMode
  4851 ;;		_xBeeATCommandUC
  4852 ;;		_xBeeEndATMode
  4853 ;; This function is called by:
  4854 ;;		_main
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text25
  4859  003724                     __ptext25:
  4860                           	opt stack 0
  4861  003724                     _xBeeConfig:
  4862                           	opt stack 26
  4863                           
  4864                           ;telemetry.c: 40: xBeeSetATMode();
  4865                           
  4866                           ;incstack = 0
  4867                           ;incstack = 0
  4868  003724  EC11  F019         	call	_xBeeSetATMode	;wreg free
  4869                           
  4870                           ;telemetry.c: 41: xBeeATCommandUC('R', 'P', 0xFF);
  4871  003728  6E14               	movwf	??_xBeeConfig& (0+255),c
  4872  00372A  0E52               	movlw	82
  4873  00372C  6E10               	movwf	?_xBeeATCommandUC,c
  4874  00372E  5014               	movf	??_xBeeConfig& (0+255),w,c
  4875  003730  6E15               	movwf	(??_xBeeConfig+1)& (0+255),c
  4876  003732  0E50               	movlw	80
  4877  003734  6E11               	movwf	?_xBeeATCommandUC+1,c
  4878  003736  5015               	movf	(??_xBeeConfig+1)& (0+255),w,c
  4879  003738  6E16               	movwf	(??_xBeeConfig+2)& (0+255),c
  4880  00373A  0EFF               	movlw	255
  4881  00373C  6E12               	movwf	?_xBeeATCommandUC+2,c
  4882  00373E  5016               	movf	(??_xBeeConfig+2)& (0+255),w,c
  4883  003740  EC2E  F01D         	call	_xBeeATCommandUC	;wreg free
  4884                           
  4885                           ;telemetry.c: 42: xBeeATCommandUC('D', '9', 0x01);
  4886  003744  6E14               	movwf	??_xBeeConfig& (0+255),c
  4887  003746  0E44               	movlw	68
  4888  003748  6E10               	movwf	?_xBeeATCommandUC,c
  4889  00374A  5014               	movf	??_xBeeConfig& (0+255),w,c
  4890  00374C  6E15               	movwf	(??_xBeeConfig+1)& (0+255),c
  4891  00374E  0E39               	movlw	57
  4892  003750  6E11               	movwf	?_xBeeATCommandUC+1,c
  4893  003752  5015               	movf	(??_xBeeConfig+1)& (0+255),w,c
  4894  003754  6E16               	movwf	(??_xBeeConfig+2)& (0+255),c
  4895  003756  0E01               	movlw	1
  4896  003758  6E12               	movwf	?_xBeeATCommandUC+2,c
  4897  00375A  5016               	movf	(??_xBeeConfig+2)& (0+255),w,c
  4898  00375C  EC2E  F01D         	call	_xBeeATCommandUC	;wreg free
  4899                           
  4900                           ;telemetry.c: 43: xBeeEndATMode();
  4901  003760  EC95  F01C         	call	_xBeeEndATMode	;wreg free
  4902  003764  0012               	return	
  4903  003766                     __end_of_xBeeConfig:
  4904                           	opt stack 0
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           intcon	equ	0xFF2
  4910                           intcon2	equ	0xFF1
  4911                           postinc0	equ	0xFEE
  4912                           wreg	equ	0xFE8
  4913                           postinc1	equ	0xFE6
  4914                           postdec1	equ	0xFE5
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _xBeeEndATMode *****************
  4924 ;; Defined at:
  4925 ;;		line 116 in file "telemetry.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;		None               void
  4932 ;; Registers used:
  4933 ;;		status,2, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4939 ;;      Params:         0       0       0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0
  4941 ;;      Temps:          2       0       0       0       0       0       0
  4942 ;;      Totals:         2       0       0       0       0       0       0
  4943 ;;Total ram usage:        2 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    3
  4946 ;; This function calls:
  4947 ;;		_xBeeATCommand
  4948 ;; This function is called by:
  4949 ;;		_xBeeConfig
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text26
  4954  00392A                     __ptext26:
  4955                           	opt stack 0
  4956  00392A                     _xBeeEndATMode:
  4957                           	opt stack 26
  4958                           
  4959                           ;telemetry.c: 117: xBeeATCommand('C','N');
  4960                           
  4961                           ;incstack = 0
  4962                           ;incstack = 0
  4963  00392A  6E12               	movwf	??_xBeeEndATMode& (0+255),c
  4964  00392C  0E43               	movlw	67
  4965  00392E  6E10               	movwf	?_xBeeATCommand,c
  4966  003930  5012               	movf	??_xBeeEndATMode& (0+255),w,c
  4967  003932  6E13               	movwf	(??_xBeeEndATMode+1)& (0+255),c
  4968  003934  0E4E               	movlw	78
  4969  003936  6E11               	movwf	?_xBeeATCommand+1,c
  4970  003938  5013               	movf	(??_xBeeEndATMode+1)& (0+255),w,c
  4971  00393A  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4972                           
  4973                           ;telemetry.c: 118: xBeeATCommand(0,0xD);
  4974  00393E  6E12               	movwf	??_xBeeEndATMode& (0+255),c
  4975  003940  0E00               	movlw	0
  4976  003942  6E10               	movwf	?_xBeeATCommand,c
  4977  003944  5012               	movf	??_xBeeEndATMode& (0+255),w,c
  4978  003946  6E13               	movwf	(??_xBeeEndATMode+1)& (0+255),c
  4979  003948  0E0D               	movlw	13
  4980  00394A  6E11               	movwf	?_xBeeATCommand+1,c
  4981  00394C  5013               	movf	(??_xBeeEndATMode+1)& (0+255),w,c
  4982  00394E  EC7A  F01D         	call	_xBeeATCommand	;wreg free
  4983  003952  0012               	return	
  4984  003954                     __end_of_xBeeEndATMode:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           intcon	equ	0xFF2
  4991                           intcon2	equ	0xFF1
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           postinc1	equ	0xFE6
  4995                           postdec1	equ	0xFE5
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _xBeeATCommand *****************
  5005 ;; Defined at:
  5006 ;;		line 69 in file "telemetry.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  cmd1            1   15[COMRAM] unsigned char 
  5009 ;;  cmd2            1   16[COMRAM] unsigned char 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;		None
  5012 ;; Return value:  Size  Location     Type
  5013 ;;		None               void
  5014 ;; Registers used:
  5015 ;;		cstack
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5021 ;;      Params:         2       0       0       0       0       0       0
  5022 ;;      Locals:         0       0       0       0       0       0       0
  5023 ;;      Temps:          0       0       0       0       0       0       0
  5024 ;;      Totals:         2       0       0       0       0       0       0
  5025 ;;Total ram usage:        2 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    2
  5028 ;; This function calls:
  5029 ;;		_xBeeTxByte
  5030 ;; This function is called by:
  5031 ;;		_updateXBeeData
  5032 ;;		_xBeeEndATMode
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text27
  5037  003AF4                     __ptext27:
  5038                           	opt stack 0
  5039  003AF4                     _xBeeATCommand:
  5040                           	opt stack 27
  5041                           
  5042                           ;telemetry.c: 70: xBeeTxByte(cmd1);
  5043                           
  5044                           ;incstack = 0
  5045                           ;incstack = 0
  5046  003AF4  C010  F00F         	movff	xBeeATCommand@cmd1,?_xBeeTxByte
  5047  003AF8  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5048                           
  5049                           ;telemetry.c: 71: xBeeTxByte(cmd2);
  5050  003AFC  C011  F00F         	movff	xBeeATCommand@cmd2,?_xBeeTxByte
  5051  003B00  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5052  003B04  0012               	return	
  5053  003B06                     __end_of_xBeeATCommand:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           postinc1	equ	0xFE6
  5064                           postdec1	equ	0xFE5
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _xBeeATCommandUC *****************
  5074 ;; Defined at:
  5075 ;;		line 80 in file "telemetry.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  cmd1            1   15[COMRAM] unsigned char 
  5078 ;;  cmd2            1   16[COMRAM] unsigned char 
  5079 ;;  param           1   17[COMRAM] unsigned char 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5091 ;;      Params:         3       0       0       0       0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0
  5094 ;;      Totals:         3       0       0       0       0       0       0
  5095 ;;Total ram usage:        3 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    2
  5098 ;; This function calls:
  5099 ;;		_xBeeTxByte
  5100 ;; This function is called by:
  5101 ;;		_xBeeConfig
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text28
  5106  003A5C                     __ptext28:
  5107                           	opt stack 0
  5108  003A5C                     _xBeeATCommandUC:
  5109                           	opt stack 27
  5110                           
  5111                           ;telemetry.c: 82: xBeeTxByte(cmd1);
  5112                           
  5113                           ;incstack = 0
  5114                           ;incstack = 0
  5115  003A5C  C010  F00F         	movff	xBeeATCommandUC@cmd1,?_xBeeTxByte
  5116  003A60  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5117                           
  5118                           ;telemetry.c: 83: xBeeTxByte(cmd2);
  5119  003A64  C011  F00F         	movff	xBeeATCommandUC@cmd2,?_xBeeTxByte
  5120  003A68  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5121                           
  5122                           ;telemetry.c: 84: xBeeTxByte(param);
  5123  003A6C  C012  F00F         	movff	xBeeATCommandUC@param,?_xBeeTxByte
  5124  003A70  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5125  003A74  0012               	return	
  5126  003A76                     __end_of_xBeeATCommandUC:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           intcon	equ	0xFF2
  5133                           intcon2	equ	0xFF1
  5134                           postinc0	equ	0xFEE
  5135                           wreg	equ	0xFE8
  5136                           postinc1	equ	0xFE6
  5137                           postdec1	equ	0xFE5
  5138                           fsr1l	equ	0xFE1
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           postdec2	equ	0xFDD
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _xBeeSetATMode *****************
  5147 ;; Defined at:
  5148 ;;		line 50 in file "telemetry.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  i               2   16[COMRAM] int 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         0       0       0       0       0       0       0
  5163 ;;      Locals:         2       0       0       0       0       0       0
  5164 ;;      Temps:          1       0       0       0       0       0       0
  5165 ;;      Totals:         3       0       0       0       0       0       0
  5166 ;;Total ram usage:        3 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    2
  5169 ;; This function calls:
  5170 ;;		_Delay10KTCYx
  5171 ;;		_xBeeTxByte
  5172 ;; This function is called by:
  5173 ;;		_xBeeConfig
  5174 ;;		_updateXBeeData
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text29
  5179  003222                     __ptext29:
  5180                           	opt stack 0
  5181  003222                     _xBeeSetATMode:
  5182                           	opt stack 27
  5183                           
  5184                           ;telemetry.c: 51: int i;
  5185                           ;telemetry.c: 52: for (i = 0; i < 4; ++i){
  5186                           
  5187                           ;incstack = 0
  5188                           ;incstack = 0
  5189  003222  0E00               	movlw	0
  5190  003224  6E12               	movwf	xBeeSetATMode@i+1,c
  5191  003226  0E00               	movlw	0
  5192  003228  6E11               	movwf	xBeeSetATMode@i,c
  5193  00322A  5012               	movf	xBeeSetATMode@i+1,w,c
  5194  00322C  0A80               	xorlw	128
  5195  00322E  0F80               	addlw	-128
  5196  003230  0E04               	movlw	4
  5197  003232  B4D8               	btfsc	status,2,c
  5198  003234  5C11               	subwf	xBeeSetATMode@i,w,c
  5199  003236  B0D8               	btfsc	status,0,c
  5200  003238  D011               	goto	l7304
  5201                           
  5202                           ;telemetry.c: 53: PORTCbits.RC0 = 1;
  5203  00323A  8082               	bsf	3970,0,c	;volatile
  5204                           
  5205                           ;telemetry.c: 54: Delay10KTCYx(0);
  5206  00323C  6E10               	movwf	??_xBeeSetATMode& (0+255),c
  5207  00323E  0E00               	movlw	0
  5208  003240  6E01               	movwf	?_Delay10KTCYx,c
  5209  003242  5010               	movf	??_xBeeSetATMode& (0+255),w,c
  5210  003244  EC53  F01D         	call	_Delay10KTCYx	;wreg free
  5211                           
  5212                           ;telemetry.c: 55: PORTCbits.RC0 = 0;
  5213  003248  9082               	bcf	3970,0,c	;volatile
  5214                           
  5215                           ;telemetry.c: 56: Delay10KTCYx(0);
  5216  00324A  6E10               	movwf	??_xBeeSetATMode& (0+255),c
  5217  00324C  0E00               	movlw	0
  5218  00324E  6E01               	movwf	?_Delay10KTCYx,c
  5219  003250  5010               	movf	??_xBeeSetATMode& (0+255),w,c
  5220  003252  EC53  F01D         	call	_Delay10KTCYx	;wreg free
  5221  003256  4A11               	infsnz	xBeeSetATMode@i,f,c
  5222  003258  2A12               	incf	xBeeSetATMode@i+1,f,c
  5223  00325A  D7E7               	goto	L1
  5224  00325C                     l7304:
  5225                           
  5226                           ;telemetry.c: 57: }
  5227                           ;telemetry.c: 59: for(i = 0; i < 3; ++i){
  5228  00325C  0E00               	movlw	0
  5229  00325E  6E12               	movwf	xBeeSetATMode@i+1,c
  5230  003260  0E00               	movlw	0
  5231  003262  6E11               	movwf	xBeeSetATMode@i,c
  5232  003264  5012               	movf	xBeeSetATMode@i+1,w,c
  5233  003266  0A80               	xorlw	128
  5234  003268  0F80               	addlw	-128
  5235  00326A  0E03               	movlw	3
  5236  00326C  B4D8               	btfsc	status,2,c
  5237  00326E  5C11               	subwf	xBeeSetATMode@i,w,c
  5238  003270  B0D8               	btfsc	status,0,c
  5239  003272  D009               	goto	l1379
  5240                           
  5241                           ;telemetry.c: 60: xBeeTxByte(0x2B);
  5242  003274  6E10               	movwf	??_xBeeSetATMode& (0+255),c
  5243  003276  0E2B               	movlw	43
  5244  003278  6E0F               	movwf	?_xBeeTxByte,c
  5245  00327A  5010               	movf	??_xBeeSetATMode& (0+255),w,c
  5246  00327C  EC9A  F01D         	call	_xBeeTxByte	;wreg free
  5247  003280  4A11               	infsnz	xBeeSetATMode@i,f,c
  5248  003282  2A12               	incf	xBeeSetATMode@i+1,f,c
  5249  003284  D7EF               	goto	L2
  5250  003286                     l1379:
  5251  003286  0012               	return	
  5252  003288                     __end_of_xBeeSetATMode:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           intcon	equ	0xFF2
  5259                           intcon2	equ	0xFF1
  5260                           postinc0	equ	0xFEE
  5261                           wreg	equ	0xFE8
  5262                           postinc1	equ	0xFE6
  5263                           postdec1	equ	0xFE5
  5264                           fsr1l	equ	0xFE1
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _openRS232 *****************
  5273 ;; Defined at:
  5274 ;;		line 25 in file "telemetry.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5288 ;;      Params:         0       0       0       0       0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0
  5290 ;;      Temps:          1       0       0       0       0       0       0
  5291 ;;      Totals:         1       0       0       0       0       0       0
  5292 ;;Total ram usage:        1 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    1
  5295 ;; This function calls:
  5296 ;;		_OpenUSART
  5297 ;; This function is called by:
  5298 ;;		_main
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text30
  5303  003A90                     __ptext30:
  5304                           	opt stack 0
  5305  003A90                     _openRS232:
  5306                           	opt stack 29
  5307                           
  5308                           ;telemetry.c: 26: OpenUSART(0b01111111 &
  5309                           ;telemetry.c: 27: 0b11111111 &
  5310                           ;telemetry.c: 28: 0b11111110 &
  5311                           ;telemetry.c: 29: 0b11111101 &
  5312                           ;telemetry.c: 30: 0b11111111 &
  5313                           ;telemetry.c: 31: 0b11111111,
  5314                           ;telemetry.c: 32: 196);
  5315                           
  5316                           ;incstack = 0
  5317                           ;incstack = 0
  5318  003A90  6E04               	movwf	??_openRS232& (0+255),c
  5319  003A92  0E7C               	movlw	124
  5320  003A94  6E01               	movwf	?_OpenUSART,c
  5321  003A96  5004               	movf	??_openRS232& (0+255),w,c
  5322  003A98  0E00               	movlw	0
  5323  003A9A  6E03               	movwf	?_OpenUSART+2,c
  5324  003A9C  0EC4               	movlw	196
  5325  003A9E  6E02               	movwf	?_OpenUSART+1,c
  5326  003AA0  ECA7  F019         	call	_OpenUSART	;wreg free
  5327  003AA4  0012               	return	
  5328  003AA6                     __end_of_openRS232:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           intcon	equ	0xFF2
  5335                           intcon2	equ	0xFF1
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           postinc1	equ	0xFE6
  5339                           postdec1	equ	0xFE5
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _OpenUSART *****************
  5349 ;; Defined at:
  5350 ;;		line 74 in file "USART/uopen.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  config          1    0[COMRAM] unsigned char 
  5353 ;;  spbrg           2    1[COMRAM] unsigned int 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;		None
  5356 ;; Return value:  Size  Location     Type
  5357 ;;		None               void
  5358 ;; Registers used:
  5359 ;;		wreg, status,2
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5365 ;;      Params:         3       0       0       0       0       0       0
  5366 ;;      Locals:         0       0       0       0       0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0
  5368 ;;      Totals:         3       0       0       0       0       0       0
  5369 ;;Total ram usage:        3 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_openRS232
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text31
  5379  00334E                     __ptext31:
  5380                           	opt stack 0
  5381  00334E                     _OpenUSART:
  5382                           	opt stack 29
  5383                           
  5384                           ;uopen.c: 75: TXSTA = 0;
  5385                           
  5386                           ;incstack = 0
  5387                           ;incstack = 0
  5388  00334E  0E00               	movlw	0
  5389  003350  6EAC               	movwf	4012,c	;volatile
  5390                           
  5391                           ;uopen.c: 76: RCSTA = 0;
  5392  003352  0E00               	movlw	0
  5393  003354  6EAB               	movwf	4011,c	;volatile
  5394                           
  5395                           ;uopen.c: 78: if(config&0x01)
  5396  003356  B001               	btfsc	OpenUSART@config,0,c
  5397                           
  5398                           ;uopen.c: 79: TXSTAbits.SYNC = 1;
  5399  003358  88AC               	bsf	4012,4,c	;volatile
  5400                           
  5401                           ;uopen.c: 81: if(config&0x02)
  5402  00335A  A201               	btfss	OpenUSART@config,1,c
  5403  00335C  D002               	goto	l601
  5404                           
  5405                           ;uopen.c: 82: {
  5406                           ;uopen.c: 83: TXSTAbits.TX9 = 1;
  5407  00335E  8CAC               	bsf	4012,6,c	;volatile
  5408                           
  5409                           ;uopen.c: 84: RCSTAbits.RX9 = 1;
  5410  003360  8CAB               	bsf	4011,6,c	;volatile
  5411  003362                     l601:
  5412                           
  5413                           ;uopen.c: 85: }
  5414                           ;uopen.c: 87: if(config&0x04)
  5415  003362  B401               	btfsc	OpenUSART@config,2,c
  5416                           
  5417                           ;uopen.c: 88: TXSTAbits.CSRC = 1;
  5418  003364  8EAC               	bsf	4012,7,c	;volatile
  5419                           
  5420                           ;uopen.c: 90: if(config&0x08)
  5421  003366  A601               	btfss	OpenUSART@config,3,c
  5422  003368  D002               	goto	l603
  5423                           
  5424                           ;uopen.c: 91: RCSTAbits.CREN = 1;
  5425  00336A  88AB               	bsf	4011,4,c	;volatile
  5426  00336C  D001               	goto	l604
  5427  00336E                     l603:
  5428                           
  5429                           ;uopen.c: 92: else
  5430                           ;uopen.c: 93: RCSTAbits.SREN = 1;
  5431  00336E  8AAB               	bsf	4011,5,c	;volatile
  5432  003370                     l604:
  5433                           
  5434                           ;uopen.c: 95: if(config&0x10)
  5435  003370  B801               	btfsc	OpenUSART@config,4,c
  5436                           
  5437                           ;uopen.c: 96: TXSTAbits.BRGH = 1;
  5438  003372  84AC               	bsf	4012,2,c	;volatile
  5439                           
  5440                           ;uopen.c: 98: PIR1bits.TXIF = 0;
  5441  003374  989E               	bcf	3998,4,c	;volatile
  5442                           
  5443                           ;uopen.c: 100: if(config&0x20)
  5444  003376  BA01               	btfsc	OpenUSART@config,5,c
  5445                           
  5446                           ;uopen.c: 101: RCSTAbits.ADEN = 1;
  5447  003378  86AB               	bsf	4011,3,c	;volatile
  5448                           
  5449                           ;uopen.c: 103: if(config&0x40)
  5450  00337A  AC01               	btfss	OpenUSART@config,6,c
  5451  00337C  D002               	goto	l607
  5452                           
  5453                           ;uopen.c: 104: PIE1bits.RCIE = 1;
  5454  00337E  8A9D               	bsf	3997,5,c	;volatile
  5455  003380  D001               	goto	l608
  5456  003382                     l607:
  5457                           
  5458                           ;uopen.c: 105: else
  5459                           ;uopen.c: 106: PIE1bits.RCIE = 0;
  5460  003382  9A9D               	bcf	3997,5,c	;volatile
  5461  003384                     l608:
  5462                           
  5463                           ;uopen.c: 108: PIR1bits.RCIF = 0;
  5464  003384  9A9E               	bcf	3998,5,c	;volatile
  5465                           
  5466                           ;uopen.c: 110: if(config&0x80)
  5467  003386  AE01               	btfss	OpenUSART@config,7,c
  5468  003388  D002               	goto	l609
  5469                           
  5470                           ;uopen.c: 111: PIE1bits.TXIE = 1;
  5471  00338A  889D               	bsf	3997,4,c	;volatile
  5472  00338C  D001               	goto	l610
  5473  00338E                     l609:
  5474                           
  5475                           ;uopen.c: 112: else
  5476                           ;uopen.c: 113: PIE1bits.TXIE = 0;
  5477  00338E  989D               	bcf	3997,4,c	;volatile
  5478  003390                     l610:
  5479                           
  5480                           ;uopen.c: 115: SPBRG = spbrg;
  5481  003390  C002  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5482                           
  5483                           ;uopen.c: 116: SPBRGH = spbrg >> 8;
  5484  003394  5003               	movf	OpenUSART@spbrg+1,w,c
  5485  003396  6EB0               	movwf	4016,c	;volatile
  5486                           
  5487                           ;uopen.c: 118: TXSTAbits.TXEN = 1;
  5488  003398  8AAC               	bsf	4012,5,c	;volatile
  5489                           
  5490                           ;uopen.c: 119: RCSTAbits.SPEN = 1;
  5491  00339A  8EAB               	bsf	4011,7,c	;volatile
  5492                           
  5493                           ;uopen.c: 137: TRISCbits.TRISC6 = 0;TRISCbits.TRISC7 = 1;
  5494  00339C  9C94               	bcf	3988,6,c	;volatile
  5495  00339E  8E94               	bsf	3988,7,c	;volatile
  5496                           
  5497                           ;uopen.c: 138: if(TXSTAbits.SYNC && !TXSTAbits.CSRC)
  5498  0033A0  B8AC               	btfsc	4012,4,c	;volatile
  5499  0033A2  BEAC               	btfsc	4012,7,c	;volatile
  5500  0033A4  D001               	goto	l612
  5501                           
  5502                           ;uopen.c: 139: TRISCbits.TRISC6 = 1;
  5503  0033A6  8C94               	bsf	3988,6,c	;volatile
  5504  0033A8                     l612:
  5505  0033A8  0012               	return	
  5506  0033AA                     __end_of_OpenUSART:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           intcon	equ	0xFF2
  5513                           intcon2	equ	0xFF1
  5514                           postinc0	equ	0xFEE
  5515                           wreg	equ	0xFE8
  5516                           postinc1	equ	0xFE6
  5517                           postdec1	equ	0xFE5
  5518                           fsr1l	equ	0xFE1
  5519                           indf2	equ	0xFDF
  5520                           postinc2	equ	0xFDE
  5521                           postdec2	equ	0xFDD
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _updatePwrData *****************
  5527 ;; Defined at:
  5528 ;;		line 85 in file "power.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  ptr             2   54[COMRAM] PTR struct .
  5531 ;;		 -> powerData(6), 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;		None               void
  5536 ;; Registers used:
  5537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5543 ;;      Params:         2       0       0       0       0       0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0
  5546 ;;      Totals:         2       0       0       0       0       0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    3
  5550 ;; This function calls:
  5551 ;;		_getArrayVoltage
  5552 ;;		_getArrayCurrent
  5553 ;;		_getArrayPower
  5554 ;; This function is called by:
  5555 ;;		_main
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text32
  5560  003152                     __ptext32:
  5561                           	opt stack 0
  5562  003152                     _updatePwrData:
  5563                           	opt stack 27
  5564                           
  5565                           ;power.c: 87: ptr->voltage = getArrayVoltage();
  5566                           
  5567                           ;incstack = 0
  5568                           ;incstack = 0
  5569  003152  ECDF  F014         	call	_getArrayVoltage	;wreg free
  5570  003156  C037  FFD9         	movff	updatePwrData@ptr,fsr2l
  5571  00315A  C038  FFDA         	movff	updatePwrData@ptr+1,fsr2h
  5572  00315E  C02E  FFDE         	movff	?_getArrayVoltage,postinc2
  5573  003162  C02F  FFDD         	movff	?_getArrayVoltage+1,postdec2
  5574                           
  5575                           ;power.c: 88: ptr->current = getArrayCurrent();
  5576  003166  EC86  F014         	call	_getArrayCurrent	;wreg free
  5577  00316A  EE20 F002          	lfsr	2,2
  5578  00316E  5037               	movf	updatePwrData@ptr,w,c
  5579  003170  26D9               	addwf	fsr2l,f,c
  5580  003172  5038               	movf	updatePwrData@ptr+1,w,c
  5581  003174  22DA               	addwfc	fsr2h,f,c
  5582  003176  C02E  FFDE         	movff	?_getArrayCurrent,postinc2
  5583  00317A  C02F  FFDD         	movff	?_getArrayCurrent+1,postdec2
  5584                           
  5585                           ;power.c: 89: ptr->power = getArrayPower(ptr->voltage,ptr->current);
  5586  00317E  C037  FFD9         	movff	updatePwrData@ptr,fsr2l
  5587  003182  C038  FFDA         	movff	updatePwrData@ptr+1,fsr2h
  5588  003186  CFDE F02E          	movff	postinc2,?_getArrayPower
  5589  00318A  CFDD F02F          	movff	postdec2,?_getArrayPower+1
  5590  00318E  EE20 F002          	lfsr	2,2
  5591  003192  5037               	movf	updatePwrData@ptr,w,c
  5592  003194  26D9               	addwf	fsr2l,f,c
  5593  003196  5038               	movf	updatePwrData@ptr+1,w,c
  5594  003198  22DA               	addwfc	fsr2h,f,c
  5595  00319A  CFDE F030          	movff	postinc2,?_getArrayPower+2
  5596  00319E  CFDD F031          	movff	postdec2,?_getArrayPower+3
  5597  0031A2  ECC2  F017         	call	_getArrayPower	;wreg free
  5598  0031A6  EE20 F004          	lfsr	2,4
  5599  0031AA  5037               	movf	updatePwrData@ptr,w,c
  5600  0031AC  26D9               	addwf	fsr2l,f,c
  5601  0031AE  5038               	movf	updatePwrData@ptr+1,w,c
  5602  0031B0  22DA               	addwfc	fsr2h,f,c
  5603  0031B2  C02E  FFDE         	movff	?_getArrayPower,postinc2
  5604  0031B6  C02F  FFDD         	movff	?_getArrayPower+1,postdec2
  5605  0031BA  0012               	return	
  5606  0031BC                     __end_of_updatePwrData:
  5607                           	opt stack 0
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           postinc1	equ	0xFE6
  5617                           postdec1	equ	0xFE5
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           fsr2h	equ	0xFDA
  5623                           fsr2l	equ	0xFD9
  5624                           status	equ	0xFD8
  5625                           
  5626 ;; *************** function _getArrayPower *****************
  5627 ;; Defined at:
  5628 ;;		line 67 in file "power.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  voltage         2   45[COMRAM] int 
  5631 ;;  current         2   47[COMRAM] int 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  temp            3   49[COMRAM] float 
  5634 ;;  power           2   52[COMRAM] int 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  2   45[COMRAM] int 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5644 ;;      Params:         4       0       0       0       0       0       0
  5645 ;;      Locals:         5       0       0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0
  5647 ;;      Totals:         9       0       0       0       0       0       0
  5648 ;;Total ram usage:        9 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    2
  5651 ;; This function calls:
  5652 ;;		___ftdiv
  5653 ;;		___ftmul
  5654 ;;		___awtoft
  5655 ;;		___fttol
  5656 ;; This function is called by:
  5657 ;;		_updatePwrData
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text33
  5662  002F84                     __ptext33:
  5663                           	opt stack 0
  5664  002F84                     _getArrayPower:
  5665                           	opt stack 27
  5666                           
  5667                           ;power.c: 68: int power;
  5668                           ;power.c: 69: float temp;
  5669                           ;power.c: 71: temp = ((float)current) / 1000.0;
  5670                           
  5671                           ;incstack = 0
  5672                           ;incstack = 0
  5673  002F84  C030  F018         	movff	getArrayPower@current,?___awtoft
  5674  002F88  C031  F019         	movff	getArrayPower@current+1,?___awtoft+1
  5675  002F8C  EC4F  F01B         	call	___awtoft	;wreg free
  5676  002F90  C01A  F01F         	movff	?___awtoft+2,?___ftdiv+2
  5677  002F94  C019  F01E         	movff	?___awtoft+1,?___ftdiv+1
  5678  002F98  C018  F01D         	movff	?___awtoft,?___ftdiv
  5679  002F9C  0E00               	movlw	0
  5680  002F9E  6E20               	movwf	?___ftdiv+3,c
  5681  002FA0  0E7A               	movlw	122
  5682  002FA2  6E21               	movwf	?___ftdiv+4,c
  5683  002FA4  0E44               	movlw	68
  5684  002FA6  6E22               	movwf	?___ftdiv+5,c
  5685  002FA8  EC7C  F011         	call	___ftdiv	;wreg free
  5686  002FAC  C01F  F034         	movff	?___ftdiv+2,getArrayPower@temp+2
  5687  002FB0  C01E  F033         	movff	?___ftdiv+1,getArrayPower@temp+1
  5688  002FB4  C01D  F032         	movff	?___ftdiv,getArrayPower@temp
  5689                           
  5690                           ;power.c: 72: power = (int)(voltage * temp);
  5691  002FB8  C032  F020         	movff	getArrayPower@temp,?___ftmul+3
  5692  002FBC  C033  F021         	movff	getArrayPower@temp+1,?___ftmul+4
  5693  002FC0  C034  F022         	movff	getArrayPower@temp+2,?___ftmul+5
  5694  002FC4  C02E  F018         	movff	getArrayPower@voltage,?___awtoft
  5695  002FC8  C02F  F019         	movff	getArrayPower@voltage+1,?___awtoft+1
  5696  002FCC  EC4F  F01B         	call	___awtoft	;wreg free
  5697  002FD0  C01A  F01F         	movff	?___awtoft+2,?___ftmul+2
  5698  002FD4  C019  F01E         	movff	?___awtoft+1,?___ftmul+1
  5699  002FD8  C018  F01D         	movff	?___awtoft,?___ftmul
  5700  002FDC  ECF4  F010         	call	___ftmul	;wreg free
  5701  002FE0  C01F  F00B         	movff	?___ftmul+2,?___fttol+2
  5702  002FE4  C01E  F00A         	movff	?___ftmul+1,?___fttol+1
  5703  002FE8  C01D  F009         	movff	?___ftmul,?___fttol
  5704  002FEC  ECE5  F012         	call	___fttol	;wreg free
  5705  002FF0  C009  F035         	movff	?___fttol,getArrayPower@power
  5706  002FF4  C00A  F036         	movff	?___fttol+1,getArrayPower@power+1
  5707                           
  5708                           ;power.c: 73: return power;
  5709  002FF8  C035  F02E         	movff	getArrayPower@power,?_getArrayPower
  5710  002FFC  C036  F02F         	movff	getArrayPower@power+1,?_getArrayPower+1
  5711  003000  0012               	return	
  5712  003002                     __end_of_getArrayPower:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           intcon	equ	0xFF2
  5719                           intcon2	equ	0xFF1
  5720                           postinc0	equ	0xFEE
  5721                           wreg	equ	0xFE8
  5722                           postinc1	equ	0xFE6
  5723                           postdec1	equ	0xFE5
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function ___ftdiv *****************
  5733 ;; Defined at:
  5734 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftdiv.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  f1              3   28[COMRAM] float 
  5737 ;;  f2              3   31[COMRAM] float 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  f3              3   40[COMRAM] float 
  5740 ;;  sign            1   44[COMRAM] unsigned char 
  5741 ;;  exp             1   43[COMRAM] unsigned char 
  5742 ;;  cntr            1   39[COMRAM] unsigned char 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  3   28[COMRAM] float 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5752 ;;      Params:         6       0       0       0       0       0       0
  5753 ;;      Locals:         6       0       0       0       0       0       0
  5754 ;;      Temps:          5       0       0       0       0       0       0
  5755 ;;      Totals:        17       0       0       0       0       0       0
  5756 ;;Total ram usage:       17 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    1
  5759 ;; This function calls:
  5760 ;;		___ftpack
  5761 ;; This function is called by:
  5762 ;;		_accelGetRoll
  5763 ;;		_baroCalibrate
  5764 ;;		_getArrayPower
  5765 ;;		_asin
  5766 ;;		_atan
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text34
  5771  0022F8                     __ptext34:
  5772                           	opt stack 0
  5773  0022F8                     ___ftdiv:
  5774                           	opt stack 27
  5775                           
  5776                           ;incstack = 0
  5777                           ;incstack = 0
  5778  0022F8  0E0F               	movlw	15
  5779  0022FA  6E23               	movwf	??___ftdiv& (0+255),c
  5780  0022FC  C01D  F024         	movff	___ftdiv@f1,??___ftdiv+1
  5781  002300  C01E  F025         	movff	___ftdiv@f1+1,??___ftdiv+2
  5782  002304  C01F  F026         	movff	___ftdiv@f1+2,??___ftdiv+3
  5783  002308  2823               	incf	??___ftdiv,w,c
  5784  00230A  6E27               	movwf	(??___ftdiv+4)& (0+255),c
  5785  00230C  D004               	goto	u6750
  5786  00230E                     u6755:
  5787  00230E  90D8               	bcf	status,0,c
  5788  002310  3226               	rrcf	??___ftdiv+3,f,c
  5789  002312  3225               	rrcf	??___ftdiv+2,f,c
  5790  002314  3224               	rrcf	??___ftdiv+1,f,c
  5791  002316                     u6750:
  5792  002316  2E27               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5793  002318  D7FA               	goto	u6755
  5794  00231A  5024               	movf	??___ftdiv+1,w,c
  5795  00231C  6E2C               	movwf	___ftdiv@exp,c
  5796  00231E  662C               	tstfsz	___ftdiv@exp& (0+255),c
  5797  002320  D001               	goto	l7496
  5798  002322  D015               	goto	u6780
  5799  002324                     l7496:
  5800  002324  0E0F               	movlw	15
  5801  002326  6E23               	movwf	??___ftdiv& (0+255),c
  5802  002328  C020  F024         	movff	___ftdiv@f2,??___ftdiv+1
  5803  00232C  C021  F025         	movff	___ftdiv@f2+1,??___ftdiv+2
  5804  002330  C022  F026         	movff	___ftdiv@f2+2,??___ftdiv+3
  5805  002334  2823               	incf	??___ftdiv,w,c
  5806  002336  6E27               	movwf	(??___ftdiv+4)& (0+255),c
  5807  002338  D004               	goto	u6770
  5808  00233A                     u6775:
  5809  00233A  90D8               	bcf	status,0,c
  5810  00233C  3226               	rrcf	??___ftdiv+3,f,c
  5811  00233E  3225               	rrcf	??___ftdiv+2,f,c
  5812  002340  3224               	rrcf	??___ftdiv+1,f,c
  5813  002342                     u6770:
  5814  002342  2E27               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5815  002344  D7FA               	goto	u6775
  5816  002346  5024               	movf	??___ftdiv+1,w,c
  5817  002348  6E2D               	movwf	___ftdiv@sign,c
  5818  00234A  662D               	tstfsz	___ftdiv@sign& (0+255),c
  5819  00234C  D007               	goto	l7502
  5820  00234E                     u6780:
  5821  00234E  0E00               	movlw	0
  5822  002350  6E1D               	movwf	?___ftdiv,c
  5823  002352  0E00               	movlw	0
  5824  002354  6E1E               	movwf	?___ftdiv+1,c
  5825  002356  0E00               	movlw	0
  5826  002358  6E1F               	movwf	?___ftdiv+2,c
  5827  00235A  D04C               	goto	l1882
  5828  00235C                     l7502:
  5829  00235C  0E00               	movlw	0
  5830  00235E  6E29               	movwf	___ftdiv@f3,c
  5831  002360  0E00               	movlw	0
  5832  002362  6E2A               	movwf	___ftdiv@f3+1,c
  5833  002364  0E00               	movlw	0
  5834  002366  6E2B               	movwf	___ftdiv@f3+2,c
  5835  002368  502D               	movf	___ftdiv@sign,w,c
  5836  00236A  0F89               	addlw	137
  5837  00236C  5E2C               	subwf	___ftdiv@exp,f,c
  5838  00236E  C01F  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  5839  002372  5022               	movf	(___ftdiv@f2+2)& (0+255),w,c
  5840  002374  1A2D               	xorwf	___ftdiv@sign,f,c
  5841  002376  0E80               	movlw	128
  5842  002378  162D               	andwf	___ftdiv@sign,f,c
  5843  00237A  8E1E               	bsf	___ftdiv@f1+1,7,c
  5844  00237C  0EFF               	movlw	255
  5845  00237E  161D               	andwf	___ftdiv@f1,f,c
  5846  002380  0EFF               	movlw	255
  5847  002382  161E               	andwf	___ftdiv@f1+1,f,c
  5848  002384  0E00               	movlw	0
  5849  002386  161F               	andwf	___ftdiv@f1+2,f,c
  5850  002388  8E21               	bsf	___ftdiv@f2+1,7,c
  5851  00238A  0EFF               	movlw	255
  5852  00238C  1620               	andwf	___ftdiv@f2,f,c
  5853  00238E  0EFF               	movlw	255
  5854  002390  1621               	andwf	___ftdiv@f2+1,f,c
  5855  002392  0E00               	movlw	0
  5856  002394  1622               	andwf	___ftdiv@f2+2,f,c
  5857  002396  6E23               	movwf	??___ftdiv& (0+255),c
  5858  002398  0E18               	movlw	24
  5859  00239A  6E28               	movwf	___ftdiv@cntr,c
  5860  00239C  5023               	movf	??___ftdiv& (0+255),w,c
  5861  00239E                     l1884:
  5862  00239E  90D8               	bcf	status,0,c
  5863  0023A0  3629               	rlcf	___ftdiv@f3,f,c
  5864  0023A2  362A               	rlcf	___ftdiv@f3+1,f,c
  5865  0023A4  362B               	rlcf	___ftdiv@f3+2,f,c
  5866  0023A6  5020               	movf	___ftdiv@f2,w,c
  5867  0023A8  5C1D               	subwf	___ftdiv@f1,w,c
  5868  0023AA  5021               	movf	___ftdiv@f2+1,w,c
  5869  0023AC  581E               	subwfb	___ftdiv@f1+1,w,c
  5870  0023AE  5022               	movf	___ftdiv@f2+2,w,c
  5871  0023B0  581F               	subwfb	___ftdiv@f1+2,w,c
  5872  0023B2  A0D8               	btfss	status,0,c
  5873  0023B4  D007               	goto	l1885
  5874  0023B6  5020               	movf	___ftdiv@f2,w,c
  5875  0023B8  5E1D               	subwf	___ftdiv@f1,f,c
  5876  0023BA  5021               	movf	___ftdiv@f2+1,w,c
  5877  0023BC  5A1E               	subwfb	___ftdiv@f1+1,f,c
  5878  0023BE  5022               	movf	___ftdiv@f2+2,w,c
  5879  0023C0  5A1F               	subwfb	___ftdiv@f1+2,f,c
  5880  0023C2  8029               	bsf	___ftdiv@f3,0,c
  5881  0023C4                     l1885:
  5882  0023C4  90D8               	bcf	status,0,c
  5883  0023C6  361D               	rlcf	___ftdiv@f1,f,c
  5884  0023C8  361E               	rlcf	___ftdiv@f1+1,f,c
  5885  0023CA  361F               	rlcf	___ftdiv@f1+2,f,c
  5886  0023CC  2E28               	decfsz	___ftdiv@cntr,f,c
  5887  0023CE  D7E7               	goto	l1884
  5888  0023D0  C029  F001         	movff	___ftdiv@f3,?___ftpack
  5889  0023D4  C02A  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  5890  0023D8  C02B  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  5891  0023DC  C02C  F004         	movff	___ftdiv@exp,?___ftpack+3
  5892  0023E0  C02D  F005         	movff	___ftdiv@sign,?___ftpack+4
  5893  0023E4  EC2A  F014         	call	___ftpack	;wreg free
  5894  0023E8  C003  F01F         	movff	?___ftpack+2,?___ftdiv+2
  5895  0023EC  C002  F01E         	movff	?___ftpack+1,?___ftdiv+1
  5896  0023F0  C001  F01D         	movff	?___ftpack,?___ftdiv
  5897  0023F4                     l1882:
  5898  0023F4  0012               	return	
  5899  0023F6                     __end_of___ftdiv:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           intcon	equ	0xFF2
  5906                           intcon2	equ	0xFF1
  5907                           postinc0	equ	0xFEE
  5908                           wreg	equ	0xFE8
  5909                           postinc1	equ	0xFE6
  5910                           postdec1	equ	0xFE5
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function _getArrayCurrent *****************
  5920 ;; Defined at:
  5921 ;;		line 46 in file "power.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;		None
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  average         2   50[COMRAM] int 
  5926 ;;  i               2   48[COMRAM] int 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  2   45[COMRAM] int 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5936 ;;      Params:         2       0       0       0       0       0       0
  5937 ;;      Locals:         4       0       0       0       0       0       0
  5938 ;;      Temps:          1       0       0       0       0       0       0
  5939 ;;      Totals:         7       0       0       0       0       0       0
  5940 ;;Total ram usage:        7 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    2
  5943 ;; This function calls:
  5944 ;;		_BusyADC
  5945 ;;		_ConvertADC
  5946 ;;		_ReadADC
  5947 ;;		_SetChanADC
  5948 ;;		___ftmul
  5949 ;;		___awdiv
  5950 ;;		___awtoft
  5951 ;;		___fttol
  5952 ;; This function is called by:
  5953 ;;		_updatePwrData
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text35
  5958  00290C                     __ptext35:
  5959                           	opt stack 0
  5960  00290C                     _getArrayCurrent:
  5961                           	opt stack 27
  5962                           
  5963                           ;power.c: 47: int i;
  5964                           ;power.c: 48: int average = 0;
  5965                           
  5966                           ;incstack = 0
  5967                           ;incstack = 0
  5968  00290C  0E00               	movlw	0
  5969  00290E  6E34               	movwf	getArrayCurrent@average+1,c
  5970  002910  0E00               	movlw	0
  5971  002912  6E33               	movwf	getArrayCurrent@average,c
  5972                           
  5973                           ;power.c: 50: SetChanADC(0b00001100);
  5974  002914  6E30               	movwf	??_getArrayCurrent& (0+255),c
  5975  002916  0E0C               	movlw	12
  5976  002918  6E01               	movwf	?_SetChanADC,c
  5977  00291A  5030               	movf	??_getArrayCurrent& (0+255),w,c
  5978  00291C  EC5E  F01D         	call	_SetChanADC	;wreg free
  5979                           
  5980                           ;power.c: 52: for (i = 0; i < 4; ++i){
  5981  002920  0E00               	movlw	0
  5982  002922  6E32               	movwf	getArrayCurrent@i+1,c
  5983  002924  0E00               	movlw	0
  5984  002926  6E31               	movwf	getArrayCurrent@i,c
  5985  002928  5032               	movf	getArrayCurrent@i+1,w,c
  5986  00292A  0A80               	xorlw	128
  5987  00292C  0F80               	addlw	-128
  5988  00292E  0E04               	movlw	4
  5989  002930  B4D8               	btfsc	status,2,c
  5990  002932  5C31               	subwf	getArrayCurrent@i,w,c
  5991  002934  B0D8               	btfsc	status,0,c
  5992  002936  D010               	goto	l7482
  5993                           
  5994                           ;power.c: 53: ConvertADC();
  5995  002938  ECBA  F01D         	call	_ConvertADC	;wreg free
  5996  00293C                     l7474:
  5997  00293C  ECB7  F01D         	call	_BusyADC	;wreg free
  5998  002940  0900               	iorlw	0
  5999  002942  A4D8               	btfss	status,2,c
  6000  002944  D7FB               	goto	l7474
  6001                           
  6002                           ;power.c: 55: average += ReadADC();
  6003  002946  ECB2  F01D         	call	_ReadADC	;wreg free
  6004  00294A  5001               	movf	?_ReadADC,w,c
  6005  00294C  2633               	addwf	getArrayCurrent@average,f,c
  6006  00294E  5002               	movf	?_ReadADC+1,w,c
  6007  002950  2234               	addwfc	getArrayCurrent@average+1,f,c
  6008  002952  4A31               	infsnz	getArrayCurrent@i,f,c
  6009  002954  2A32               	incf	getArrayCurrent@i+1,f,c
  6010  002956  D7E8               	goto	L3
  6011  002958                     l7482:
  6012                           
  6013                           ;power.c: 56: }
  6014                           ;power.c: 58: average /= 4;
  6015  002958  C033  F001         	movff	getArrayCurrent@average,?___awdiv
  6016  00295C  C034  F002         	movff	getArrayCurrent@average+1,?___awdiv+1
  6017  002960  0E00               	movlw	0
  6018  002962  6E04               	movwf	?___awdiv+3,c
  6019  002964  0E04               	movlw	4
  6020  002966  6E03               	movwf	?___awdiv+2,c
  6021  002968  EC67  F016         	call	___awdiv	;wreg free
  6022  00296C  C001  F033         	movff	?___awdiv,getArrayCurrent@average
  6023  002970  C002  F034         	movff	?___awdiv+1,getArrayCurrent@average+1
  6024                           
  6025                           ;power.c: 59: average =(int)(average * 2.441);
  6026  002974  0E39               	movlw	57
  6027  002976  6E20               	movwf	?___ftmul+3,c
  6028  002978  0E1C               	movlw	28
  6029  00297A  6E21               	movwf	?___ftmul+4,c
  6030  00297C  0E40               	movlw	64
  6031  00297E  6E22               	movwf	?___ftmul+5,c
  6032  002980  C033  F018         	movff	getArrayCurrent@average,?___awtoft
  6033  002984  C034  F019         	movff	getArrayCurrent@average+1,?___awtoft+1
  6034  002988  EC4F  F01B         	call	___awtoft	;wreg free
  6035  00298C  C01A  F01F         	movff	?___awtoft+2,?___ftmul+2
  6036  002990  C019  F01E         	movff	?___awtoft+1,?___ftmul+1
  6037  002994  C018  F01D         	movff	?___awtoft,?___ftmul
  6038  002998  ECF4  F010         	call	___ftmul	;wreg free
  6039  00299C  C01F  F00B         	movff	?___ftmul+2,?___fttol+2
  6040  0029A0  C01E  F00A         	movff	?___ftmul+1,?___fttol+1
  6041  0029A4  C01D  F009         	movff	?___ftmul,?___fttol
  6042  0029A8  ECE5  F012         	call	___fttol	;wreg free
  6043  0029AC  C009  F033         	movff	?___fttol,getArrayCurrent@average
  6044  0029B0  C00A  F034         	movff	?___fttol+1,getArrayCurrent@average+1
  6045                           
  6046                           ;power.c: 60: return average;
  6047  0029B4  C033  F02E         	movff	getArrayCurrent@average,?_getArrayCurrent
  6048  0029B8  C034  F02F         	movff	getArrayCurrent@average+1,?_getArrayCurrent+1
  6049  0029BC  0012               	return	
  6050  0029BE                     __end_of_getArrayCurrent:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           intcon	equ	0xFF2
  6057                           intcon2	equ	0xFF1
  6058                           postinc0	equ	0xFEE
  6059                           wreg	equ	0xFE8
  6060                           postinc1	equ	0xFE6
  6061                           postdec1	equ	0xFE5
  6062                           fsr1l	equ	0xFE1
  6063                           indf2	equ	0xFDF
  6064                           postinc2	equ	0xFDE
  6065                           postdec2	equ	0xFDD
  6066                           fsr2h	equ	0xFDA
  6067                           fsr2l	equ	0xFD9
  6068                           status	equ	0xFD8
  6069                           
  6070 ;; *************** function ___awtoft *****************
  6071 ;; Defined at:
  6072 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\awtoft.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  c               2   23[COMRAM] int 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  sign            1   27[COMRAM] unsigned char 
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  3   23[COMRAM] float 
  6079 ;; Registers used:
  6080 ;;		wreg, status,2, status,0, cstack
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6086 ;;      Params:         3       0       0       0       0       0       0
  6087 ;;      Locals:         1       0       0       0       0       0       0
  6088 ;;      Temps:          1       0       0       0       0       0       0
  6089 ;;      Totals:         5       0       0       0       0       0       0
  6090 ;;Total ram usage:        5 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:    1
  6093 ;; This function calls:
  6094 ;;		___ftpack
  6095 ;; This function is called by:
  6096 ;;		_accelGetRoll
  6097 ;;		_getArrayVoltage
  6098 ;;		_getArrayCurrent
  6099 ;;		_getArrayPower
  6100 ;;		_updateSensorPData
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text36
  6105  00369E                     __ptext36:
  6106                           	opt stack 0
  6107  00369E                     ___awtoft:
  6108                           	opt stack 27
  6109                           
  6110                           ;incstack = 0
  6111                           ;incstack = 0
  6112  00369E  6E1B               	movwf	??___awtoft& (0+255),c
  6113  0036A0  0E00               	movlw	0
  6114  0036A2  6E1C               	movwf	___awtoft@sign,c
  6115  0036A4  501B               	movf	??___awtoft& (0+255),w,c
  6116  0036A6  AE19               	btfss	___awtoft@c+1,7,c
  6117  0036A8  D008               	goto	l7382
  6118  0036AA  6C18               	negf	___awtoft@c,c
  6119  0036AC  1E19               	comf	___awtoft@c+1,f,c
  6120  0036AE  B0D8               	btfsc	status,0,c
  6121  0036B0  2A19               	incf	___awtoft@c+1,f,c
  6122  0036B2  6E1B               	movwf	??___awtoft& (0+255),c
  6123  0036B4  0E01               	movlw	1
  6124  0036B6  6E1C               	movwf	___awtoft@sign,c
  6125  0036B8  501B               	movf	??___awtoft& (0+255),w,c
  6126  0036BA                     l7382:
  6127  0036BA  C018  F001         	movff	___awtoft@c,?___ftpack
  6128  0036BE  C019  F002         	movff	___awtoft@c+1,?___ftpack+1
  6129  0036C2  6A03               	clrf	?___ftpack+2,c
  6130  0036C4  6E1B               	movwf	??___awtoft& (0+255),c
  6131  0036C6  0E8E               	movlw	142
  6132  0036C8  6E04               	movwf	?___ftpack+3,c
  6133  0036CA  501B               	movf	??___awtoft& (0+255),w,c
  6134  0036CC  C01C  F005         	movff	___awtoft@sign,?___ftpack+4
  6135  0036D0  EC2A  F014         	call	___ftpack	;wreg free
  6136  0036D4  C003  F01A         	movff	?___ftpack+2,?___awtoft+2
  6137  0036D8  C002  F019         	movff	?___ftpack+1,?___awtoft+1
  6138  0036DC  C001  F018         	movff	?___ftpack,?___awtoft
  6139  0036E0  0012               	return	
  6140  0036E2                     __end_of___awtoft:
  6141                           	opt stack 0
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           intcon	equ	0xFF2
  6147                           intcon2	equ	0xFF1
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postinc1	equ	0xFE6
  6151                           postdec1	equ	0xFE5
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _getArrayVoltage *****************
  6161 ;; Defined at:
  6162 ;;		line 25 in file "power.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  average         2   50[COMRAM] int 
  6167 ;;  i               2   48[COMRAM] int 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  2   45[COMRAM] int 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6177 ;;      Params:         2       0       0       0       0       0       0
  6178 ;;      Locals:         4       0       0       0       0       0       0
  6179 ;;      Temps:          1       0       0       0       0       0       0
  6180 ;;      Totals:         7       0       0       0       0       0       0
  6181 ;;Total ram usage:        7 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    2
  6184 ;; This function calls:
  6185 ;;		_BusyADC
  6186 ;;		_ConvertADC
  6187 ;;		_ReadADC
  6188 ;;		_SetChanADC
  6189 ;;		___ftmul
  6190 ;;		___awdiv
  6191 ;;		___awtoft
  6192 ;;		___fttol
  6193 ;; This function is called by:
  6194 ;;		_updatePwrData
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text37
  6199  0029BE                     __ptext37:
  6200                           	opt stack 0
  6201  0029BE                     _getArrayVoltage:
  6202                           	opt stack 27
  6203                           
  6204                           ;power.c: 26: int i;
  6205                           ;power.c: 27: int average = 0;
  6206                           
  6207                           ;incstack = 0
  6208                           ;incstack = 0
  6209  0029BE  0E00               	movlw	0
  6210  0029C0  6E34               	movwf	getArrayVoltage@average+1,c
  6211  0029C2  0E00               	movlw	0
  6212  0029C4  6E33               	movwf	getArrayVoltage@average,c
  6213                           
  6214                           ;power.c: 29: SetChanADC(0b00001000);
  6215  0029C6  6E30               	movwf	??_getArrayVoltage& (0+255),c
  6216  0029C8  0E08               	movlw	8
  6217  0029CA  6E01               	movwf	?_SetChanADC,c
  6218  0029CC  5030               	movf	??_getArrayVoltage& (0+255),w,c
  6219  0029CE  EC5E  F01D         	call	_SetChanADC	;wreg free
  6220                           
  6221                           ;power.c: 31: for (i = 0; i < 4; ++i){
  6222  0029D2  0E00               	movlw	0
  6223  0029D4  6E32               	movwf	getArrayVoltage@i+1,c
  6224  0029D6  0E00               	movlw	0
  6225  0029D8  6E31               	movwf	getArrayVoltage@i,c
  6226  0029DA  5032               	movf	getArrayVoltage@i+1,w,c
  6227  0029DC  0A80               	xorlw	128
  6228  0029DE  0F80               	addlw	-128
  6229  0029E0  0E04               	movlw	4
  6230  0029E2  B4D8               	btfsc	status,2,c
  6231  0029E4  5C31               	subwf	getArrayVoltage@i,w,c
  6232  0029E6  B0D8               	btfsc	status,0,c
  6233  0029E8  D010               	goto	l7284
  6234                           
  6235                           ;power.c: 32: ConvertADC();
  6236  0029EA  ECBA  F01D         	call	_ConvertADC	;wreg free
  6237  0029EE                     l7276:
  6238  0029EE  ECB7  F01D         	call	_BusyADC	;wreg free
  6239  0029F2  0900               	iorlw	0
  6240  0029F4  A4D8               	btfss	status,2,c
  6241  0029F6  D7FB               	goto	l7276
  6242                           
  6243                           ;power.c: 34: average += ReadADC();
  6244  0029F8  ECB2  F01D         	call	_ReadADC	;wreg free
  6245  0029FC  5001               	movf	?_ReadADC,w,c
  6246  0029FE  2633               	addwf	getArrayVoltage@average,f,c
  6247  002A00  5002               	movf	?_ReadADC+1,w,c
  6248  002A02  2234               	addwfc	getArrayVoltage@average+1,f,c
  6249  002A04  4A31               	infsnz	getArrayVoltage@i,f,c
  6250  002A06  2A32               	incf	getArrayVoltage@i+1,f,c
  6251  002A08  D7E8               	goto	L4
  6252  002A0A                     l7284:
  6253                           
  6254                           ;power.c: 35: }
  6255                           ;power.c: 37: average /= 4;
  6256  002A0A  C033  F001         	movff	getArrayVoltage@average,?___awdiv
  6257  002A0E  C034  F002         	movff	getArrayVoltage@average+1,?___awdiv+1
  6258  002A12  0E00               	movlw	0
  6259  002A14  6E04               	movwf	?___awdiv+3,c
  6260  002A16  0E04               	movlw	4
  6261  002A18  6E03               	movwf	?___awdiv+2,c
  6262  002A1A  EC67  F016         	call	___awdiv	;wreg free
  6263  002A1E  C001  F033         	movff	?___awdiv,getArrayVoltage@average
  6264  002A22  C002  F034         	movff	?___awdiv+1,getArrayVoltage@average+1
  6265                           
  6266                           ;power.c: 38: average *= 19.34;
  6267  002A26  0EB8               	movlw	184
  6268  002A28  6E20               	movwf	?___ftmul+3,c
  6269  002A2A  0E9A               	movlw	154
  6270  002A2C  6E21               	movwf	?___ftmul+4,c
  6271  002A2E  0E41               	movlw	65
  6272  002A30  6E22               	movwf	?___ftmul+5,c
  6273  002A32  C033  F018         	movff	getArrayVoltage@average,?___awtoft
  6274  002A36  C034  F019         	movff	getArrayVoltage@average+1,?___awtoft+1
  6275  002A3A  EC4F  F01B         	call	___awtoft	;wreg free
  6276  002A3E  C01A  F01F         	movff	?___awtoft+2,?___ftmul+2
  6277  002A42  C019  F01E         	movff	?___awtoft+1,?___ftmul+1
  6278  002A46  C018  F01D         	movff	?___awtoft,?___ftmul
  6279  002A4A  ECF4  F010         	call	___ftmul	;wreg free
  6280  002A4E  C01F  F00B         	movff	?___ftmul+2,?___fttol+2
  6281  002A52  C01E  F00A         	movff	?___ftmul+1,?___fttol+1
  6282  002A56  C01D  F009         	movff	?___ftmul,?___fttol
  6283  002A5A  ECE5  F012         	call	___fttol	;wreg free
  6284  002A5E  C009  F033         	movff	?___fttol,getArrayVoltage@average
  6285  002A62  C00A  F034         	movff	?___fttol+1,getArrayVoltage@average+1
  6286                           
  6287                           ;power.c: 39: return average;
  6288  002A66  C033  F02E         	movff	getArrayVoltage@average,?_getArrayVoltage
  6289  002A6A  C034  F02F         	movff	getArrayVoltage@average+1,?_getArrayVoltage+1
  6290  002A6E  0012               	return	
  6291  002A70                     __end_of_getArrayVoltage:
  6292                           	opt stack 0
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           intcon	equ	0xFF2
  6298                           intcon2	equ	0xFF1
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           postinc1	equ	0xFE6
  6302                           postdec1	equ	0xFE5
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           postdec2	equ	0xFDD
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function _gyroSelfTest *****************
  6312 ;; Defined at:
  6313 ;;		line 69 in file "gyroscope.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  i               2   22[COMRAM] int 
  6318 ;;  new             2   20[COMRAM] int 
  6319 ;;  base            2   18[COMRAM] int 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;		None               void
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6329 ;;      Params:         0       0       0       0       0       0       0
  6330 ;;      Locals:         6       0       0       0       0       0       0
  6331 ;;      Temps:          1       0       0       0       0       0       0
  6332 ;;      Totals:         7       0       0       0       0       0       0
  6333 ;;Total ram usage:        7 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    3
  6336 ;; This function calls:
  6337 ;;		_Delay10KTCYx
  6338 ;;		_transmitError
  6339 ;;		_morseCode
  6340 ;;		_gyroGetADC
  6341 ;; This function is called by:
  6342 ;;		_main
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text38
  6347  002B0E                     __ptext38:
  6348                           	opt stack 0
  6349  002B0E                     _gyroSelfTest:
  6350                           	opt stack 27
  6351                           
  6352                           ;gyroscope.c: 70: int i;
  6353                           ;gyroscope.c: 71: int base = gyroGetADC() + 90 - 30;
  6354                           
  6355                           ;incstack = 0
  6356                           ;incstack = 0
  6357  002B0E  EC01  F018         	call	_gyroGetADC	;wreg free
  6358  002B12  0E3C               	movlw	60
  6359  002B14  240A               	addwf	?_gyroGetADC,w,c
  6360  002B16  6E13               	movwf	gyroSelfTest@base,c
  6361  002B18  0E00               	movlw	0
  6362  002B1A  200B               	addwfc	?_gyroGetADC+1,w,c
  6363  002B1C  6E14               	movwf	gyroSelfTest@base+1,c
  6364                           
  6365                           ;gyroscope.c: 72: int new = 0;
  6366  002B1E  0E00               	movlw	0
  6367  002B20  6E16               	movwf	gyroSelfTest@new+1,c
  6368  002B22  0E00               	movlw	0
  6369  002B24  6E15               	movwf	gyroSelfTest@new,c
  6370                           
  6371                           ;gyroscope.c: 74: PORTBbits.RB6 = 1;
  6372  002B26  8C81               	bsf	3969,6,c	;volatile
  6373                           
  6374                           ;gyroscope.c: 76: for (i = 0; i < 4; ++i){
  6375  002B28  0E00               	movlw	0
  6376  002B2A  6E18               	movwf	gyroSelfTest@i+1,c
  6377  002B2C  0E00               	movlw	0
  6378  002B2E  6E17               	movwf	gyroSelfTest@i,c
  6379  002B30  5018               	movf	gyroSelfTest@i+1,w,c
  6380  002B32  0A80               	xorlw	128
  6381  002B34  0F80               	addlw	-128
  6382  002B36  0E04               	movlw	4
  6383  002B38  B4D8               	btfsc	status,2,c
  6384  002B3A  5C17               	subwf	gyroSelfTest@i,w,c
  6385  002B3C  B0D8               	btfsc	status,0,c
  6386  002B3E  D009               	goto	l7626
  6387                           
  6388                           ;gyroscope.c: 77: Delay10KTCYx(0);
  6389  002B40  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6390  002B42  0E00               	movlw	0
  6391  002B44  6E01               	movwf	?_Delay10KTCYx,c
  6392  002B46  5012               	movf	??_gyroSelfTest& (0+255),w,c
  6393  002B48  EC53  F01D         	call	_Delay10KTCYx	;wreg free
  6394  002B4C  4A17               	infsnz	gyroSelfTest@i,f,c
  6395  002B4E  2A18               	incf	gyroSelfTest@i+1,f,c
  6396  002B50  D7EF               	goto	L5
  6397  002B52                     l7626:
  6398                           
  6399                           ;gyroscope.c: 78: }
  6400                           ;gyroscope.c: 80: new = gyroGetADC();
  6401  002B52  EC01  F018         	call	_gyroGetADC	;wreg free
  6402  002B56  C00A  F015         	movff	?_gyroGetADC,gyroSelfTest@new
  6403  002B5A  C00B  F016         	movff	?_gyroGetADC+1,gyroSelfTest@new+1
  6404                           
  6405                           ;gyroscope.c: 82: PORTBbits.RB6 = 0;
  6406  002B5E  9C81               	bcf	3969,6,c	;volatile
  6407                           
  6408                           ;gyroscope.c: 84: if (new < base){
  6409  002B60  5016               	movf	gyroSelfTest@new+1,w,c
  6410  002B62  0A80               	xorlw	128
  6411  002B64  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6412  002B66  5013               	movf	gyroSelfTest@base,w,c
  6413  002B68  5C15               	subwf	gyroSelfTest@new,w,c
  6414  002B6A  5014               	movf	gyroSelfTest@base+1,w,c
  6415  002B6C  0A80               	xorlw	128
  6416  002B6E  5812               	subwfb	??_gyroSelfTest& (0+255),w,c
  6417  002B70  B0D8               	btfsc	status,0,c
  6418  002B72  D013               	goto	l7638
  6419                           
  6420                           ;gyroscope.c: 85: gyroFail = 1;
  6421  002B74  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6422  002B76  0E01               	movlw	1
  6423  002B78  0100               	movlb	0	; () banked
  6424  002B7A  0100               	movlb	0	; () banked
  6425  002B7C  6FB7               	movwf	_gyroFail& (0+255),b
  6426  002B7E  5012               	movf	??_gyroSelfTest& (0+255),w,c
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;gyroscope.c: 86: transmitError('G');
  6430  002B80  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6431  002B82  0E47               	movlw	71
  6432  002B84  6E10               	movwf	?_transmitError,c
  6433  002B86  5012               	movf	??_gyroSelfTest& (0+255),w,c
  6434  002B88  EC7E  F01C         	call	_transmitError	;wreg free
  6435                           
  6436                           ;gyroscope.c: 87: morseCode('G');
  6437  002B8C  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6438  002B8E  0E47               	movlw	71
  6439  002B90  6E04               	movwf	?_morseCode,c
  6440  002B92  5012               	movf	??_gyroSelfTest& (0+255),w,c
  6441  002B94  ECFB  F011         	call	_morseCode	;wreg free
  6442                           
  6443                           ;gyroscope.c: 88: }
  6444  002B98  D006               	goto	l1035
  6445  002B9A                     l7638:
  6446                           
  6447                           ;gyroscope.c: 89: else{
  6448                           ;gyroscope.c: 90: gyroFail = 0;
  6449  002B9A  6E12               	movwf	??_gyroSelfTest& (0+255),c
  6450  002B9C  0E00               	movlw	0
  6451  002B9E  0100               	movlb	0	; () banked
  6452  002BA0  0100               	movlb	0	; () banked
  6453  002BA2  6FB7               	movwf	_gyroFail& (0+255),b
  6454  002BA4  5012               	movf	??_gyroSelfTest& (0+255),w,c
  6455  002BA6                     l1035:
  6456  002BA6  0012               	return	
  6457  002BA8                     __end_of_gyroSelfTest:
  6458                           	opt stack 0
  6459                           tblptru	equ	0xFF8
  6460                           tblptrh	equ	0xFF7
  6461                           tblptrl	equ	0xFF6
  6462                           tablat	equ	0xFF5
  6463                           intcon	equ	0xFF2
  6464                           intcon2	equ	0xFF1
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           postinc1	equ	0xFE6
  6468                           postdec1	equ	0xFE5
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _gyroCalibrate *****************
  6478 ;; Defined at:
  6479 ;;		line 50 in file "gyroscope.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  i               2   18[COMRAM] int 
  6484 ;;  average         2   16[COMRAM] int 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6494 ;;      Params:         0       0       0       0       0       0       0
  6495 ;;      Locals:         4       0       0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0
  6497 ;;      Totals:         4       0       0       0       0       0       0
  6498 ;;Total ram usage:        4 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    2
  6501 ;; This function calls:
  6502 ;;		_gyroGetADC
  6503 ;;		_gyroTimerStart
  6504 ;;		___awdiv
  6505 ;; This function is called by:
  6506 ;;		_main
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text39
  6511  0035B4                     __ptext39:
  6512                           	opt stack 0
  6513  0035B4                     _gyroCalibrate:
  6514                           	opt stack 28
  6515                           
  6516                           ;gyroscope.c: 51: int i;
  6517                           ;gyroscope.c: 52: int average = 0;
  6518                           
  6519                           ;incstack = 0
  6520                           ;incstack = 0
  6521  0035B4  0E00               	movlw	0
  6522  0035B6  6E12               	movwf	gyroCalibrate@average+1,c
  6523  0035B8  0E00               	movlw	0
  6524  0035BA  6E11               	movwf	gyroCalibrate@average,c
  6525                           
  6526                           ;gyroscope.c: 54: for (i = 0; i < 4; ++i){
  6527  0035BC  0E00               	movlw	0
  6528  0035BE  6E14               	movwf	gyroCalibrate@i+1,c
  6529  0035C0  0E00               	movlw	0
  6530  0035C2  6E13               	movwf	gyroCalibrate@i,c
  6531  0035C4  5014               	movf	gyroCalibrate@i+1,w,c
  6532  0035C6  0A80               	xorlw	128
  6533  0035C8  0F80               	addlw	-128
  6534  0035CA  0E04               	movlw	4
  6535  0035CC  B4D8               	btfsc	status,2,c
  6536  0035CE  5C13               	subwf	gyroCalibrate@i,w,c
  6537  0035D0  B0D8               	btfsc	status,0,c
  6538  0035D2  D009               	goto	l7252
  6539                           
  6540                           ;gyroscope.c: 55: average += gyroGetADC();
  6541  0035D4  EC01  F018         	call	_gyroGetADC	;wreg free
  6542  0035D8  500A               	movf	?_gyroGetADC,w,c
  6543  0035DA  2611               	addwf	gyroCalibrate@average,f,c
  6544  0035DC  500B               	movf	?_gyroGetADC+1,w,c
  6545  0035DE  2212               	addwfc	gyroCalibrate@average+1,f,c
  6546  0035E0  4A13               	infsnz	gyroCalibrate@i,f,c
  6547  0035E2  2A14               	incf	gyroCalibrate@i+1,f,c
  6548  0035E4  D7EF               	goto	L6
  6549  0035E6                     l7252:
  6550                           
  6551                           ;gyroscope.c: 56: }
  6552                           ;gyroscope.c: 58: gyroZero = average / 4;
  6553  0035E6  C011  F001         	movff	gyroCalibrate@average,?___awdiv
  6554  0035EA  C012  F002         	movff	gyroCalibrate@average+1,?___awdiv+1
  6555  0035EE  0E00               	movlw	0
  6556  0035F0  6E04               	movwf	?___awdiv+3,c
  6557  0035F2  0E04               	movlw	4
  6558  0035F4  6E03               	movwf	?___awdiv+2,c
  6559  0035F6  EC67  F016         	call	___awdiv	;wreg free
  6560  0035FA  C001  F0ED         	movff	?___awdiv,_gyroZero
  6561  0035FE  C002  F0EE         	movff	?___awdiv+1,_gyroZero+1
  6562                           
  6563                           ;gyroscope.c: 60: gyroTimerStart();
  6564  003602  EC83  F01D         	call	_gyroTimerStart	;wreg free
  6565  003606  0012               	return	
  6566  003608                     __end_of_gyroCalibrate:
  6567                           	opt stack 0
  6568                           tblptru	equ	0xFF8
  6569                           tblptrh	equ	0xFF7
  6570                           tblptrl	equ	0xFF6
  6571                           tablat	equ	0xFF5
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           postinc0	equ	0xFEE
  6575                           wreg	equ	0xFE8
  6576                           postinc1	equ	0xFE6
  6577                           postdec1	equ	0xFE5
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function _gyroTimerStart *****************
  6587 ;; Defined at:
  6588 ;;		line 136 in file "gyroscope.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;		None               void
  6595 ;; Registers used:
  6596 ;;		None
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6602 ;;      Params:         0       0       0       0       0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0
  6605 ;;      Totals:         0       0       0       0       0       0       0
  6606 ;;Total ram usage:        0 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_gyroCalibrate
  6612 ;;		_main
  6613 ;;		_gyroWakeUp
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text40
  6618  003B06                     __ptext40:
  6619                           	opt stack 0
  6620  003B06                     _gyroTimerStart:
  6621                           	opt stack 30
  6622                           
  6623                           ;gyroscope.c: 137: T0CONbits.TMR0ON = 1;
  6624                           
  6625                           ;incstack = 0
  6626                           ;incstack = 0
  6627  003B06  8ED5               	bsf	4053,7,c	;volatile
  6628                           
  6629                           ;gyroscope.c: 138: T0CONbits.T08BIT = 0;
  6630  003B08  9CD5               	bcf	4053,6,c	;volatile
  6631                           
  6632                           ;gyroscope.c: 139: T0CONbits.T0CS = 0;
  6633  003B0A  9AD5               	bcf	4053,5,c	;volatile
  6634                           
  6635                           ;gyroscope.c: 140: T0CONbits.PSA = 0;
  6636  003B0C  96D5               	bcf	4053,3,c	;volatile
  6637                           
  6638                           ;gyroscope.c: 141: T0CONbits.T0PS = 111;
  6639  003B0E  80D5               	bsf	4053,0,c	;volatile
  6640  003B10  82D5               	bsf	4053,1,c	;volatile
  6641  003B12  84D5               	bsf	4053,2,c	;volatile
  6642  003B14  0012               	return	
  6643  003B16                     __end_of_gyroTimerStart:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           postinc1	equ	0xFE6
  6654                           postdec1	equ	0xFE5
  6655                           fsr1l	equ	0xFE1
  6656                           indf2	equ	0xFDF
  6657                           postinc2	equ	0xFDE
  6658                           postdec2	equ	0xFDD
  6659                           fsr2h	equ	0xFDA
  6660                           fsr2l	equ	0xFD9
  6661                           status	equ	0xFD8
  6662                           
  6663 ;; *************** function _gyroGetADC *****************
  6664 ;; Defined at:
  6665 ;;		line 29 in file "gyroscope.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;		None
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  average         2   14[COMRAM] int 
  6670 ;;  i               2   12[COMRAM] int 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  2    9[COMRAM] int 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2, status,0, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6680 ;;      Params:         2       0       0       0       0       0       0
  6681 ;;      Locals:         4       0       0       0       0       0       0
  6682 ;;      Temps:          1       0       0       0       0       0       0
  6683 ;;      Totals:         7       0       0       0       0       0       0
  6684 ;;Total ram usage:        7 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    1
  6687 ;; This function calls:
  6688 ;;		_BusyADC
  6689 ;;		_ConvertADC
  6690 ;;		_ReadADC
  6691 ;;		_SetChanADC
  6692 ;;		___awdiv
  6693 ;; This function is called by:
  6694 ;;		_gyroCalibrate
  6695 ;;		_gyroSelfTest
  6696 ;;		_updateSensorPData
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text41
  6701  003002                     __ptext41:
  6702                           	opt stack 0
  6703  003002                     _gyroGetADC:
  6704                           	opt stack 28
  6705                           
  6706                           ;gyroscope.c: 30: int i;
  6707                           ;gyroscope.c: 31: int average = 0;
  6708                           
  6709                           ;incstack = 0
  6710                           ;incstack = 0
  6711  003002  0E00               	movlw	0
  6712  003004  6E10               	movwf	gyroGetADC@average+1,c
  6713  003006  0E00               	movlw	0
  6714  003008  6E0F               	movwf	gyroGetADC@average,c
  6715                           
  6716                           ;gyroscope.c: 33: SetChanADC(0b10000111);
  6717  00300A  6E0C               	movwf	??_gyroGetADC& (0+255),c
  6718  00300C  0E87               	movlw	135
  6719  00300E  6E01               	movwf	?_SetChanADC,c
  6720  003010  500C               	movf	??_gyroGetADC& (0+255),w,c
  6721  003012  EC5E  F01D         	call	_SetChanADC	;wreg free
  6722                           
  6723                           ;gyroscope.c: 35: for (i = 0; i < 4; ++i){
  6724  003016  0E00               	movlw	0
  6725  003018  6E0E               	movwf	gyroGetADC@i+1,c
  6726  00301A  0E00               	movlw	0
  6727  00301C  6E0D               	movwf	gyroGetADC@i,c
  6728  00301E  500E               	movf	gyroGetADC@i+1,w,c
  6729  003020  0A80               	xorlw	128
  6730  003022  0F80               	addlw	-128
  6731  003024  0E04               	movlw	4
  6732  003026  B4D8               	btfsc	status,2,c
  6733  003028  5C0D               	subwf	gyroGetADC@i,w,c
  6734  00302A  B0D8               	btfsc	status,0,c
  6735  00302C  D010               	goto	l6886
  6736                           
  6737                           ;gyroscope.c: 36: ConvertADC();
  6738  00302E  ECBA  F01D         	call	_ConvertADC	;wreg free
  6739  003032                     l6878:
  6740  003032  ECB7  F01D         	call	_BusyADC	;wreg free
  6741  003036  0900               	iorlw	0
  6742  003038  A4D8               	btfss	status,2,c
  6743  00303A  D7FB               	goto	l6878
  6744                           
  6745                           ;gyroscope.c: 38: average += ReadADC();
  6746  00303C  ECB2  F01D         	call	_ReadADC	;wreg free
  6747  003040  5001               	movf	?_ReadADC,w,c
  6748  003042  260F               	addwf	gyroGetADC@average,f,c
  6749  003044  5002               	movf	?_ReadADC+1,w,c
  6750  003046  2210               	addwfc	gyroGetADC@average+1,f,c
  6751  003048  4A0D               	infsnz	gyroGetADC@i,f,c
  6752  00304A  2A0E               	incf	gyroGetADC@i+1,f,c
  6753  00304C  D7E8               	goto	L7
  6754  00304E                     l6886:
  6755                           
  6756                           ;gyroscope.c: 39: }
  6757                           ;gyroscope.c: 41: average /= 4;
  6758  00304E  C00F  F001         	movff	gyroGetADC@average,?___awdiv
  6759  003052  C010  F002         	movff	gyroGetADC@average+1,?___awdiv+1
  6760  003056  0E00               	movlw	0
  6761  003058  6E04               	movwf	?___awdiv+3,c
  6762  00305A  0E04               	movlw	4
  6763  00305C  6E03               	movwf	?___awdiv+2,c
  6764  00305E  EC67  F016         	call	___awdiv	;wreg free
  6765  003062  C001  F00F         	movff	?___awdiv,gyroGetADC@average
  6766  003066  C002  F010         	movff	?___awdiv+1,gyroGetADC@average+1
  6767                           
  6768                           ;gyroscope.c: 42: return average;
  6769  00306A  C00F  F00A         	movff	gyroGetADC@average,?_gyroGetADC
  6770  00306E  C010  F00B         	movff	gyroGetADC@average+1,?_gyroGetADC+1
  6771  003072  0012               	return	
  6772  003074                     __end_of_gyroGetADC:
  6773                           	opt stack 0
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           intcon	equ	0xFF2
  6779                           intcon2	equ	0xFF1
  6780                           postinc0	equ	0xFEE
  6781                           wreg	equ	0xFE8
  6782                           postinc1	equ	0xFE6
  6783                           postdec1	equ	0xFE5
  6784                           fsr1l	equ	0xFE1
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _battSafeCheck *****************
  6793 ;; Defined at:
  6794 ;;		line 140 in file "batteries.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  ptr             2   17[COMRAM] PTR struct .
  6797 ;;		 -> battData(18), 
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  error           1   21[COMRAM] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;		None               void
  6802 ;; Registers used:
  6803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6809 ;;      Params:         2       0       0       0       0       0       0
  6810 ;;      Locals:         1       0       0       0       0       0       0
  6811 ;;      Temps:          2       0       0       0       0       0       0
  6812 ;;      Totals:         5       0       0       0       0       0       0
  6813 ;;Total ram usage:        5 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    3
  6816 ;; This function calls:
  6817 ;;		_transmitError
  6818 ;;		_morseCode
  6819 ;; This function is called by:
  6820 ;;		_main
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text42
  6825  001FAC                     __ptext42:
  6826                           	opt stack 0
  6827  001FAC                     _battSafeCheck:
  6828                           	opt stack 27
  6829                           
  6830                           ;batteries.c: 141: char error = 0;
  6831                           
  6832                           ;incstack = 0
  6833                           ;incstack = 0
  6834  001FAC  6E14               	movwf	??_battSafeCheck& (0+255),c
  6835  001FAE  0E00               	movlw	0
  6836  001FB0  6E16               	movwf	battSafeCheck@error,c
  6837  001FB2  5014               	movf	??_battSafeCheck& (0+255),w,c
  6838                           
  6839                           ;batteries.c: 143: if (ptr->status & 0x8000){
  6840  001FB4  EE20 F00E          	lfsr	2,14
  6841  001FB8  5012               	movf	battSafeCheck@ptr,w,c
  6842  001FBA  26D9               	addwf	fsr2l,f,c
  6843  001FBC  5013               	movf	battSafeCheck@ptr+1,w,c
  6844  001FBE  22DA               	addwfc	fsr2h,f,c
  6845  001FC0  CFDE F014          	movff	postinc2,??_battSafeCheck
  6846  001FC4  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6847  001FC8  AE15               	btfss	??_battSafeCheck+1,7,c
  6848  001FCA  D003               	goto	l7574
  6849                           
  6850                           ;batteries.c: 144: error = 0x43;
  6851  001FCC  6E14               	movwf	??_battSafeCheck& (0+255),c
  6852  001FCE  0E43               	movlw	67
  6853  001FD0  D06E               	goto	L14
  6854  001FD2                     l7574:
  6855                           
  6856                           ;batteries.c: 146: else if (ptr->status & 0x4000){
  6857  001FD2  EE20 F00E          	lfsr	2,14
  6858  001FD6  5012               	movf	battSafeCheck@ptr,w,c
  6859  001FD8  26D9               	addwf	fsr2l,f,c
  6860  001FDA  5013               	movf	battSafeCheck@ptr+1,w,c
  6861  001FDC  22DA               	addwfc	fsr2h,f,c
  6862  001FDE  CFDE F014          	movff	postinc2,??_battSafeCheck
  6863  001FE2  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6864  001FE6  AC15               	btfss	??_battSafeCheck+1,6,c
  6865  001FE8  D003               	goto	l7578
  6866                           
  6867                           ;batteries.c: 147: error = 0x46;
  6868  001FEA  6E14               	movwf	??_battSafeCheck& (0+255),c
  6869  001FEC  0E46               	movlw	70
  6870  001FEE  D05F               	goto	L14
  6871  001FF0                     l7578:
  6872                           
  6873                           ;batteries.c: 149: else if (ptr->status & 0x1000){
  6874  001FF0  EE20 F00E          	lfsr	2,14
  6875  001FF4  5012               	movf	battSafeCheck@ptr,w,c
  6876  001FF6  26D9               	addwf	fsr2l,f,c
  6877  001FF8  5013               	movf	battSafeCheck@ptr+1,w,c
  6878  001FFA  22DA               	addwfc	fsr2h,f,c
  6879  001FFC  CFDE F014          	movff	postinc2,??_battSafeCheck
  6880  002000  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6881  002004  A815               	btfss	??_battSafeCheck+1,4,c
  6882  002006  D003               	goto	l7582
  6883                           
  6884                           ;batteries.c: 150: error = 0x45;
  6885  002008  6E14               	movwf	??_battSafeCheck& (0+255),c
  6886  00200A  0E45               	movlw	69
  6887  00200C  D050               	goto	L14
  6888  00200E                     l7582:
  6889                           
  6890                           ;batteries.c: 152: else if ((ptr->status & 0x0800) || (ptr->temp > 3230)){
  6891  00200E  EE20 F00E          	lfsr	2,14
  6892  002012  5012               	movf	battSafeCheck@ptr,w,c
  6893  002014  26D9               	addwf	fsr2l,f,c
  6894  002016  5013               	movf	battSafeCheck@ptr+1,w,c
  6895  002018  22DA               	addwfc	fsr2h,f,c
  6896  00201A  CFDE F014          	movff	postinc2,??_battSafeCheck
  6897  00201E  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6898  002022  B615               	btfsc	??_battSafeCheck+1,3,c
  6899  002024  D00F               	goto	l7586
  6900  002026  EE20 F00A          	lfsr	2,10
  6901  00202A  5012               	movf	battSafeCheck@ptr,w,c
  6902  00202C  26D9               	addwf	fsr2l,f,c
  6903  00202E  5013               	movf	battSafeCheck@ptr+1,w,c
  6904  002030  22DA               	addwfc	fsr2h,f,c
  6905  002032  52DE               	movf	postinc2,f,c
  6906  002034  50DD               	movf	postdec2,w,c
  6907  002036  0A80               	xorlw	128
  6908  002038  0F74               	addlw	-140
  6909  00203A  0E9F               	movlw	159
  6910  00203C  B4D8               	btfsc	status,2,c
  6911  00203E  5CDF               	subwf	indf2,w,c
  6912  002040  A0D8               	btfss	status,0,c
  6913  002042  D003               	goto	l7588
  6914  002044                     l7586:
  6915                           
  6916                           ;batteries.c: 153: error = 0x54;
  6917  002044  6E14               	movwf	??_battSafeCheck& (0+255),c
  6918  002046  0E54               	movlw	84
  6919  002048  D032               	goto	L14
  6920  00204A                     l7588:
  6921                           
  6922                           ;batteries.c: 155: else if (ptr->status & 0x0200){
  6923  00204A  EE20 F00E          	lfsr	2,14
  6924  00204E  5012               	movf	battSafeCheck@ptr,w,c
  6925  002050  26D9               	addwf	fsr2l,f,c
  6926  002052  5013               	movf	battSafeCheck@ptr+1,w,c
  6927  002054  22DA               	addwfc	fsr2h,f,c
  6928  002056  CFDE F014          	movff	postinc2,??_battSafeCheck
  6929  00205A  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6930  00205E  A215               	btfss	??_battSafeCheck+1,1,c
  6931  002060  D003               	goto	l7592
  6932                           
  6933                           ;batteries.c: 156: error = 0x4C;
  6934  002062  6E14               	movwf	??_battSafeCheck& (0+255),c
  6935  002064  0E4C               	movlw	76
  6936  002066  D023               	goto	L14
  6937  002068                     l7592:
  6938                           
  6939                           ;batteries.c: 158: else if (ptr->status&0x0100){
  6940  002068  EE20 F00E          	lfsr	2,14
  6941  00206C  5012               	movf	battSafeCheck@ptr,w,c
  6942  00206E  26D9               	addwf	fsr2l,f,c
  6943  002070  5013               	movf	battSafeCheck@ptr+1,w,c
  6944  002072  22DA               	addwfc	fsr2h,f,c
  6945  002074  CFDE F014          	movff	postinc2,??_battSafeCheck
  6946  002078  CFDD F015          	movff	postdec2,??_battSafeCheck+1
  6947  00207C  A015               	btfss	??_battSafeCheck+1,0,c
  6948  00207E  D003               	goto	l7596
  6949                           
  6950                           ;batteries.c: 159: error = 0x5A;
  6951  002080  6E14               	movwf	??_battSafeCheck& (0+255),c
  6952  002082  0E5A               	movlw	90
  6953  002084  D014               	goto	L14
  6954  002086                     l7596:
  6955                           
  6956                           ;batteries.c: 161: else if (ptr->temp < 2556){
  6957  002086  EE20 F00A          	lfsr	2,10
  6958  00208A  5012               	movf	battSafeCheck@ptr,w,c
  6959  00208C  26D9               	addwf	fsr2l,f,c
  6960  00208E  5013               	movf	battSafeCheck@ptr+1,w,c
  6961  002090  22DA               	addwfc	fsr2h,f,c
  6962  002092  52DE               	movf	postinc2,f,c
  6963  002094  50DD               	movf	postdec2,w,c
  6964  002096  0A80               	xorlw	128
  6965  002098  0F77               	addlw	-137
  6966  00209A  0EFC               	movlw	252
  6967  00209C  B4D8               	btfsc	status,2,c
  6968  00209E  5CDF               	subwf	indf2,w,c
  6969  0020A0  B0D8               	btfsc	status,0,c
  6970  0020A2  D003               	goto	l7600
  6971                           
  6972                           ;batteries.c: 162: error = 0x55;
  6973  0020A4  6E14               	movwf	??_battSafeCheck& (0+255),c
  6974  0020A6  0E55               	movlw	85
  6975  0020A8  D002               	goto	L14
  6976  0020AA                     l7600:
  6977                           
  6978                           ;batteries.c: 164: else{
  6979                           ;batteries.c: 165: error = 0;
  6980  0020AA  6E14               	movwf	??_battSafeCheck& (0+255),c
  6981  0020AC  0E00               	movlw	0
  6982  0020AE                     L14:
  6983  0020AE  6E16               	movwf	battSafeCheck@error,c
  6984  0020B0  5014               	movf	??_battSafeCheck& (0+255),w,c
  6985                           
  6986                           ;batteries.c: 166: }
  6987                           ;batteries.c: 167: if (error){
  6988  0020B2  5016               	movf	battSafeCheck@error,w,c
  6989  0020B4  B4D8               	btfsc	status,2,c
  6990  0020B6  D008               	goto	l950
  6991                           
  6992                           ;batteries.c: 168: transmitError(error);
  6993  0020B8  C016  F010         	movff	battSafeCheck@error,?_transmitError
  6994  0020BC  EC7E  F01C         	call	_transmitError	;wreg free
  6995                           
  6996                           ;batteries.c: 169: morseCode(error);
  6997  0020C0  C016  F004         	movff	battSafeCheck@error,?_morseCode
  6998  0020C4  ECFB  F011         	call	_morseCode	;wreg free
  6999  0020C8                     l950:
  7000  0020C8  0012               	return	
  7001  0020CA                     __end_of_battSafeCheck:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           intcon	equ	0xFF2
  7008                           intcon2	equ	0xFF1
  7009                           postinc0	equ	0xFEE
  7010                           wreg	equ	0xFE8
  7011                           postinc1	equ	0xFE6
  7012                           postdec1	equ	0xFE5
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _updateBattData *****************
  7022 ;; Defined at:
  7023 ;;		line 76 in file "batteries.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  data            2    8[COMRAM] PTR struct .
  7026 ;;		 -> battData(18), 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;		None               void
  7031 ;; Registers used:
  7032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7038 ;;      Params:         2       0       0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0
  7040 ;;      Temps:          1       0       0       0       0       0       0
  7041 ;;      Totals:         3       0       0       0       0       0       0
  7042 ;;Total ram usage:        3 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    3
  7045 ;; This function calls:
  7046 ;;		_battReadWord
  7047 ;; This function is called by:
  7048 ;;		_main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text43
  7053  0020CA                     __ptext43:
  7054                           	opt stack 0
  7055  0020CA                     _updateBattData:
  7056                           	opt stack 27
  7057                           
  7058                           ;batteries.c: 77: data->capacity = battReadWord(0x0F);
  7059                           
  7060                           ;incstack = 0
  7061                           ;incstack = 0
  7062  0020CA  6E0B               	movwf	??_updateBattData& (0+255),c
  7063  0020CC  0E0F               	movlw	15
  7064  0020CE  6E02               	movwf	?_battReadWord,c
  7065  0020D0  500B               	movf	??_updateBattData& (0+255),w,c
  7066  0020D2  EC73  F018         	call	_battReadWord	;wreg free
  7067  0020D6  EE20 F00C          	lfsr	2,12
  7068  0020DA  5009               	movf	updateBattData@data,w,c
  7069  0020DC  26D9               	addwf	fsr2l,f,c
  7070  0020DE  500A               	movf	updateBattData@data+1,w,c
  7071  0020E0  22DA               	addwfc	fsr2h,f,c
  7072  0020E2  C002  FFDE         	movff	?_battReadWord,postinc2
  7073  0020E6  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7074                           
  7075                           ;batteries.c: 78: data->cell1V = battReadWord(0x3F);
  7076  0020EA  6E0B               	movwf	??_updateBattData& (0+255),c
  7077  0020EC  0E3F               	movlw	63
  7078  0020EE  6E02               	movwf	?_battReadWord,c
  7079  0020F0  500B               	movf	??_updateBattData& (0+255),w,c
  7080  0020F2  EC73  F018         	call	_battReadWord	;wreg free
  7081  0020F6  C009  FFD9         	movff	updateBattData@data,fsr2l
  7082  0020FA  C00A  FFDA         	movff	updateBattData@data+1,fsr2h
  7083  0020FE  C002  FFDE         	movff	?_battReadWord,postinc2
  7084  002102  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7085                           
  7086                           ;batteries.c: 79: data->cell2V = battReadWord(0x3E);
  7087  002106  6E0B               	movwf	??_updateBattData& (0+255),c
  7088  002108  0E3E               	movlw	62
  7089  00210A  6E02               	movwf	?_battReadWord,c
  7090  00210C  500B               	movf	??_updateBattData& (0+255),w,c
  7091  00210E  EC73  F018         	call	_battReadWord	;wreg free
  7092  002112  EE20 F002          	lfsr	2,2
  7093  002116  5009               	movf	updateBattData@data,w,c
  7094  002118  26D9               	addwf	fsr2l,f,c
  7095  00211A  500A               	movf	updateBattData@data+1,w,c
  7096  00211C  22DA               	addwfc	fsr2h,f,c
  7097  00211E  C002  FFDE         	movff	?_battReadWord,postinc2
  7098  002122  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7099                           
  7100                           ;batteries.c: 80: data->cell3V = battReadWord(0x3D);
  7101  002126  6E0B               	movwf	??_updateBattData& (0+255),c
  7102  002128  0E3D               	movlw	61
  7103  00212A  6E02               	movwf	?_battReadWord,c
  7104  00212C  500B               	movf	??_updateBattData& (0+255),w,c
  7105  00212E  EC73  F018         	call	_battReadWord	;wreg free
  7106  002132  EE20 F004          	lfsr	2,4
  7107  002136  5009               	movf	updateBattData@data,w,c
  7108  002138  26D9               	addwf	fsr2l,f,c
  7109  00213A  500A               	movf	updateBattData@data+1,w,c
  7110  00213C  22DA               	addwfc	fsr2h,f,c
  7111  00213E  C002  FFDE         	movff	?_battReadWord,postinc2
  7112  002142  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7113                           
  7114                           ;batteries.c: 81: data->current = battReadWord(0x0A);
  7115  002146  6E0B               	movwf	??_updateBattData& (0+255),c
  7116  002148  0E0A               	movlw	10
  7117  00214A  6E02               	movwf	?_battReadWord,c
  7118  00214C  500B               	movf	??_updateBattData& (0+255),w,c
  7119  00214E  EC73  F018         	call	_battReadWord	;wreg free
  7120  002152  EE20 F006          	lfsr	2,6
  7121  002156  5009               	movf	updateBattData@data,w,c
  7122  002158  26D9               	addwf	fsr2l,f,c
  7123  00215A  500A               	movf	updateBattData@data+1,w,c
  7124  00215C  22DA               	addwfc	fsr2h,f,c
  7125  00215E  C002  FFDE         	movff	?_battReadWord,postinc2
  7126  002162  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7127                           
  7128                           ;batteries.c: 82: data->average = battReadWord(0x0B);
  7129  002166  6E0B               	movwf	??_updateBattData& (0+255),c
  7130  002168  0E0B               	movlw	11
  7131  00216A  6E02               	movwf	?_battReadWord,c
  7132  00216C  500B               	movf	??_updateBattData& (0+255),w,c
  7133  00216E  EC73  F018         	call	_battReadWord	;wreg free
  7134  002172  EE20 F008          	lfsr	2,8
  7135  002176  5009               	movf	updateBattData@data,w,c
  7136  002178  26D9               	addwf	fsr2l,f,c
  7137  00217A  500A               	movf	updateBattData@data+1,w,c
  7138  00217C  22DA               	addwfc	fsr2h,f,c
  7139  00217E  C002  FFDE         	movff	?_battReadWord,postinc2
  7140  002182  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7141                           
  7142                           ;batteries.c: 83: data->status = battReadWord(0x16);
  7143  002186  6E0B               	movwf	??_updateBattData& (0+255),c
  7144  002188  0E16               	movlw	22
  7145  00218A  6E02               	movwf	?_battReadWord,c
  7146  00218C  500B               	movf	??_updateBattData& (0+255),w,c
  7147  00218E  EC73  F018         	call	_battReadWord	;wreg free
  7148  002192  EE20 F00E          	lfsr	2,14
  7149  002196  5009               	movf	updateBattData@data,w,c
  7150  002198  26D9               	addwf	fsr2l,f,c
  7151  00219A  500A               	movf	updateBattData@data+1,w,c
  7152  00219C  22DA               	addwfc	fsr2h,f,c
  7153  00219E  C002  FFDE         	movff	?_battReadWord,postinc2
  7154  0021A2  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7155                           
  7156                           ;batteries.c: 84: data->temp = battReadWord(0x08);
  7157  0021A6  6E0B               	movwf	??_updateBattData& (0+255),c
  7158  0021A8  0E08               	movlw	8
  7159  0021AA  6E02               	movwf	?_battReadWord,c
  7160  0021AC  500B               	movf	??_updateBattData& (0+255),w,c
  7161  0021AE  EC73  F018         	call	_battReadWord	;wreg free
  7162  0021B2  EE20 F00A          	lfsr	2,10
  7163  0021B6  5009               	movf	updateBattData@data,w,c
  7164  0021B8  26D9               	addwf	fsr2l,f,c
  7165  0021BA  500A               	movf	updateBattData@data+1,w,c
  7166  0021BC  22DA               	addwfc	fsr2h,f,c
  7167  0021BE  C002  FFDE         	movff	?_battReadWord,postinc2
  7168  0021C2  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7169                           
  7170                           ;batteries.c: 85: data->time = battReadWord(0x06);
  7171  0021C6  6E0B               	movwf	??_updateBattData& (0+255),c
  7172  0021C8  0E06               	movlw	6
  7173  0021CA  6E02               	movwf	?_battReadWord,c
  7174  0021CC  500B               	movf	??_updateBattData& (0+255),w,c
  7175  0021CE  EC73  F018         	call	_battReadWord	;wreg free
  7176  0021D2  EE20 F010          	lfsr	2,16
  7177  0021D6  5009               	movf	updateBattData@data,w,c
  7178  0021D8  26D9               	addwf	fsr2l,f,c
  7179  0021DA  500A               	movf	updateBattData@data+1,w,c
  7180  0021DC  22DA               	addwfc	fsr2h,f,c
  7181  0021DE  C002  FFDE         	movff	?_battReadWord,postinc2
  7182  0021E2  C003  FFDD         	movff	?_battReadWord+1,postdec2
  7183  0021E6  0012               	return	
  7184  0021E8                     __end_of_updateBattData:
  7185                           	opt stack 0
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           intcon	equ	0xFF2
  7191                           intcon2	equ	0xFF1
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postinc1	equ	0xFE6
  7195                           postdec1	equ	0xFE5
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _battReadWord *****************
  7205 ;; Defined at:
  7206 ;;		line 115 in file "batteries.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  reg             1    1[COMRAM] unsigned char 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  value           2    6[COMRAM] int 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  2    1[COMRAM] int 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7220 ;;      Params:         2       0       0       0       0       0       0
  7221 ;;      Locals:         2       0       0       0       0       0       0
  7222 ;;      Temps:          3       0       0       0       0       0       0
  7223 ;;      Totals:         7       0       0       0       0       0       0
  7224 ;;Total ram usage:        7 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    2
  7227 ;; This function calls:
  7228 ;;		_WriteI2C
  7229 ;;		_ReadI2C
  7230 ;; This function is called by:
  7231 ;;		_updateBattData
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text44
  7236  0030E6                     __ptext44:
  7237                           	opt stack 0
  7238  0030E6                     _battReadWord:
  7239                           	opt stack 27
  7240                           
  7241                           ;batteries.c: 116: int value;
  7242                           ;batteries.c: 118: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7243                           
  7244                           ;incstack = 0
  7245                           ;incstack = 0
  7246  0030E6  80C5               	bsf	4037,0,c	;volatile
  7247  0030E8                     l909:
  7248  0030E8  B0C5               	btfsc	4037,0,c	;volatile
  7249  0030EA  D7FE               	goto	l909
  7250                           
  7251                           ;batteries.c: 119: WriteI2C(0x16);
  7252  0030EC  6E04               	movwf	??_battReadWord& (0+255),c
  7253  0030EE  0E16               	movlw	22
  7254  0030F0  6E01               	movwf	?_WriteI2C,c
  7255  0030F2  5004               	movf	??_battReadWord& (0+255),w,c
  7256  0030F4  ECAF  F01A         	call	_WriteI2C	;wreg free
  7257                           
  7258                           ;batteries.c: 120: WriteI2C(reg);
  7259  0030F8  C002  F001         	movff	battReadWord@reg,?_WriteI2C
  7260  0030FC  ECAF  F01A         	call	_WriteI2C	;wreg free
  7261                           
  7262                           ;batteries.c: 122: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  7263  003100  82C5               	bsf	4037,1,c	;volatile
  7264  003102                     l912:
  7265  003102  B2C5               	btfsc	4037,1,c	;volatile
  7266  003104  D7FE               	goto	l912
  7267                           
  7268                           ;batteries.c: 123: WriteI2C(0x16 | 1);
  7269  003106  6E04               	movwf	??_battReadWord& (0+255),c
  7270  003108  0E17               	movlw	23
  7271  00310A  6E01               	movwf	?_WriteI2C,c
  7272  00310C  5004               	movf	??_battReadWord& (0+255),w,c
  7273  00310E  ECAF  F01A         	call	_WriteI2C	;wreg free
  7274  003112                     l915:
  7275  003112  A0C7               	btfss	4039,0,c	;volatile
  7276  003114  D7FE               	goto	l915
  7277                           
  7278                           ;batteries.c: 126: value = ReadI2C();
  7279  003116  EC20  F01D         	call	_ReadI2C	;wreg free
  7280  00311A  6E04               	movwf	??_battReadWord& (0+255),c
  7281  00311C  5004               	movf	??_battReadWord,w,c
  7282  00311E  6E07               	movwf	battReadWord@value,c
  7283  003120  6A08               	clrf	battReadWord@value+1,c
  7284                           
  7285                           ;batteries.c: 127: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7286  003122  9AC5               	bcf	4037,5,c	;volatile
  7287  003124  88C5               	bsf	4037,4,c	;volatile
  7288  003126                     l918:
  7289  003126  B8C5               	btfsc	4037,4,c	;volatile
  7290  003128  D7FE               	goto	l918
  7291  00312A                     l921:
  7292  00312A  A0C7               	btfss	4039,0,c	;volatile
  7293  00312C  D7FE               	goto	l921
  7294                           
  7295                           ;batteries.c: 130: value |= ReadI2C() << 8;
  7296  00312E  EC20  F01D         	call	_ReadI2C	;wreg free
  7297  003132  6E04               	movwf	??_battReadWord& (0+255),c
  7298  003134  5004               	movf	??_battReadWord,w,c
  7299  003136  6E06               	movwf	(??_battReadWord+2)& (0+255),c
  7300  003138  6A05               	clrf	(??_battReadWord+1)& (0+255),c
  7301  00313A  5005               	movf	??_battReadWord+1,w,c
  7302  00313C  1207               	iorwf	battReadWord@value,f,c
  7303  00313E  5006               	movf	??_battReadWord+2,w,c
  7304  003140  1208               	iorwf	battReadWord@value+1,f,c
  7305                           
  7306                           ;batteries.c: 131: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7307  003142  9AC5               	bcf	4037,5,c	;volatile
  7308  003144  88C5               	bsf	4037,4,c	;volatile
  7309  003146                     l924:
  7310  003146  B8C5               	btfsc	4037,4,c	;volatile
  7311  003148  D7FE               	goto	l924
  7312                           
  7313                           ;batteries.c: 133: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7314  00314A  84C5               	bsf	4037,2,c	;volatile
  7315  00314C                     l927:
  7316  00314C  A4C5               	btfss	4037,2,c	;volatile
  7317  00314E  0012               	return	
  7318  003150  D7FD               	goto	l927
  7319  003152                     __end_of_battReadWord:
  7320                           	opt stack 0
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           intcon	equ	0xFF2
  7326                           intcon2	equ	0xFF1
  7327                           postinc0	equ	0xFEE
  7328                           wreg	equ	0xFE8
  7329                           postinc1	equ	0xFE6
  7330                           postdec1	equ	0xFE5
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           fsr2h	equ	0xFDA
  7336                           fsr2l	equ	0xFD9
  7337                           status	equ	0xFD8
  7338                           
  7339 ;; *************** function _openSMBus *****************
  7340 ;; Defined at:
  7341 ;;		line 68 in file "batteries.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7355 ;;      Params:         0       0       0       0       0       0       0
  7356 ;;      Locals:         0       0       0       0       0       0       0
  7357 ;;      Temps:          2       0       0       0       0       0       0
  7358 ;;      Totals:         2       0       0       0       0       0       0
  7359 ;;Total ram usage:        2 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    1
  7362 ;; This function calls:
  7363 ;;		_OpenI2C
  7364 ;; This function is called by:
  7365 ;;		_main
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text45
  7370  003A76                     __ptext45:
  7371                           	opt stack 0
  7372  003A76                     _openSMBus:
  7373                           	opt stack 29
  7374                           
  7375                           ;batteries.c: 69: OpenI2C(0b00001000,0b10000000);
  7376                           
  7377                           ;incstack = 0
  7378                           ;incstack = 0
  7379  003A76  6E03               	movwf	??_openSMBus& (0+255),c
  7380  003A78  0E08               	movlw	8
  7381  003A7A  6E01               	movwf	?_OpenI2C,c
  7382  003A7C  5003               	movf	??_openSMBus& (0+255),w,c
  7383  003A7E  6E04               	movwf	(??_openSMBus+1)& (0+255),c
  7384  003A80  0E80               	movlw	128
  7385  003A82  6E02               	movwf	?_OpenI2C+1,c
  7386  003A84  5004               	movf	(??_openSMBus+1)& (0+255),w,c
  7387  003A86  EC12  F01D         	call	_OpenI2C	;wreg free
  7388                           
  7389                           ;batteries.c: 70: SSPADD = 0xD0;
  7390  003A8A  0ED0               	movlw	208
  7391  003A8C  6EC8               	movwf	4040,c	;volatile
  7392  003A8E  0012               	return	
  7393  003A90                     __end_of_openSMBus:
  7394                           	opt stack 0
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           intcon	equ	0xFF2
  7400                           intcon2	equ	0xFF1
  7401                           postinc0	equ	0xFEE
  7402                           wreg	equ	0xFE8
  7403                           postinc1	equ	0xFE6
  7404                           postdec1	equ	0xFE5
  7405                           fsr1l	equ	0xFE1
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           fsr2h	equ	0xFDA
  7410                           fsr2l	equ	0xFD9
  7411                           status	equ	0xFD8
  7412                           
  7413 ;; *************** function _OpenI2C *****************
  7414 ;; Defined at:
  7415 ;;		line 15 in file "i2c/i2c_open.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  sync_mode       1    0[COMRAM] unsigned char 
  7418 ;;  slew            1    1[COMRAM] unsigned char 
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;		None
  7421 ;; Return value:  Size  Location     Type
  7422 ;;		None               void
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7430 ;;      Params:         2       0       0       0       0       0       0
  7431 ;;      Locals:         0       0       0       0       0       0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0
  7433 ;;      Totals:         2       0       0       0       0       0       0
  7434 ;;Total ram usage:        2 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; This function calls:
  7437 ;;		Nothing
  7438 ;; This function is called by:
  7439 ;;		_openSMBus
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text46
  7444  003A24                     __ptext46:
  7445                           	opt stack 0
  7446  003A24                     _OpenI2C:
  7447                           	opt stack 29
  7448                           
  7449                           ;i2c_open.c: 16: SSPSTAT &= 0x3F;
  7450                           
  7451                           ;incstack = 0
  7452                           ;incstack = 0
  7453  003A24  0E3F               	movlw	63
  7454  003A26  16C7               	andwf	4039,f,c	;volatile
  7455                           
  7456                           ;i2c_open.c: 17: SSPCON1 = 0x00;
  7457  003A28  0E00               	movlw	0
  7458  003A2A  6EC6               	movwf	4038,c	;volatile
  7459                           
  7460                           ;i2c_open.c: 18: SSPCON2 = 0x00;
  7461  003A2C  0E00               	movlw	0
  7462  003A2E  6EC5               	movwf	4037,c	;volatile
  7463                           
  7464                           ;i2c_open.c: 19: SSPCON1 |= sync_mode;
  7465  003A30  5001               	movf	OpenI2C@sync_mode,w,c
  7466  003A32  12C6               	iorwf	4038,f,c	;volatile
  7467                           
  7468                           ;i2c_open.c: 20: SSPSTAT |= slew;
  7469  003A34  5002               	movf	OpenI2C@slew,w,c
  7470  003A36  12C7               	iorwf	4039,f,c	;volatile
  7471                           
  7472                           ;i2c_open.c: 22: TRISCbits.TRISC3 = 1;
  7473  003A38  8694               	bsf	3988,3,c	;volatile
  7474                           
  7475                           ;i2c_open.c: 23: TRISCbits.TRISC4 = 1;
  7476  003A3A  8894               	bsf	3988,4,c	;volatile
  7477                           
  7478                           ;i2c_open.c: 24: SSPCON1 |= 0b00100000;
  7479  003A3C  8AC6               	bsf	4038,5,c	;volatile
  7480  003A3E  0012               	return	
  7481  003A40                     __end_of_OpenI2C:
  7482                           	opt stack 0
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           intcon	equ	0xFF2
  7488                           intcon2	equ	0xFF1
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           postinc1	equ	0xFE6
  7492                           postdec1	equ	0xFE5
  7493                           fsr1l	equ	0xFE1
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _battConfig *****************
  7502 ;; Defined at:
  7503 ;;		line 22 in file "batteries.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7517 ;;      Params:         0       0       0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0
  7519 ;;      Temps:          2       0       0       0       0       0       0
  7520 ;;      Totals:         2       0       0       0       0       0       0
  7521 ;;Total ram usage:        2 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    3
  7524 ;; This function calls:
  7525 ;;		_battConfigByte
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text47
  7532  0013F8                     __ptext47:
  7533                           	opt stack 0
  7534  0013F8                     _battConfig:
  7535                           	opt stack 27
  7536                           
  7537                           ;batteries.c: 23: battConfigByte(0x04, 11100 >> 8);
  7538                           
  7539                           ;incstack = 0
  7540                           ;incstack = 0
  7541  0013F8  6E05               	movwf	??_battConfig& (0+255),c
  7542  0013FA  0E04               	movlw	4
  7543  0013FC  6E02               	movwf	?_battConfigByte,c
  7544  0013FE  5005               	movf	??_battConfig& (0+255),w,c
  7545  001400  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7546  001402  0E2B               	movlw	43
  7547  001404  6E03               	movwf	?_battConfigByte+1,c
  7548  001406  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7549  001408  EC63  F01C         	call	_battConfigByte	;wreg free
  7550                           
  7551                           ;batteries.c: 24: battConfigByte(0x05, 11100 & 0xFF);
  7552  00140C  6E05               	movwf	??_battConfig& (0+255),c
  7553  00140E  0E05               	movlw	5
  7554  001410  6E02               	movwf	?_battConfigByte,c
  7555  001412  5005               	movf	??_battConfig& (0+255),w,c
  7556  001414  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7557  001416  0E5C               	movlw	92
  7558  001418  6E03               	movwf	?_battConfigByte+1,c
  7559  00141A  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7560  00141C  EC63  F01C         	call	_battConfigByte	;wreg free
  7561                           
  7562                           ;batteries.c: 26: battConfigByte(0x28, 0b10000110);
  7563  001420  6E05               	movwf	??_battConfig& (0+255),c
  7564  001422  0E28               	movlw	40
  7565  001424  6E02               	movwf	?_battConfigByte,c
  7566  001426  5005               	movf	??_battConfig& (0+255),w,c
  7567  001428  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7568  00142A  0E86               	movlw	134
  7569  00142C  6E03               	movwf	?_battConfigByte+1,c
  7570  00142E  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7571  001430  EC63  F01C         	call	_battConfigByte	;wreg free
  7572                           
  7573                           ;batteries.c: 28: battConfigByte(0x32, 3300 >> 8);
  7574  001434  6E05               	movwf	??_battConfig& (0+255),c
  7575  001436  0E32               	movlw	50
  7576  001438  6E02               	movwf	?_battConfigByte,c
  7577  00143A  5005               	movf	??_battConfig& (0+255),w,c
  7578  00143C  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7579  00143E  0E0C               	movlw	12
  7580  001440  6E03               	movwf	?_battConfigByte+1,c
  7581  001442  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7582  001444  EC63  F01C         	call	_battConfigByte	;wreg free
  7583                           
  7584                           ;batteries.c: 29: battConfigByte(0x33, 3300 & 0xFF);
  7585  001448  6E05               	movwf	??_battConfig& (0+255),c
  7586  00144A  0E33               	movlw	51
  7587  00144C  6E02               	movwf	?_battConfigByte,c
  7588  00144E  5005               	movf	??_battConfig& (0+255),w,c
  7589  001450  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7590  001452  0EE4               	movlw	228
  7591  001454  6E03               	movwf	?_battConfigByte+1,c
  7592  001456  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7593  001458  EC63  F01C         	call	_battConfigByte	;wreg free
  7594                           
  7595                           ;batteries.c: 31: battConfigByte(0x36, 3300 >> 8);
  7596  00145C  6E05               	movwf	??_battConfig& (0+255),c
  7597  00145E  0E36               	movlw	54
  7598  001460  6E02               	movwf	?_battConfigByte,c
  7599  001462  5005               	movf	??_battConfig& (0+255),w,c
  7600  001464  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7601  001466  0E0C               	movlw	12
  7602  001468  6E03               	movwf	?_battConfigByte+1,c
  7603  00146A  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7604  00146C  EC63  F01C         	call	_battConfigByte	;wreg free
  7605                           
  7606                           ;batteries.c: 32: battConfigByte(0x37, 3300 & 0xFF);
  7607  001470  6E05               	movwf	??_battConfig& (0+255),c
  7608  001472  0E37               	movlw	55
  7609  001474  6E02               	movwf	?_battConfigByte,c
  7610  001476  5005               	movf	??_battConfig& (0+255),w,c
  7611  001478  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7612  00147A  0EE4               	movlw	228
  7613  00147C  6E03               	movwf	?_battConfigByte+1,c
  7614  00147E  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7615  001480  EC63  F01C         	call	_battConfigByte	;wreg free
  7616                           
  7617                           ;batteries.c: 34: battConfigByte(0x38, 2200 >> 8);
  7618  001484  6E05               	movwf	??_battConfig& (0+255),c
  7619  001486  0E38               	movlw	56
  7620  001488  6E02               	movwf	?_battConfigByte,c
  7621  00148A  5005               	movf	??_battConfig& (0+255),w,c
  7622  00148C  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7623  00148E  0E08               	movlw	8
  7624  001490  6E03               	movwf	?_battConfigByte+1,c
  7625  001492  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7626  001494  EC63  F01C         	call	_battConfigByte	;wreg free
  7627                           
  7628                           ;batteries.c: 35: battConfigByte(0x39, 2200 & 0xFF);
  7629  001498  6E05               	movwf	??_battConfig& (0+255),c
  7630  00149A  0E39               	movlw	57
  7631  00149C  6E02               	movwf	?_battConfigByte,c
  7632  00149E  5005               	movf	??_battConfig& (0+255),w,c
  7633  0014A0  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7634  0014A2  0E98               	movlw	152
  7635  0014A4  6E03               	movwf	?_battConfigByte+1,c
  7636  0014A6  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7637  0014A8  EC63  F01C         	call	_battConfigByte	;wreg free
  7638                           
  7639                           ;batteries.c: 37: battConfigByte(0x3A, 12600 >> 8);
  7640  0014AC  6E05               	movwf	??_battConfig& (0+255),c
  7641  0014AE  0E3A               	movlw	58
  7642  0014B0  6E02               	movwf	?_battConfigByte,c
  7643  0014B2  5005               	movf	??_battConfig& (0+255),w,c
  7644  0014B4  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7645  0014B6  0E31               	movlw	49
  7646  0014B8  6E03               	movwf	?_battConfigByte+1,c
  7647  0014BA  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7648  0014BC  EC63  F01C         	call	_battConfigByte	;wreg free
  7649                           
  7650                           ;batteries.c: 38: battConfigByte(0x3B, 12600 & 0xFF);
  7651  0014C0  6E05               	movwf	??_battConfig& (0+255),c
  7652  0014C2  0E3B               	movlw	59
  7653  0014C4  6E02               	movwf	?_battConfigByte,c
  7654  0014C6  5005               	movf	??_battConfig& (0+255),w,c
  7655  0014C8  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7656  0014CA  0E38               	movlw	56
  7657  0014CC  6E03               	movwf	?_battConfigByte+1,c
  7658  0014CE  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7659  0014D0  EC63  F01C         	call	_battConfigByte	;wreg free
  7660                           
  7661                           ;batteries.c: 40: battConfigByte(0x3E, 15000 >> 8);
  7662  0014D4  6E05               	movwf	??_battConfig& (0+255),c
  7663  0014D6  0E3E               	movlw	62
  7664  0014D8  6E02               	movwf	?_battConfigByte,c
  7665  0014DA  5005               	movf	??_battConfig& (0+255),w,c
  7666  0014DC  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7667  0014DE  0E3A               	movlw	58
  7668  0014E0  6E03               	movwf	?_battConfigByte+1,c
  7669  0014E2  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7670  0014E4  EC63  F01C         	call	_battConfigByte	;wreg free
  7671                           
  7672                           ;batteries.c: 41: battConfigByte(0x3F, 15000 & 0xFF);
  7673  0014E8  6E05               	movwf	??_battConfig& (0+255),c
  7674  0014EA  0E3F               	movlw	63
  7675  0014EC  6E02               	movwf	?_battConfigByte,c
  7676  0014EE  5005               	movf	??_battConfig& (0+255),w,c
  7677  0014F0  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7678  0014F2  0E98               	movlw	152
  7679  0014F4  6E03               	movwf	?_battConfigByte+1,c
  7680  0014F6  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7681  0014F8  EC63  F01C         	call	_battConfigByte	;wreg free
  7682                           
  7683                           ;batteries.c: 43: battConfigByte(0x51, 50 >> 8);
  7684  0014FC  6E05               	movwf	??_battConfig& (0+255),c
  7685  0014FE  0E51               	movlw	81
  7686  001500  6E02               	movwf	?_battConfigByte,c
  7687  001502  5005               	movf	??_battConfig& (0+255),w,c
  7688  001504  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7689  001506  0E00               	movlw	0
  7690  001508  6E03               	movwf	?_battConfigByte+1,c
  7691  00150A  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7692  00150C  EC63  F01C         	call	_battConfigByte	;wreg free
  7693                           
  7694                           ;batteries.c: 44: battConfigByte(0x52, 50 & 0xFF);
  7695  001510  6E05               	movwf	??_battConfig& (0+255),c
  7696  001512  0E52               	movlw	82
  7697  001514  6E02               	movwf	?_battConfigByte,c
  7698  001516  5005               	movf	??_battConfig& (0+255),w,c
  7699  001518  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7700  00151A  0E32               	movlw	50
  7701  00151C  6E03               	movwf	?_battConfigByte+1,c
  7702  00151E  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7703  001520  EC63  F01C         	call	_battConfigByte	;wreg free
  7704                           
  7705                           ;batteries.c: 46: battConfigByte(0x5B, 17000 >> 8);
  7706  001524  6E05               	movwf	??_battConfig& (0+255),c
  7707  001526  0E5B               	movlw	91
  7708  001528  6E02               	movwf	?_battConfigByte,c
  7709  00152A  5005               	movf	??_battConfig& (0+255),w,c
  7710  00152C  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7711  00152E  0E42               	movlw	66
  7712  001530  6E03               	movwf	?_battConfigByte+1,c
  7713  001532  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7714  001534  EC63  F01C         	call	_battConfigByte	;wreg free
  7715                           
  7716                           ;batteries.c: 47: battConfigByte(0x5C, 17000 & 0xFF);
  7717  001538  6E05               	movwf	??_battConfig& (0+255),c
  7718  00153A  0E5C               	movlw	92
  7719  00153C  6E02               	movwf	?_battConfigByte,c
  7720  00153E  5005               	movf	??_battConfig& (0+255),w,c
  7721  001540  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7722  001542  0E68               	movlw	104
  7723  001544  6E03               	movwf	?_battConfigByte+1,c
  7724  001546  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7725  001548  EC63  F01C         	call	_battConfigByte	;wreg free
  7726                           
  7727                           ;batteries.c: 49: battConfigByte(0x5d, 50 >> 8);
  7728  00154C  6E05               	movwf	??_battConfig& (0+255),c
  7729  00154E  0E5D               	movlw	93
  7730  001550  6E02               	movwf	?_battConfigByte,c
  7731  001552  5005               	movf	??_battConfig& (0+255),w,c
  7732  001554  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7733  001556  0E00               	movlw	0
  7734  001558  6E03               	movwf	?_battConfigByte+1,c
  7735  00155A  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7736  00155C  EC63  F01C         	call	_battConfigByte	;wreg free
  7737                           
  7738                           ;batteries.c: 50: battConfigByte(0x5e, 50 & 0xFF);
  7739  001560  6E05               	movwf	??_battConfig& (0+255),c
  7740  001562  0E5E               	movlw	94
  7741  001564  6E02               	movwf	?_battConfigByte,c
  7742  001566  5005               	movf	??_battConfig& (0+255),w,c
  7743  001568  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7744  00156A  0E32               	movlw	50
  7745  00156C  6E03               	movwf	?_battConfigByte+1,c
  7746  00156E  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7747  001570  EC63  F01C         	call	_battConfigByte	;wreg free
  7748                           
  7749                           ;batteries.c: 52: battConfigByte(0x63, 4200 >> 8);
  7750  001574  6E05               	movwf	??_battConfig& (0+255),c
  7751  001576  0E63               	movlw	99
  7752  001578  6E02               	movwf	?_battConfigByte,c
  7753  00157A  5005               	movf	??_battConfig& (0+255),w,c
  7754  00157C  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7755  00157E  0E10               	movlw	16
  7756  001580  6E03               	movwf	?_battConfigByte+1,c
  7757  001582  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7758  001584  EC63  F01C         	call	_battConfigByte	;wreg free
  7759                           
  7760                           ;batteries.c: 53: battConfigByte(0x64, 4200 & 0xFF);
  7761  001588  6E05               	movwf	??_battConfig& (0+255),c
  7762  00158A  0E64               	movlw	100
  7763  00158C  6E02               	movwf	?_battConfigByte,c
  7764  00158E  5005               	movf	??_battConfig& (0+255),w,c
  7765  001590  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7766  001592  0E68               	movlw	104
  7767  001594  6E03               	movwf	?_battConfigByte+1,c
  7768  001596  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7769  001598  EC63  F01C         	call	_battConfigByte	;wreg free
  7770                           
  7771                           ;batteries.c: 55: battConfigByte(0x65, 2950 >> 8);
  7772  00159C  6E05               	movwf	??_battConfig& (0+255),c
  7773  00159E  0E65               	movlw	101
  7774  0015A0  6E02               	movwf	?_battConfigByte,c
  7775  0015A2  5005               	movf	??_battConfig& (0+255),w,c
  7776  0015A4  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7777  0015A6  0E0B               	movlw	11
  7778  0015A8  6E03               	movwf	?_battConfigByte+1,c
  7779  0015AA  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7780  0015AC  EC63  F01C         	call	_battConfigByte	;wreg free
  7781                           
  7782                           ;batteries.c: 56: battConfigByte(0x66, 2950 & 0xFF);
  7783  0015B0  6E05               	movwf	??_battConfig& (0+255),c
  7784  0015B2  0E66               	movlw	102
  7785  0015B4  6E02               	movwf	?_battConfigByte,c
  7786  0015B6  5005               	movf	??_battConfig& (0+255),w,c
  7787  0015B8  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7788  0015BA  0E86               	movlw	134
  7789  0015BC  6E03               	movwf	?_battConfigByte+1,c
  7790  0015BE  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7791  0015C0  EC63  F01C         	call	_battConfigByte	;wreg free
  7792                           
  7793                           ;batteries.c: 58: battConfigByte(0x67, 12600 >> 8);
  7794  0015C4  6E05               	movwf	??_battConfig& (0+255),c
  7795  0015C6  0E67               	movlw	103
  7796  0015C8  6E02               	movwf	?_battConfigByte,c
  7797  0015CA  5005               	movf	??_battConfig& (0+255),w,c
  7798  0015CC  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7799  0015CE  0E31               	movlw	49
  7800  0015D0  6E03               	movwf	?_battConfigByte+1,c
  7801  0015D2  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7802  0015D4  EC63  F01C         	call	_battConfigByte	;wreg free
  7803                           
  7804                           ;batteries.c: 59: battConfigByte(0x68, 12600 & 0xFF);
  7805  0015D8  6E05               	movwf	??_battConfig& (0+255),c
  7806  0015DA  0E68               	movlw	104
  7807  0015DC  6E02               	movwf	?_battConfigByte,c
  7808  0015DE  5005               	movf	??_battConfig& (0+255),w,c
  7809  0015E0  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7810  0015E2  0E38               	movlw	56
  7811  0015E4  6E03               	movwf	?_battConfigByte+1,c
  7812  0015E6  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7813  0015E8  EC63  F01C         	call	_battConfigByte	;wreg free
  7814                           
  7815                           ;batteries.c: 61: battConfigByte(0x6B, 13000 >> 8);
  7816  0015EC  6E05               	movwf	??_battConfig& (0+255),c
  7817  0015EE  0E6B               	movlw	107
  7818  0015F0  6E02               	movwf	?_battConfigByte,c
  7819  0015F2  5005               	movf	??_battConfig& (0+255),w,c
  7820  0015F4  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7821  0015F6  0E32               	movlw	50
  7822  0015F8  6E03               	movwf	?_battConfigByte+1,c
  7823  0015FA  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7824  0015FC  EC63  F01C         	call	_battConfigByte	;wreg free
  7825                           
  7826                           ;batteries.c: 62: battConfigByte(0x6C, 13000 & 0xFF);
  7827  001600  6E05               	movwf	??_battConfig& (0+255),c
  7828  001602  0E6C               	movlw	108
  7829  001604  6E02               	movwf	?_battConfigByte,c
  7830  001606  5005               	movf	??_battConfig& (0+255),w,c
  7831  001608  6E06               	movwf	(??_battConfig+1)& (0+255),c
  7832  00160A  0EC8               	movlw	200
  7833  00160C  6E03               	movwf	?_battConfigByte+1,c
  7834  00160E  5006               	movf	(??_battConfig+1)& (0+255),w,c
  7835  001610  EC63  F01C         	call	_battConfigByte	;wreg free
  7836  001614  0012               	return	
  7837  001616                     __end_of_battConfig:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           intcon	equ	0xFF2
  7844                           intcon2	equ	0xFF1
  7845                           postinc0	equ	0xFEE
  7846                           wreg	equ	0xFE8
  7847                           postinc1	equ	0xFE6
  7848                           postdec1	equ	0xFE5
  7849                           fsr1l	equ	0xFE1
  7850                           indf2	equ	0xFDF
  7851                           postinc2	equ	0xFDE
  7852                           postdec2	equ	0xFDD
  7853                           fsr2h	equ	0xFDA
  7854                           fsr2l	equ	0xFD9
  7855                           status	equ	0xFD8
  7856                           
  7857 ;; *************** function _battConfigByte *****************
  7858 ;; Defined at:
  7859 ;;		line 103 in file "batteries.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  reg             1    1[COMRAM] unsigned char 
  7862 ;;  data            1    2[COMRAM] unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7874 ;;      Params:         2       0       0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0
  7876 ;;      Temps:          1       0       0       0       0       0       0
  7877 ;;      Totals:         3       0       0       0       0       0       0
  7878 ;;Total ram usage:        3 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    2
  7881 ;; This function calls:
  7882 ;;		_WriteI2C
  7883 ;; This function is called by:
  7884 ;;		_battConfig
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text48
  7889  0038C6                     __ptext48:
  7890                           	opt stack 0
  7891  0038C6                     _battConfigByte:
  7892                           	opt stack 27
  7893                           
  7894                           ;batteries.c: 104: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7895                           
  7896                           ;incstack = 0
  7897                           ;incstack = 0
  7898  0038C6  80C5               	bsf	4037,0,c	;volatile
  7899  0038C8                     l900:
  7900  0038C8  B0C5               	btfsc	4037,0,c	;volatile
  7901  0038CA  D7FE               	goto	l900
  7902                           
  7903                           ;batteries.c: 105: WriteI2C(0x16);
  7904  0038CC  6E04               	movwf	??_battConfigByte& (0+255),c
  7905  0038CE  0E16               	movlw	22
  7906  0038D0  6E01               	movwf	?_WriteI2C,c
  7907  0038D2  5004               	movf	??_battConfigByte& (0+255),w,c
  7908  0038D4  ECAF  F01A         	call	_WriteI2C	;wreg free
  7909                           
  7910                           ;batteries.c: 106: WriteI2C(0x50);
  7911  0038D8  6E04               	movwf	??_battConfigByte& (0+255),c
  7912  0038DA  0E50               	movlw	80
  7913  0038DC  6E01               	movwf	?_WriteI2C,c
  7914  0038DE  5004               	movf	??_battConfigByte& (0+255),w,c
  7915  0038E0  ECAF  F01A         	call	_WriteI2C	;wreg free
  7916                           
  7917                           ;batteries.c: 107: WriteI2C(reg);
  7918  0038E4  C002  F001         	movff	battConfigByte@reg,?_WriteI2C
  7919  0038E8  ECAF  F01A         	call	_WriteI2C	;wreg free
  7920                           
  7921                           ;batteries.c: 108: WriteI2C(data);
  7922  0038EC  C003  F001         	movff	battConfigByte@data,?_WriteI2C
  7923  0038F0  ECAF  F01A         	call	_WriteI2C	;wreg free
  7924                           
  7925                           ;batteries.c: 109: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7926  0038F4  84C5               	bsf	4037,2,c	;volatile
  7927  0038F6                     l903:
  7928  0038F6  A4C5               	btfss	4037,2,c	;volatile
  7929  0038F8  0012               	return	
  7930  0038FA  D7FD               	goto	l903
  7931  0038FC                     __end_of_battConfigByte:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           intcon	equ	0xFF2
  7938                           intcon2	equ	0xFF1
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           postinc1	equ	0xFE6
  7942                           postdec1	equ	0xFE5
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _baroCalibrate *****************
  7952 ;; Defined at:
  7953 ;;		line 43 in file "barometer.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;		None
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  presLocalTru    4   88[COMRAM] long 
  7958 ;;  b               3   81[COMRAM] float 
  7959 ;;  m               3   78[COMRAM] float 
  7960 ;;  temperatureR    2   86[COMRAM] unsigned short 
  7961 ;;  presLocalRaw    2   84[COMRAM] unsigned short 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;		None               void
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7971 ;;      Params:         0       0       0       0       0       0       0
  7972 ;;      Locals:        14       0       0       0       0       0       0
  7973 ;;      Temps:          1       0       0       0       0       0       0
  7974 ;;      Totals:        15       0       0       0       0       0       0
  7975 ;;Total ram usage:       15 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    3
  7978 ;; This function calls:
  7979 ;;		_baroGetVal
  7980 ;;		_baroTempStart
  7981 ;;		_baroPresStart
  7982 ;;		_baroTrueTemp
  7983 ;;		_baroTruePres
  7984 ;;		_baroConvertAlt
  7985 ;;		___altoft
  7986 ;;		___ftadd
  7987 ;;		___ftdiv
  7988 ;;		___ftmul
  7989 ;;		___fttol
  7990 ;; This function is called by:
  7991 ;;		_main
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text49
  7996  0011AC                     __ptext49:
  7997                           	opt stack 0
  7998  0011AC                     _baroCalibrate:
  7999                           	opt stack 27
  8000                           
  8001                           ;barometer.c: 44: unsigned short presLocalRaw;
  8002                           ;barometer.c: 45: long presLocalTrue;
  8003                           ;barometer.c: 46: unsigned short temperatureRaw;
  8004                           ;barometer.c: 47: float m;
  8005                           ;barometer.c: 48: float b;
  8006                           ;barometer.c: 50: AC1 = baroGetVal(0xAA);
  8007                           
  8008                           ;incstack = 0
  8009                           ;incstack = 0
  8010  0011AC  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8011  0011AE  0EAA               	movlw	170
  8012  0011B0  6E02               	movwf	?_baroGetVal,c
  8013  0011B2  504E               	movf	??_baroCalibrate& (0+255),w,c
  8014  0011B4  ECF7  F016         	call	_baroGetVal	;wreg free
  8015  0011B8  C002  F09C         	movff	?_baroGetVal,_AC1
  8016  0011BC  C003  F09D         	movff	?_baroGetVal+1,_AC1+1
  8017                           
  8018                           ;barometer.c: 51: AC2 = baroGetVal(0xAC);
  8019  0011C0  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8020  0011C2  0EAC               	movlw	172
  8021  0011C4  6E02               	movwf	?_baroGetVal,c
  8022  0011C6  504E               	movf	??_baroCalibrate& (0+255),w,c
  8023  0011C8  ECF7  F016         	call	_baroGetVal	;wreg free
  8024  0011CC  C002  F09E         	movff	?_baroGetVal,_AC2
  8025  0011D0  C003  F09F         	movff	?_baroGetVal+1,_AC2+1
  8026                           
  8027                           ;barometer.c: 52: AC3 = baroGetVal(0xAE);
  8028  0011D4  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8029  0011D6  0EAE               	movlw	174
  8030  0011D8  6E02               	movwf	?_baroGetVal,c
  8031  0011DA  504E               	movf	??_baroCalibrate& (0+255),w,c
  8032  0011DC  ECF7  F016         	call	_baroGetVal	;wreg free
  8033  0011E0  C002  F0A0         	movff	?_baroGetVal,_AC3
  8034  0011E4  C003  F0A1         	movff	?_baroGetVal+1,_AC3+1
  8035                           
  8036                           ;barometer.c: 53: AC4 = baroGetVal(0xB0);
  8037  0011E8  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8038  0011EA  0EB0               	movlw	176
  8039  0011EC  6E02               	movwf	?_baroGetVal,c
  8040  0011EE  504E               	movf	??_baroCalibrate& (0+255),w,c
  8041  0011F0  ECF7  F016         	call	_baroGetVal	;wreg free
  8042  0011F4  C002  F0A2         	movff	?_baroGetVal,_AC4
  8043  0011F8  C003  F0A3         	movff	?_baroGetVal+1,_AC4+1
  8044                           
  8045                           ;barometer.c: 54: AC5 = baroGetVal(0xB2);
  8046  0011FC  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8047  0011FE  0EB2               	movlw	178
  8048  001200  6E02               	movwf	?_baroGetVal,c
  8049  001202  504E               	movf	??_baroCalibrate& (0+255),w,c
  8050  001204  ECF7  F016         	call	_baroGetVal	;wreg free
  8051  001208  C002  F0A4         	movff	?_baroGetVal,_AC5
  8052  00120C  C003  F0A5         	movff	?_baroGetVal+1,_AC5+1
  8053                           
  8054                           ;barometer.c: 55: AC6 = baroGetVal(0xB4);
  8055  001210  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8056  001212  0EB4               	movlw	180
  8057  001214  6E02               	movwf	?_baroGetVal,c
  8058  001216  504E               	movf	??_baroCalibrate& (0+255),w,c
  8059  001218  ECF7  F016         	call	_baroGetVal	;wreg free
  8060  00121C  C002  F0A6         	movff	?_baroGetVal,_AC6
  8061  001220  C003  F0A7         	movff	?_baroGetVal+1,_AC6+1
  8062                           
  8063                           ;barometer.c: 56: B1 = baroGetVal(0xB6);
  8064  001224  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8065  001226  0EB6               	movlw	182
  8066  001228  6E02               	movwf	?_baroGetVal,c
  8067  00122A  504E               	movf	??_baroCalibrate& (0+255),w,c
  8068  00122C  ECF7  F016         	call	_baroGetVal	;wreg free
  8069  001230  C002  F0A8         	movff	?_baroGetVal,_B1
  8070  001234  C003  F0A9         	movff	?_baroGetVal+1,_B1+1
  8071                           
  8072                           ;barometer.c: 57: B2 = baroGetVal(0xB8);
  8073  001238  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8074  00123A  0EB8               	movlw	184
  8075  00123C  6E02               	movwf	?_baroGetVal,c
  8076  00123E  504E               	movf	??_baroCalibrate& (0+255),w,c
  8077  001240  ECF7  F016         	call	_baroGetVal	;wreg free
  8078  001244  C002  F0AA         	movff	?_baroGetVal,_B2
  8079  001248  C003  F0AB         	movff	?_baroGetVal+1,_B2+1
  8080                           
  8081                           ;barometer.c: 58: MB = baroGetVal(0xBA);
  8082  00124C  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8083  00124E  0EBA               	movlw	186
  8084  001250  6E02               	movwf	?_baroGetVal,c
  8085  001252  504E               	movf	??_baroCalibrate& (0+255),w,c
  8086  001254  ECF7  F016         	call	_baroGetVal	;wreg free
  8087  001258  C002  F0AC         	movff	?_baroGetVal,_MB
  8088  00125C  C003  F0AD         	movff	?_baroGetVal+1,_MB+1
  8089                           
  8090                           ;barometer.c: 59: MC = baroGetVal(0xBC);
  8091  001260  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8092  001262  0EBC               	movlw	188
  8093  001264  6E02               	movwf	?_baroGetVal,c
  8094  001266  504E               	movf	??_baroCalibrate& (0+255),w,c
  8095  001268  ECF7  F016         	call	_baroGetVal	;wreg free
  8096  00126C  C002  F0AE         	movff	?_baroGetVal,_MC
  8097  001270  C003  F0AF         	movff	?_baroGetVal+1,_MC+1
  8098                           
  8099                           ;barometer.c: 60: MD = baroGetVal(0xBE);
  8100  001274  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8101  001276  0EBE               	movlw	190
  8102  001278  6E02               	movwf	?_baroGetVal,c
  8103  00127A  504E               	movf	??_baroCalibrate& (0+255),w,c
  8104  00127C  ECF7  F016         	call	_baroGetVal	;wreg free
  8105  001280  C002  F0B0         	movff	?_baroGetVal,_MD
  8106  001284  C003  F0B1         	movff	?_baroGetVal+1,_MD+1
  8107                           
  8108                           ;barometer.c: 62: baroTempStart();
  8109  001288  EC84  F01A         	call	_baroTempStart	;wreg free
  8110  00128C                     l778:
  8111  00128C  A881               	btfss	3969,4,c	;volatile
  8112  00128E  D7FE               	goto	l778
  8113                           
  8114                           ;barometer.c: 64: temperatureRaw = baroGetVal(0xF6);
  8115  001290  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8116  001292  0EF6               	movlw	246
  8117  001294  6E02               	movwf	?_baroGetVal,c
  8118  001296  504E               	movf	??_baroCalibrate& (0+255),w,c
  8119  001298  ECF7  F016         	call	_baroGetVal	;wreg free
  8120  00129C  C002  F057         	movff	?_baroGetVal,baroCalibrate@temperatureRaw
  8121  0012A0  C003  F058         	movff	?_baroGetVal+1,baroCalibrate@temperatureRaw+1
  8122                           
  8123                           ;barometer.c: 66: baroPresStart();
  8124  0012A4  EC59  F01A         	call	_baroPresStart	;wreg free
  8125  0012A8                     l781:
  8126  0012A8  A881               	btfss	3969,4,c	;volatile
  8127  0012AA  D7FE               	goto	l781
  8128                           
  8129                           ;barometer.c: 68: presLocalRaw = baroGetVal(0xF6);
  8130  0012AC  6E4E               	movwf	??_baroCalibrate& (0+255),c
  8131  0012AE  0EF6               	movlw	246
  8132  0012B0  6E02               	movwf	?_baroGetVal,c
  8133  0012B2  504E               	movf	??_baroCalibrate& (0+255),w,c
  8134  0012B4  ECF7  F016         	call	_baroGetVal	;wreg free
  8135  0012B8  C002  F055         	movff	?_baroGetVal,baroCalibrate@presLocalRaw
  8136  0012BC  C003  F056         	movff	?_baroGetVal+1,baroCalibrate@presLocalRaw+1
  8137                           
  8138                           ;barometer.c: 70: baroTrueTemp(temperatureRaw);
  8139  0012C0  C057  F010         	movff	baroCalibrate@temperatureRaw,?_baroTrueTemp
  8140  0012C4  C058  F011         	movff	baroCalibrate@temperatureRaw+1,?_baroTrueTemp+1
  8141  0012C8  EC85  F00D         	call	_baroTrueTemp	;wreg free
  8142                           
  8143                           ;barometer.c: 71: presLocalTrue = baroTruePres(presLocalRaw);
  8144  0012CC  C055  F010         	movff	baroCalibrate@presLocalRaw,?_baroTruePres
  8145  0012D0  C056  F011         	movff	baroCalibrate@presLocalRaw+1,?_baroTruePres+1
  8146  0012D4  EC11  F003         	call	_baroTruePres	;wreg free
  8147  0012D8  C013  F05C         	movff	?_baroTruePres+3,baroCalibrate@presLocalTrue+3
  8148  0012DC  C012  F05B         	movff	?_baroTruePres+2,baroCalibrate@presLocalTrue+2
  8149  0012E0  C011  F05A         	movff	?_baroTruePres+1,baroCalibrate@presLocalTrue+1
  8150  0012E4  C010  F059         	movff	?_baroTruePres,baroCalibrate@presLocalTrue
  8151                           
  8152                           ;barometer.c: 73: m = ((float)presLocalTrue) / 8083.005;
  8153  0012E8  C059  F010         	movff	baroCalibrate@presLocalTrue,?___altoft
  8154  0012EC  C05A  F011         	movff	baroCalibrate@presLocalTrue+1,?___altoft+1
  8155  0012F0  C05B  F012         	movff	baroCalibrate@presLocalTrue+2,?___altoft+2
  8156  0012F4  C05C  F013         	movff	baroCalibrate@presLocalTrue+3,?___altoft+3
  8157  0012F8  EC80  F017         	call	___altoft	;wreg free
  8158  0012FC  C012  F01F         	movff	?___altoft+2,?___ftdiv+2
  8159  001300  C011  F01E         	movff	?___altoft+1,?___ftdiv+1
  8160  001304  C010  F01D         	movff	?___altoft,?___ftdiv
  8161  001308  0E98               	movlw	152
  8162  00130A  6E20               	movwf	?___ftdiv+3,c
  8163  00130C  0EFC               	movlw	252
  8164  00130E  6E21               	movwf	?___ftdiv+4,c
  8165  001310  0E45               	movlw	69
  8166  001312  6E22               	movwf	?___ftdiv+5,c
  8167  001314  EC7C  F011         	call	___ftdiv	;wreg free
  8168  001318  C01F  F051         	movff	?___ftdiv+2,baroCalibrate@m+2
  8169  00131C  C01E  F050         	movff	?___ftdiv+1,baroCalibrate@m+1
  8170  001320  C01D  F04F         	movff	?___ftdiv,baroCalibrate@m
  8171                           
  8172                           ;barometer.c: 74: b = ((float)presLocalTrue) / 1.0004796;
  8173  001324  C059  F010         	movff	baroCalibrate@presLocalTrue,?___altoft
  8174  001328  C05A  F011         	movff	baroCalibrate@presLocalTrue+1,?___altoft+1
  8175  00132C  C05B  F012         	movff	baroCalibrate@presLocalTrue+2,?___altoft+2
  8176  001330  C05C  F013         	movff	baroCalibrate@presLocalTrue+3,?___altoft+3
  8177  001334  EC80  F017         	call	___altoft	;wreg free
  8178  001338  C012  F01F         	movff	?___altoft+2,?___ftdiv+2
  8179  00133C  C011  F01E         	movff	?___altoft+1,?___ftdiv+1
  8180  001340  C010  F01D         	movff	?___altoft,?___ftdiv
  8181  001344  0E10               	movlw	16
  8182  001346  6E20               	movwf	?___ftdiv+3,c
  8183  001348  0E80               	movlw	128
  8184  00134A  6E21               	movwf	?___ftdiv+4,c
  8185  00134C  0E3F               	movlw	63
  8186  00134E  6E22               	movwf	?___ftdiv+5,c
  8187  001350  EC7C  F011         	call	___ftdiv	;wreg free
  8188  001354  C01F  F054         	movff	?___ftdiv+2,baroCalibrate@b+2
  8189  001358  C01E  F053         	movff	?___ftdiv+1,baroCalibrate@b+1
  8190  00135C  C01D  F052         	movff	?___ftdiv,baroCalibrate@b
  8191                           
  8192                           ;barometer.c: 76: presSeaLevel = (long)((m * 29000) + b);
  8193  001360  C052  F031         	movff	baroCalibrate@b,?___ftadd+3
  8194  001364  C053  F032         	movff	baroCalibrate@b+1,?___ftadd+4
  8195  001368  C054  F033         	movff	baroCalibrate@b+2,?___ftadd+5
  8196  00136C  0E90               	movlw	144
  8197  00136E  6E20               	movwf	?___ftmul+3,c
  8198  001370  0EE2               	movlw	226
  8199  001372  6E21               	movwf	?___ftmul+4,c
  8200  001374  0E46               	movlw	70
  8201  001376  6E22               	movwf	?___ftmul+5,c
  8202  001378  C04F  F01D         	movff	baroCalibrate@m,?___ftmul
  8203  00137C  C050  F01E         	movff	baroCalibrate@m+1,?___ftmul+1
  8204  001380  C051  F01F         	movff	baroCalibrate@m+2,?___ftmul+2
  8205  001384  ECF4  F010         	call	___ftmul	;wreg free
  8206  001388  C01F  F030         	movff	?___ftmul+2,?___ftadd+2
  8207  00138C  C01E  F02F         	movff	?___ftmul+1,?___ftadd+1
  8208  001390  C01D  F02E         	movff	?___ftmul,?___ftadd
  8209  001394  EC0B  F00B         	call	___ftadd	;wreg free
  8210  001398  C030  F00B         	movff	?___ftadd+2,?___fttol+2
  8211  00139C  C02F  F00A         	movff	?___ftadd+1,?___fttol+1
  8212  0013A0  C02E  F009         	movff	?___ftadd,?___fttol
  8213  0013A4  ECE5  F012         	call	___fttol	;wreg free
  8214  0013A8  C00C  F09B         	movff	?___fttol+3,_presSeaLevel+3
  8215  0013AC  C00B  F09A         	movff	?___fttol+2,_presSeaLevel+2
  8216  0013B0  C00A  F099         	movff	?___fttol+1,_presSeaLevel+1
  8217  0013B4  C009  F098         	movff	?___fttol,_presSeaLevel
  8218                           
  8219                           ;barometer.c: 78: altOffset = 0;
  8220  0013B8  0E00               	movlw	0
  8221  0013BA  0100               	movlb	0	; () banked
  8222  0013BC  0100               	movlb	0	; () banked
  8223  0013BE  6F94               	movwf	_altOffset& (0+255),b
  8224  0013C0  0E00               	movlw	0
  8225  0013C2  0100               	movlb	0	; () banked
  8226  0013C4  6F95               	movwf	(_altOffset+1)& (0+255),b
  8227  0013C6  0E00               	movlw	0
  8228  0013C8  0100               	movlb	0	; () banked
  8229  0013CA  6F96               	movwf	(_altOffset+2)& (0+255),b
  8230  0013CC  0E00               	movlw	0
  8231  0013CE  0100               	movlb	0	; () banked
  8232  0013D0  6F97               	movwf	(_altOffset+3)& (0+255),b
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;barometer.c: 79: altOffset = baroConvertAlt(presLocalTrue);
  8236  0013D2  C059  F03C         	movff	baroCalibrate@presLocalTrue,?_baroConvertAlt
  8237  0013D6  C05A  F03D         	movff	baroCalibrate@presLocalTrue+1,?_baroConvertAlt+1
  8238  0013DA  C05B  F03E         	movff	baroCalibrate@presLocalTrue+2,?_baroConvertAlt+2
  8239  0013DE  C05C  F03F         	movff	baroCalibrate@presLocalTrue+3,?_baroConvertAlt+3
  8240  0013E2  ECB1  F00E         	call	_baroConvertAlt	;wreg free
  8241  0013E6  C03F  F097         	movff	?_baroConvertAlt+3,_altOffset+3
  8242  0013EA  C03E  F096         	movff	?_baroConvertAlt+2,_altOffset+2
  8243  0013EE  C03D  F095         	movff	?_baroConvertAlt+1,_altOffset+1
  8244  0013F2  C03C  F094         	movff	?_baroConvertAlt,_altOffset
  8245  0013F6  0012               	return	
  8246  0013F8                     __end_of_baroCalibrate:
  8247                           	opt stack 0
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           intcon	equ	0xFF2
  8253                           intcon2	equ	0xFF1
  8254                           postinc0	equ	0xFEE
  8255                           wreg	equ	0xFE8
  8256                           postinc1	equ	0xFE6
  8257                           postdec1	equ	0xFE5
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function ___fttol *****************
  8267 ;; Defined at:
  8268 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\fttol.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  f1              3    8[COMRAM] float 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  lval            4   18[COMRAM] unsigned long 
  8273 ;;  exp1            1   22[COMRAM] unsigned char 
  8274 ;;  sign1           1   17[COMRAM] unsigned char 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  4    8[COMRAM] long 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8284 ;;      Params:         4       0       0       0       0       0       0
  8285 ;;      Locals:         6       0       0       0       0       0       0
  8286 ;;      Temps:          5       0       0       0       0       0       0
  8287 ;;      Totals:        15       0       0       0       0       0       0
  8288 ;;Total ram usage:       15 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_accelGetRoll
  8294 ;;		_baroCalibrate
  8295 ;;		_baroConvertAlt
  8296 ;;		_getArrayVoltage
  8297 ;;		_getArrayCurrent
  8298 ;;		_getArrayPower
  8299 ;;		_updateSensorPData
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text50
  8304  0025CA                     __ptext50:
  8305                           	opt stack 0
  8306  0025CA                     ___fttol:
  8307                           	opt stack 28
  8308                           
  8309                           ;incstack = 0
  8310                           ;incstack = 0
  8311  0025CA  0E0F               	movlw	15
  8312  0025CC  6E0D               	movwf	??___fttol& (0+255),c
  8313  0025CE  C009  F00E         	movff	___fttol@f1,??___fttol+1
  8314  0025D2  C00A  F00F         	movff	___fttol@f1+1,??___fttol+2
  8315  0025D6  C00B  F010         	movff	___fttol@f1+2,??___fttol+3
  8316  0025DA  280D               	incf	??___fttol,w,c
  8317  0025DC  6E11               	movwf	(??___fttol+4)& (0+255),c
  8318  0025DE  D004               	goto	u6150
  8319  0025E0                     u6155:
  8320  0025E0  90D8               	bcf	status,0,c
  8321  0025E2  3210               	rrcf	??___fttol+3,f,c
  8322  0025E4  320F               	rrcf	??___fttol+2,f,c
  8323  0025E6  320E               	rrcf	??___fttol+1,f,c
  8324  0025E8                     u6150:
  8325  0025E8  2E11               	decfsz	(??___fttol+4)& (0+255),f,c
  8326  0025EA  D7FA               	goto	u6155
  8327  0025EC  500E               	movf	??___fttol+1,w,c
  8328  0025EE  6E17               	movwf	___fttol@exp1,c
  8329  0025F0  6617               	tstfsz	___fttol@exp1& (0+255),c
  8330  0025F2  D001               	goto	l7062
  8331  0025F4  D035               	goto	u6200
  8332  0025F6                     l7062:
  8333  0025F6  0E17               	movlw	23
  8334  0025F8  6E0D               	movwf	??___fttol& (0+255),c
  8335  0025FA  C009  F00E         	movff	___fttol@f1,??___fttol+1
  8336  0025FE  C00A  F00F         	movff	___fttol@f1+1,??___fttol+2
  8337  002602  C00B  F010         	movff	___fttol@f1+2,??___fttol+3
  8338  002606  280D               	incf	??___fttol,w,c
  8339  002608  6E11               	movwf	(??___fttol+4)& (0+255),c
  8340  00260A  D004               	goto	u6170
  8341  00260C                     u6175:
  8342  00260C  90D8               	bcf	status,0,c
  8343  00260E  3210               	rrcf	??___fttol+3,f,c
  8344  002610  320F               	rrcf	??___fttol+2,f,c
  8345  002612  320E               	rrcf	??___fttol+1,f,c
  8346  002614                     u6170:
  8347  002614  2E11               	decfsz	(??___fttol+4)& (0+255),f,c
  8348  002616  D7FA               	goto	u6175
  8349  002618  500E               	movf	??___fttol+1,w,c
  8350  00261A  6E12               	movwf	___fttol@sign1,c
  8351  00261C  8E0A               	bsf	___fttol@f1+1,7,c
  8352  00261E  0EFF               	movlw	255
  8353  002620  1609               	andwf	___fttol@f1,f,c
  8354  002622  0EFF               	movlw	255
  8355  002624  160A               	andwf	___fttol@f1+1,f,c
  8356  002626  0E00               	movlw	0
  8357  002628  160B               	andwf	___fttol@f1+2,f,c
  8358  00262A  5009               	movf	___fttol@f1,w,c
  8359  00262C  6E13               	movwf	___fttol@lval,c
  8360  00262E  500A               	movf	___fttol@f1+1,w,c
  8361  002630  6E14               	movwf	___fttol@lval+1,c
  8362  002632  500B               	movf	___fttol@f1+2,w,c
  8363  002634  6E15               	movwf	___fttol@lval+2,c
  8364  002636  6A16               	clrf	___fttol@lval+3,c
  8365  002638  0E8E               	movlw	142
  8366  00263A  5E17               	subwf	___fttol@exp1,f,c
  8367  00263C  AE17               	btfss	___fttol@exp1,7,c
  8368  00263E  D00D               	goto	l7084
  8369  002640  5017               	movf	___fttol@exp1,w,c
  8370  002642  0A80               	xorlw	128
  8371  002644  0F8F               	addlw	143
  8372  002646  A0D8               	btfss	status,0,c
  8373  002648  D00B               	goto	u6200
  8374  00264A                     l7080:
  8375  00264A  90D8               	bcf	status,0,c
  8376  00264C  3216               	rrcf	___fttol@lval+3,f,c
  8377  00264E  3215               	rrcf	___fttol@lval+2,f,c
  8378  002650  3214               	rrcf	___fttol@lval+1,f,c
  8379  002652  3213               	rrcf	___fttol@lval,f,c
  8380  002654  3E17               	incfsz	___fttol@exp1,f,c
  8381  002656  D7F9               	goto	l7080
  8382  002658  D014               	goto	l7094
  8383  00265A                     l7084:
  8384  00265A  0E17               	movlw	23
  8385  00265C  6417               	cpfsgt	___fttol@exp1,c
  8386  00265E  D00F               	goto	l7092
  8387  002660                     u6200:
  8388  002660  0E00               	movlw	0
  8389  002662  6E09               	movwf	?___fttol,c
  8390  002664  0E00               	movlw	0
  8391  002666  6E0A               	movwf	?___fttol+1,c
  8392  002668  0E00               	movlw	0
  8393  00266A  6E0B               	movwf	?___fttol+2,c
  8394  00266C  0E00               	movlw	0
  8395  00266E  6E0C               	movwf	?___fttol+3,c
  8396  002670  D01B               	goto	l1917
  8397  002672                     l7090:
  8398  002672  90D8               	bcf	status,0,c
  8399  002674  3613               	rlcf	___fttol@lval,f,c
  8400  002676  3614               	rlcf	___fttol@lval+1,f,c
  8401  002678  3615               	rlcf	___fttol@lval+2,f,c
  8402  00267A  3616               	rlcf	___fttol@lval+3,f,c
  8403  00267C  0617               	decf	___fttol@exp1,f,c
  8404  00267E                     l7092:
  8405  00267E  6617               	tstfsz	___fttol@exp1,c
  8406  002680  D7F8               	goto	l7090
  8407  002682                     l7094:
  8408  002682  5012               	movf	___fttol@sign1,w,c
  8409  002684  B4D8               	btfsc	status,2,c
  8410  002686  D008               	goto	l7098
  8411  002688  1E16               	comf	___fttol@lval+3,f,c
  8412  00268A  1E15               	comf	___fttol@lval+2,f,c
  8413  00268C  1E14               	comf	___fttol@lval+1,f,c
  8414  00268E  6C13               	negf	___fttol@lval,c
  8415  002690  0E00               	movlw	0
  8416  002692  2214               	addwfc	___fttol@lval+1,f,c
  8417  002694  2215               	addwfc	___fttol@lval+2,f,c
  8418  002696  2216               	addwfc	___fttol@lval+3,f,c
  8419  002698                     l7098:
  8420  002698  C013  F009         	movff	___fttol@lval,?___fttol
  8421  00269C  C014  F00A         	movff	___fttol@lval+1,?___fttol+1
  8422  0026A0  C015  F00B         	movff	___fttol@lval+2,?___fttol+2
  8423  0026A4  C016  F00C         	movff	___fttol@lval+3,?___fttol+3
  8424  0026A8                     l1917:
  8425  0026A8  0012               	return	
  8426  0026AA                     __end_of___fttol:
  8427                           	opt stack 0
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           intcon	equ	0xFF2
  8433                           intcon2	equ	0xFF1
  8434                           postinc0	equ	0xFEE
  8435                           wreg	equ	0xFE8
  8436                           postinc1	equ	0xFE6
  8437                           postdec1	equ	0xFE5
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function ___altoft *****************
  8447 ;; Defined at:
  8448 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\altoft.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  c               4   15[COMRAM] long 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  sign            1   24[COMRAM] unsigned char 
  8453 ;;  exp             1   23[COMRAM] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  3   15[COMRAM] float 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8463 ;;      Params:         4       0       0       0       0       0       0
  8464 ;;      Locals:         2       0       0       0       0       0       0
  8465 ;;      Temps:          4       0       0       0       0       0       0
  8466 ;;      Totals:        10       0       0       0       0       0       0
  8467 ;;Total ram usage:       10 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    1
  8470 ;; This function calls:
  8471 ;;		___ftpack
  8472 ;; This function is called by:
  8473 ;;		_baroCalibrate
  8474 ;;		_baroConvertAlt
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text51
  8479  002F00                     __ptext51:
  8480                           	opt stack 0
  8481  002F00                     ___altoft:
  8482                           	opt stack 27
  8483                           
  8484                           ;incstack = 0
  8485                           ;incstack = 0
  8486  002F00  6E14               	movwf	??___altoft& (0+255),c
  8487  002F02  0E00               	movlw	0
  8488  002F04  6E19               	movwf	___altoft@sign,c
  8489  002F06  5014               	movf	??___altoft& (0+255),w,c
  8490  002F08  6E14               	movwf	??___altoft& (0+255),c
  8491  002F0A  0E8E               	movlw	142
  8492  002F0C  6E18               	movwf	___altoft@exp,c
  8493  002F0E  5014               	movf	??___altoft& (0+255),w,c
  8494  002F10  AE13               	btfss	___altoft@c+3,7,c
  8495  002F12  D013               	goto	l6910
  8496  002F14  1E13               	comf	___altoft@c+3,f,c
  8497  002F16  1E12               	comf	___altoft@c+2,f,c
  8498  002F18  1E11               	comf	___altoft@c+1,f,c
  8499  002F1A  6C10               	negf	___altoft@c,c
  8500  002F1C  0E00               	movlw	0
  8501  002F1E  2211               	addwfc	___altoft@c+1,f,c
  8502  002F20  2212               	addwfc	___altoft@c+2,f,c
  8503  002F22  2213               	addwfc	___altoft@c+3,f,c
  8504  002F24  6E14               	movwf	??___altoft& (0+255),c
  8505  002F26  0E01               	movlw	1
  8506  002F28  6E19               	movwf	___altoft@sign,c
  8507  002F2A  5014               	movf	??___altoft& (0+255),w,c
  8508  002F2C  D006               	goto	l6910
  8509  002F2E                     l6908:
  8510  002F2E  90D8               	bcf	status,0,c
  8511  002F30  3213               	rrcf	___altoft@c+3,f,c
  8512  002F32  3212               	rrcf	___altoft@c+2,f,c
  8513  002F34  3211               	rrcf	___altoft@c+1,f,c
  8514  002F36  3210               	rrcf	___altoft@c,f,c
  8515  002F38  2A18               	incf	___altoft@exp,f,c
  8516  002F3A                     l6910:
  8517  002F3A  0E00               	movlw	0
  8518  002F3C  1410               	andwf	___altoft@c,w,c
  8519  002F3E  6E14               	movwf	??___altoft& (0+255),c
  8520  002F40  0E00               	movlw	0
  8521  002F42  1411               	andwf	___altoft@c+1,w,c
  8522  002F44  6E15               	movwf	(??___altoft+1)& (0+255),c
  8523  002F46  0E00               	movlw	0
  8524  002F48  1412               	andwf	___altoft@c+2,w,c
  8525  002F4A  6E16               	movwf	(??___altoft+2)& (0+255),c
  8526  002F4C  0EFF               	movlw	255
  8527  002F4E  1413               	andwf	___altoft@c+3,w,c
  8528  002F50  6E17               	movwf	(??___altoft+3)& (0+255),c
  8529  002F52  5017               	movf	??___altoft+3,w,c
  8530  002F54  1014               	iorwf	??___altoft,w,c
  8531  002F56  1015               	iorwf	??___altoft+1,w,c
  8532  002F58  1016               	iorwf	??___altoft+2,w,c
  8533  002F5A  A4D8               	btfss	status,2,c
  8534  002F5C  D7E8               	goto	l6908
  8535  002F5E  C010  F001         	movff	___altoft@c,?___ftpack
  8536  002F62  C011  F002         	movff	___altoft@c+1,?___ftpack+1
  8537  002F66  C012  F003         	movff	___altoft@c+2,?___ftpack+2
  8538  002F6A  C018  F004         	movff	___altoft@exp,?___ftpack+3
  8539  002F6E  C019  F005         	movff	___altoft@sign,?___ftpack+4
  8540  002F72  EC2A  F014         	call	___ftpack	;wreg free
  8541  002F76  C003  F012         	movff	?___ftpack+2,?___altoft+2
  8542  002F7A  C002  F011         	movff	?___ftpack+1,?___altoft+1
  8543  002F7E  C001  F010         	movff	?___ftpack,?___altoft
  8544  002F82  0012               	return	
  8545  002F84                     __end_of___altoft:
  8546                           	opt stack 0
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           intcon	equ	0xFF2
  8552                           intcon2	equ	0xFF1
  8553                           postinc0	equ	0xFEE
  8554                           wreg	equ	0xFE8
  8555                           postinc1	equ	0xFE6
  8556                           postdec1	equ	0xFE5
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function ___ftpack *****************
  8566 ;; Defined at:
  8567 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\float.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  arg             3    0[COMRAM] unsigned um
  8570 ;;  exp             1    3[COMRAM] unsigned char 
  8571 ;;  sign            1    4[COMRAM] unsigned char 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  3    0[COMRAM] float 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2, status,0
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8583 ;;      Params:         5       0       0       0       0       0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0
  8585 ;;      Temps:          3       0       0       0       0       0       0
  8586 ;;      Totals:         8       0       0       0       0       0       0
  8587 ;;Total ram usage:        8 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; This function calls:
  8590 ;;		Nothing
  8591 ;; This function is called by:
  8592 ;;		___altoft
  8593 ;;		___awtoft
  8594 ;;		___ftadd
  8595 ;;		___ftdiv
  8596 ;;		___ftmul
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text52
  8601  002854                     __ptext52:
  8602                           	opt stack 0
  8603  002854                     ___ftpack:
  8604                           	opt stack 27
  8605                           
  8606                           ;incstack = 0
  8607                           ;incstack = 0
  8608  002854  5004               	movf	___ftpack@exp,w,c
  8609  002856  B4D8               	btfsc	status,2,c
  8610  002858  D005               	goto	l6568
  8611  00285A  5001               	movf	___ftpack@arg,w,c
  8612  00285C  1002               	iorwf	___ftpack@arg+1,w,c
  8613  00285E  1003               	iorwf	___ftpack@arg+2,w,c
  8614  002860  A4D8               	btfss	status,2,c
  8615  002862  D00C               	goto	l6574
  8616  002864                     l6568:
  8617  002864  0E00               	movlw	0
  8618  002866  6E01               	movwf	?___ftpack,c
  8619  002868  0E00               	movlw	0
  8620  00286A  6E02               	movwf	?___ftpack+1,c
  8621  00286C  0E00               	movlw	0
  8622  00286E  6E03               	movwf	?___ftpack+2,c
  8623  002870  D04C               	goto	l1813
  8624  002872                     l6572:
  8625  002872  2A04               	incf	___ftpack@exp,f,c
  8626  002874  90D8               	bcf	status,0,c
  8627  002876  3203               	rrcf	___ftpack@arg+2,f,c
  8628  002878  3202               	rrcf	___ftpack@arg+1,f,c
  8629  00287A  3201               	rrcf	___ftpack@arg,f,c
  8630  00287C                     l6574:
  8631  00287C  0E00               	movlw	0
  8632  00287E  1401               	andwf	___ftpack@arg,w,c
  8633  002880  6E06               	movwf	??___ftpack& (0+255),c
  8634  002882  0E00               	movlw	0
  8635  002884  1402               	andwf	___ftpack@arg+1,w,c
  8636  002886  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8637  002888  0EFE               	movlw	254
  8638  00288A  1403               	andwf	___ftpack@arg+2,w,c
  8639  00288C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8640  00288E  5006               	movf	??___ftpack,w,c
  8641  002890  1007               	iorwf	??___ftpack+1,w,c
  8642  002892  1008               	iorwf	??___ftpack+2,w,c
  8643  002894  B4D8               	btfsc	status,2,c
  8644  002896  D00C               	goto	l6580
  8645  002898  D7EC               	goto	l6572
  8646  00289A                     l6576:
  8647  00289A  2A04               	incf	___ftpack@exp,f,c
  8648  00289C  0E01               	movlw	1
  8649  00289E  2601               	addwf	___ftpack@arg,f,c
  8650  0028A0  0E00               	movlw	0
  8651  0028A2  2202               	addwfc	___ftpack@arg+1,f,c
  8652  0028A4  0E00               	movlw	0
  8653  0028A6  2203               	addwfc	___ftpack@arg+2,f,c
  8654  0028A8  90D8               	bcf	status,0,c
  8655  0028AA  3203               	rrcf	___ftpack@arg+2,f,c
  8656  0028AC  3202               	rrcf	___ftpack@arg+1,f,c
  8657  0028AE  3201               	rrcf	___ftpack@arg,f,c
  8658  0028B0                     l6580:
  8659  0028B0  0E00               	movlw	0
  8660  0028B2  1401               	andwf	___ftpack@arg,w,c
  8661  0028B4  6E06               	movwf	??___ftpack& (0+255),c
  8662  0028B6  0E00               	movlw	0
  8663  0028B8  1402               	andwf	___ftpack@arg+1,w,c
  8664  0028BA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8665  0028BC  0EFF               	movlw	255
  8666  0028BE  1403               	andwf	___ftpack@arg+2,w,c
  8667  0028C0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8668  0028C2  5006               	movf	??___ftpack,w,c
  8669  0028C4  1007               	iorwf	??___ftpack+1,w,c
  8670  0028C6  1008               	iorwf	??___ftpack+2,w,c
  8671  0028C8  B4D8               	btfsc	status,2,c
  8672  0028CA  D006               	goto	l6584
  8673  0028CC  D7E6               	goto	l6576
  8674  0028CE                     l6582:
  8675  0028CE  0604               	decf	___ftpack@exp,f,c
  8676  0028D0  90D8               	bcf	status,0,c
  8677  0028D2  3601               	rlcf	___ftpack@arg,f,c
  8678  0028D4  3602               	rlcf	___ftpack@arg+1,f,c
  8679  0028D6  3603               	rlcf	___ftpack@arg+2,f,c
  8680  0028D8                     l6584:
  8681  0028D8  AE02               	btfss	___ftpack@arg+1,7,c
  8682  0028DA  D7F9               	goto	l6582
  8683  0028DC  A004               	btfss	___ftpack@exp,0,c
  8684  0028DE  9E02               	bcf	___ftpack@arg+1,7,c
  8685  0028E0  90D8               	bcf	status,0,c
  8686  0028E2  3204               	rrcf	___ftpack@exp,f,c
  8687  0028E4  5004               	movf	___ftpack@exp,w,c
  8688  0028E6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8689  0028E8  6A07               	clrf	(??___ftpack+1)& (0+255),c
  8690  0028EA  6A06               	clrf	??___ftpack& (0+255),c
  8691  0028EC  5006               	movf	??___ftpack,w,c
  8692  0028EE  1201               	iorwf	___ftpack@arg,f,c
  8693  0028F0  5007               	movf	??___ftpack+1,w,c
  8694  0028F2  1202               	iorwf	___ftpack@arg+1,f,c
  8695  0028F4  5008               	movf	??___ftpack+2,w,c
  8696  0028F6  1203               	iorwf	___ftpack@arg+2,f,c
  8697  0028F8  5005               	movf	___ftpack@sign,w,c
  8698  0028FA  A4D8               	btfss	status,2,c
  8699  0028FC  8E03               	bsf	___ftpack@arg+2,7,c
  8700  0028FE  C001  F001         	movff	___ftpack@arg,?___ftpack
  8701  002902  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8702  002906  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8703  00290A                     l1813:
  8704  00290A  0012               	return	
  8705  00290C                     __end_of___ftpack:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           intcon	equ	0xFF2
  8712                           intcon2	equ	0xFF1
  8713                           postinc0	equ	0xFEE
  8714                           wreg	equ	0xFE8
  8715                           postinc1	equ	0xFE6
  8716                           postdec1	equ	0xFE5
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           fsr2h	equ	0xFDA
  8722                           fsr2l	equ	0xFD9
  8723                           status	equ	0xFD8
  8724                           
  8725 ;; *************** function _baroConvertAlt *****************
  8726 ;; Defined at:
  8727 ;;		line 225 in file "barometer.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;  pressure        4   59[COMRAM] long 
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;  val             4   73[COMRAM] long 
  8732 ;;  ratio           3   67[COMRAM] float 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  4   59[COMRAM] long 
  8735 ;; Registers used:
  8736 ;;		wreg, status,2, status,0, cstack
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8742 ;;      Params:         4       0       0       0       0       0       0
  8743 ;;      Locals:        10       0       0       0       0       0       0
  8744 ;;      Temps:          4       0       0       0       0       0       0
  8745 ;;      Totals:        18       0       0       0       0       0       0
  8746 ;;Total ram usage:       18 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    2
  8749 ;; This function calls:
  8750 ;;		___aldiv
  8751 ;;		___altoft
  8752 ;;		___ftadd
  8753 ;;		___ftmul
  8754 ;;		___fttol
  8755 ;; This function is called by:
  8756 ;;		_baroCalibrate
  8757 ;;		_updateSensorARData
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text53
  8762  001D62                     __ptext53:
  8763                           	opt stack 0
  8764  001D62                     _baroConvertAlt:
  8765                           	opt stack 27
  8766                           
  8767                           ;barometer.c: 227: float ratio = pressure / presSeaLevel;
  8768                           
  8769                           ;incstack = 0
  8770                           ;incstack = 0
  8771  001D62  C098  F005         	movff	_presSeaLevel,?___aldiv+4
  8772  001D66  C099  F006         	movff	_presSeaLevel+1,?___aldiv+5
  8773  001D6A  C09A  F007         	movff	_presSeaLevel+2,?___aldiv+6
  8774  001D6E  C09B  F008         	movff	_presSeaLevel+3,?___aldiv+7
  8775  001D72  C03C  F001         	movff	baroConvertAlt@pressure,?___aldiv
  8776  001D76  C03D  F002         	movff	baroConvertAlt@pressure+1,?___aldiv+1
  8777  001D7A  C03E  F003         	movff	baroConvertAlt@pressure+2,?___aldiv+2
  8778  001D7E  C03F  F004         	movff	baroConvertAlt@pressure+3,?___aldiv+3
  8779  001D82  EC55  F013         	call	___aldiv	;wreg free
  8780  001D86  C004  F013         	movff	?___aldiv+3,?___altoft+3
  8781  001D8A  C003  F012         	movff	?___aldiv+2,?___altoft+2
  8782  001D8E  C002  F011         	movff	?___aldiv+1,?___altoft+1
  8783  001D92  C001  F010         	movff	?___aldiv,?___altoft
  8784  001D96  EC80  F017         	call	___altoft	;wreg free
  8785  001D9A  C012  F046         	movff	?___altoft+2,baroConvertAlt@ratio+2
  8786  001D9E  C011  F045         	movff	?___altoft+1,baroConvertAlt@ratio+1
  8787  001DA2  C010  F044         	movff	?___altoft,baroConvertAlt@ratio
  8788                           
  8789                           ;barometer.c: 229: long val = (long)(100 * ((-8680.701 * ratio) + 8677.889));
  8790  001DA6  0E98               	movlw	152
  8791  001DA8  6E31               	movwf	?___ftadd+3,c
  8792  001DAA  0E07               	movlw	7
  8793  001DAC  6E32               	movwf	?___ftadd+4,c
  8794  001DAE  0E46               	movlw	70
  8795  001DB0  6E33               	movwf	?___ftadd+5,c
  8796  001DB2  0EA3               	movlw	163
  8797  001DB4  6E20               	movwf	?___ftmul+3,c
  8798  001DB6  0E07               	movlw	7
  8799  001DB8  6E21               	movwf	?___ftmul+4,c
  8800  001DBA  0EC6               	movlw	198
  8801  001DBC  6E22               	movwf	?___ftmul+5,c
  8802  001DBE  C044  F01D         	movff	baroConvertAlt@ratio,?___ftmul
  8803  001DC2  C045  F01E         	movff	baroConvertAlt@ratio+1,?___ftmul+1
  8804  001DC6  C046  F01F         	movff	baroConvertAlt@ratio+2,?___ftmul+2
  8805  001DCA  ECF4  F010         	call	___ftmul	;wreg free
  8806  001DCE  C01F  F030         	movff	?___ftmul+2,?___ftadd+2
  8807  001DD2  C01E  F02F         	movff	?___ftmul+1,?___ftadd+1
  8808  001DD6  C01D  F02E         	movff	?___ftmul,?___ftadd
  8809  001DDA  EC0B  F00B         	call	___ftadd	;wreg free
  8810  001DDE  C030  F049         	movff	?___ftadd+2,_baroConvertAlt$4851+2
  8811  001DE2  C02F  F048         	movff	?___ftadd+1,_baroConvertAlt$4851+1
  8812  001DE6  C02E  F047         	movff	?___ftadd,_baroConvertAlt$4851
  8813                           
  8814                           ;barometer.c: 229: long val = (long)(100 * ((-8680.701 * ratio) + 8677.889));
  8815  001DEA  0E00               	movlw	0
  8816  001DEC  6E20               	movwf	?___ftmul+3,c
  8817  001DEE  0EC8               	movlw	200
  8818  001DF0  6E21               	movwf	?___ftmul+4,c
  8819  001DF2  0E42               	movlw	66
  8820  001DF4  6E22               	movwf	?___ftmul+5,c
  8821  001DF6  C047  F01D         	movff	_baroConvertAlt$4851,?___ftmul
  8822  001DFA  C048  F01E         	movff	_baroConvertAlt$4851+1,?___ftmul+1
  8823  001DFE  C049  F01F         	movff	_baroConvertAlt$4851+2,?___ftmul+2
  8824  001E02  ECF4  F010         	call	___ftmul	;wreg free
  8825  001E06  C01F  F00B         	movff	?___ftmul+2,?___fttol+2
  8826  001E0A  C01E  F00A         	movff	?___ftmul+1,?___fttol+1
  8827  001E0E  C01D  F009         	movff	?___ftmul,?___fttol
  8828  001E12  ECE5  F012         	call	___fttol	;wreg free
  8829  001E16  C00C  F04D         	movff	?___fttol+3,baroConvertAlt@val+3
  8830  001E1A  C00B  F04C         	movff	?___fttol+2,baroConvertAlt@val+2
  8831  001E1E  C00A  F04B         	movff	?___fttol+1,baroConvertAlt@val+1
  8832  001E22  C009  F04A         	movff	?___fttol,baroConvertAlt@val
  8833                           
  8834                           ;barometer.c: 231: val = val - altOffset - 29000;
  8835  001E26  0E48               	movlw	72
  8836  001E28  0100               	movlb	0	; () banked
  8837  001E2A  0100               	movlb	0	; () banked
  8838  001E2C  2594               	addwf	_altOffset& (0+255),w,b
  8839  001E2E  6E40               	movwf	??_baroConvertAlt& (0+255),c
  8840  001E30  0E71               	movlw	113
  8841  001E32  0100               	movlb	0	; () banked
  8842  001E34  0100               	movlb	0	; () banked
  8843  001E36  2195               	addwfc	(_altOffset+1)& (0+255),w,b
  8844  001E38  6E41               	movwf	(??_baroConvertAlt+1)& (0+255),c
  8845  001E3A  0E00               	movlw	0
  8846  001E3C  0100               	movlb	0	; () banked
  8847  001E3E  0100               	movlb	0	; () banked
  8848  001E40  2196               	addwfc	(_altOffset+2)& (0+255),w,b
  8849  001E42  6E42               	movwf	(??_baroConvertAlt+2)& (0+255),c
  8850  001E44  0E00               	movlw	0
  8851  001E46  0100               	movlb	0	; () banked
  8852  001E48  0100               	movlb	0	; () banked
  8853  001E4A  2197               	addwfc	(_altOffset+3)& (0+255),w,b
  8854  001E4C  6E43               	movwf	(??_baroConvertAlt+3)& (0+255),c
  8855  001E4E  1E40               	comf	??_baroConvertAlt,f,c
  8856  001E50  1E41               	comf	??_baroConvertAlt+1,f,c
  8857  001E52  1E42               	comf	??_baroConvertAlt+2,f,c
  8858  001E54  1E43               	comf	??_baroConvertAlt+3,f,c
  8859  001E56  2A40               	incf	??_baroConvertAlt,f,c
  8860  001E58  0E00               	movlw	0
  8861  001E5A  2241               	addwfc	??_baroConvertAlt+1,f,c
  8862  001E5C  2242               	addwfc	??_baroConvertAlt+2,f,c
  8863  001E5E  2243               	addwfc	??_baroConvertAlt+3,f,c
  8864  001E60  504A               	movf	baroConvertAlt@val,w,c
  8865  001E62  2440               	addwf	??_baroConvertAlt,w,c
  8866  001E64  6E4A               	movwf	baroConvertAlt@val,c
  8867  001E66  504B               	movf	baroConvertAlt@val+1,w,c
  8868  001E68  2041               	addwfc	??_baroConvertAlt+1,w,c
  8869  001E6A  6E4B               	movwf	baroConvertAlt@val+1,c
  8870  001E6C  504C               	movf	baroConvertAlt@val+2,w,c
  8871  001E6E  2042               	addwfc	??_baroConvertAlt+2,w,c
  8872  001E70  6E4C               	movwf	baroConvertAlt@val+2,c
  8873  001E72  504D               	movf	baroConvertAlt@val+3,w,c
  8874  001E74  2043               	addwfc	??_baroConvertAlt+3,w,c
  8875  001E76  6E4D               	movwf	baroConvertAlt@val+3,c
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;barometer.c: 233: return val;
  8879  001E78  C04A  F03C         	movff	baroConvertAlt@val,?_baroConvertAlt
  8880  001E7C  C04B  F03D         	movff	baroConvertAlt@val+1,?_baroConvertAlt+1
  8881  001E80  C04C  F03E         	movff	baroConvertAlt@val+2,?_baroConvertAlt+2
  8882  001E84  C04D  F03F         	movff	baroConvertAlt@val+3,?_baroConvertAlt+3
  8883                           
  8884                           ; BSR set to: 0
  8885                           
  8886                           ; BSR set to: 0
  8887  001E88  0012               	return	
  8888  001E8A                     __end_of_baroConvertAlt:
  8889                           	opt stack 0
  8890                           tblptru	equ	0xFF8
  8891                           tblptrh	equ	0xFF7
  8892                           tblptrl	equ	0xFF6
  8893                           tablat	equ	0xFF5
  8894                           intcon	equ	0xFF2
  8895                           intcon2	equ	0xFF1
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           postinc1	equ	0xFE6
  8899                           postdec1	equ	0xFE5
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           fsr2h	equ	0xFDA
  8905                           fsr2l	equ	0xFD9
  8906                           status	equ	0xFD8
  8907                           
  8908 ;; *************** function ___ftmul *****************
  8909 ;; Defined at:
  8910 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftmul.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  f1              3   28[COMRAM] float 
  8913 ;;  f2              3   31[COMRAM] float 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;  f3_as_produc    3   40[COMRAM] unsigned um
  8916 ;;  sign            1   44[COMRAM] unsigned char 
  8917 ;;  cntr            1   43[COMRAM] unsigned char 
  8918 ;;  exp             1   39[COMRAM] unsigned char 
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  3   28[COMRAM] float 
  8921 ;; Registers used:
  8922 ;;		wreg, status,2, status,0, cstack
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8928 ;;      Params:         6       0       0       0       0       0       0
  8929 ;;      Locals:         6       0       0       0       0       0       0
  8930 ;;      Temps:          5       0       0       0       0       0       0
  8931 ;;      Totals:        17       0       0       0       0       0       0
  8932 ;;Total ram usage:       17 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    1
  8935 ;; This function calls:
  8936 ;;		___ftpack
  8937 ;; This function is called by:
  8938 ;;		_accelGetRoll
  8939 ;;		_baroCalibrate
  8940 ;;		_baroConvertAlt
  8941 ;;		_getArrayVoltage
  8942 ;;		_getArrayCurrent
  8943 ;;		_getArrayPower
  8944 ;;		___asftmul
  8945 ;;		_asin
  8946 ;;		_atan
  8947 ;;		_eval_poly
  8948 ;;		_sqrt
  8949 ;;		_updateSensorPData
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text54
  8954  0021E8                     __ptext54:
  8955                           	opt stack 0
  8956  0021E8                     ___ftmul:
  8957                           	opt stack 27
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;incstack = 0
  8961                           ;incstack = 0
  8962  0021E8  0E0F               	movlw	15
  8963  0021EA  6E23               	movwf	??___ftmul& (0+255),c
  8964  0021EC  C01D  F024         	movff	___ftmul@f1,??___ftmul+1
  8965  0021F0  C01E  F025         	movff	___ftmul@f1+1,??___ftmul+2
  8966  0021F4  C01F  F026         	movff	___ftmul@f1+2,??___ftmul+3
  8967  0021F8  2823               	incf	??___ftmul,w,c
  8968  0021FA  6E27               	movwf	(??___ftmul+4)& (0+255),c
  8969  0021FC  D004               	goto	u6050
  8970  0021FE                     u6055:
  8971  0021FE  90D8               	bcf	status,0,c
  8972  002200  3226               	rrcf	??___ftmul+3,f,c
  8973  002202  3225               	rrcf	??___ftmul+2,f,c
  8974  002204  3224               	rrcf	??___ftmul+1,f,c
  8975  002206                     u6050:
  8976  002206  2E27               	decfsz	(??___ftmul+4)& (0+255),f,c
  8977  002208  D7FA               	goto	u6055
  8978  00220A  5024               	movf	??___ftmul+1,w,c
  8979  00220C  6E28               	movwf	___ftmul@exp,c
  8980  00220E  6628               	tstfsz	___ftmul@exp& (0+255),c
  8981  002210  D001               	goto	l6992
  8982  002212  D015               	goto	u6080
  8983  002214                     l6992:
  8984  002214  0E0F               	movlw	15
  8985  002216  6E23               	movwf	??___ftmul& (0+255),c
  8986  002218  C020  F024         	movff	___ftmul@f2,??___ftmul+1
  8987  00221C  C021  F025         	movff	___ftmul@f2+1,??___ftmul+2
  8988  002220  C022  F026         	movff	___ftmul@f2+2,??___ftmul+3
  8989  002224  2823               	incf	??___ftmul,w,c
  8990  002226  6E27               	movwf	(??___ftmul+4)& (0+255),c
  8991  002228  D004               	goto	u6070
  8992  00222A                     u6075:
  8993  00222A  90D8               	bcf	status,0,c
  8994  00222C  3226               	rrcf	??___ftmul+3,f,c
  8995  00222E  3225               	rrcf	??___ftmul+2,f,c
  8996  002230  3224               	rrcf	??___ftmul+1,f,c
  8997  002232                     u6070:
  8998  002232  2E27               	decfsz	(??___ftmul+4)& (0+255),f,c
  8999  002234  D7FA               	goto	u6075
  9000  002236  5024               	movf	??___ftmul+1,w,c
  9001  002238  6E2D               	movwf	___ftmul@sign,c
  9002  00223A  662D               	tstfsz	___ftmul@sign& (0+255),c
  9003  00223C  D007               	goto	l6998
  9004  00223E                     u6080:
  9005  00223E  0E00               	movlw	0
  9006  002240  6E1D               	movwf	?___ftmul,c
  9007  002242  0E00               	movlw	0
  9008  002244  6E1E               	movwf	?___ftmul+1,c
  9009  002246  0E00               	movlw	0
  9010  002248  6E1F               	movwf	?___ftmul+2,c
  9011  00224A  D055               	goto	l1897
  9012  00224C                     l6998:
  9013  00224C  502D               	movf	___ftmul@sign,w,c
  9014  00224E  0F7B               	addlw	123
  9015  002250  2628               	addwf	___ftmul@exp,f,c
  9016  002252  C01F  F02D         	movff	___ftmul@f1+2,___ftmul@sign
  9017  002256  5022               	movf	(___ftmul@f2+2)& (0+255),w,c
  9018  002258  1A2D               	xorwf	___ftmul@sign,f,c
  9019  00225A  0E80               	movlw	128
  9020  00225C  162D               	andwf	___ftmul@sign,f,c
  9021  00225E  8E1E               	bsf	___ftmul@f1+1,7,c
  9022  002260  8E21               	bsf	___ftmul@f2+1,7,c
  9023  002262  0EFF               	movlw	255
  9024  002264  1620               	andwf	___ftmul@f2,f,c
  9025  002266  0EFF               	movlw	255
  9026  002268  1621               	andwf	___ftmul@f2+1,f,c
  9027  00226A  0E00               	movlw	0
  9028  00226C  1622               	andwf	___ftmul@f2+2,f,c
  9029  00226E  0E00               	movlw	0
  9030  002270  6E29               	movwf	___ftmul@f3_as_product,c
  9031  002272  0E00               	movlw	0
  9032  002274  6E2A               	movwf	___ftmul@f3_as_product+1,c
  9033  002276  0E00               	movlw	0
  9034  002278  6E2B               	movwf	___ftmul@f3_as_product+2,c
  9035  00227A  6E23               	movwf	??___ftmul& (0+255),c
  9036  00227C  0E07               	movlw	7
  9037  00227E  6E2C               	movwf	___ftmul@cntr,c
  9038  002280  5023               	movf	??___ftmul& (0+255),w,c
  9039  002282                     l7012:
  9040  002282  A01D               	btfss	___ftmul@f1,0,c
  9041  002284  D006               	goto	l7016
  9042  002286  5020               	movf	___ftmul@f2,w,c
  9043  002288  2629               	addwf	___ftmul@f3_as_product,f,c
  9044  00228A  5021               	movf	___ftmul@f2+1,w,c
  9045  00228C  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  9046  00228E  5022               	movf	___ftmul@f2+2,w,c
  9047  002290  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  9048  002292                     l7016:
  9049  002292  90D8               	bcf	status,0,c
  9050  002294  321F               	rrcf	___ftmul@f1+2,f,c
  9051  002296  321E               	rrcf	___ftmul@f1+1,f,c
  9052  002298  321D               	rrcf	___ftmul@f1,f,c
  9053  00229A  90D8               	bcf	status,0,c
  9054  00229C  3620               	rlcf	___ftmul@f2,f,c
  9055  00229E  3621               	rlcf	___ftmul@f2+1,f,c
  9056  0022A0  3622               	rlcf	___ftmul@f2+2,f,c
  9057  0022A2  2E2C               	decfsz	___ftmul@cntr,f,c
  9058  0022A4  D7EE               	goto	l7012
  9059  0022A6  6E23               	movwf	??___ftmul& (0+255),c
  9060  0022A8  0E09               	movlw	9
  9061  0022AA  6E2C               	movwf	___ftmul@cntr,c
  9062  0022AC  5023               	movf	??___ftmul& (0+255),w,c
  9063  0022AE                     l7022:
  9064  0022AE  A01D               	btfss	___ftmul@f1,0,c
  9065  0022B0  D006               	goto	l7026
  9066  0022B2  5020               	movf	___ftmul@f2,w,c
  9067  0022B4  2629               	addwf	___ftmul@f3_as_product,f,c
  9068  0022B6  5021               	movf	___ftmul@f2+1,w,c
  9069  0022B8  222A               	addwfc	___ftmul@f3_as_product+1,f,c
  9070  0022BA  5022               	movf	___ftmul@f2+2,w,c
  9071  0022BC  222B               	addwfc	___ftmul@f3_as_product+2,f,c
  9072  0022BE                     l7026:
  9073  0022BE  90D8               	bcf	status,0,c
  9074  0022C0  321F               	rrcf	___ftmul@f1+2,f,c
  9075  0022C2  321E               	rrcf	___ftmul@f1+1,f,c
  9076  0022C4  321D               	rrcf	___ftmul@f1,f,c
  9077  0022C6  90D8               	bcf	status,0,c
  9078  0022C8  322B               	rrcf	___ftmul@f3_as_product+2,f,c
  9079  0022CA  322A               	rrcf	___ftmul@f3_as_product+1,f,c
  9080  0022CC  3229               	rrcf	___ftmul@f3_as_product,f,c
  9081  0022CE  2E2C               	decfsz	___ftmul@cntr,f,c
  9082  0022D0  D7EE               	goto	l7022
  9083  0022D2  C029  F001         	movff	___ftmul@f3_as_product,?___ftpack
  9084  0022D6  C02A  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  9085  0022DA  C02B  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  9086  0022DE  C028  F004         	movff	___ftmul@exp,?___ftpack+3
  9087  0022E2  C02D  F005         	movff	___ftmul@sign,?___ftpack+4
  9088  0022E6  EC2A  F014         	call	___ftpack	;wreg free
  9089  0022EA  C003  F01F         	movff	?___ftpack+2,?___ftmul+2
  9090  0022EE  C002  F01E         	movff	?___ftpack+1,?___ftmul+1
  9091  0022F2  C001  F01D         	movff	?___ftpack,?___ftmul
  9092  0022F6                     l1897:
  9093  0022F6  0012               	return	
  9094  0022F8                     __end_of___ftmul:
  9095                           	opt stack 0
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           intcon	equ	0xFF2
  9101                           intcon2	equ	0xFF1
  9102                           postinc0	equ	0xFEE
  9103                           wreg	equ	0xFE8
  9104                           postinc1	equ	0xFE6
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function ___ftadd *****************
  9115 ;; Defined at:
  9116 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftadd.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  f1              3   45[COMRAM] float 
  9119 ;;  f2              3   48[COMRAM] float 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;  exp1            1   58[COMRAM] unsigned char 
  9122 ;;  exp2            1   57[COMRAM] unsigned char 
  9123 ;;  sign            1   56[COMRAM] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  3   45[COMRAM] float 
  9126 ;; Registers used:
  9127 ;;		wreg, status,2, status,0, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9133 ;;      Params:         6       0       0       0       0       0       0
  9134 ;;      Locals:         3       0       0       0       0       0       0
  9135 ;;      Temps:          5       0       0       0       0       0       0
  9136 ;;      Totals:        14       0       0       0       0       0       0
  9137 ;;Total ram usage:       14 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    1
  9140 ;; This function calls:
  9141 ;;		___ftpack
  9142 ;; This function is called by:
  9143 ;;		_baroCalibrate
  9144 ;;		_baroConvertAlt
  9145 ;;		_asin
  9146 ;;		_atan
  9147 ;;		_eval_poly
  9148 ;;		___ftsub
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           	psect	text55
  9153  001616                     __ptext55:
  9154                           	opt stack 0
  9155  001616                     ___ftadd:
  9156                           	opt stack 27
  9157                           
  9158                           ;incstack = 0
  9159                           ;incstack = 0
  9160  001616  0E0F               	movlw	15
  9161  001618  6E34               	movwf	??___ftadd& (0+255),c
  9162  00161A  C02E  F035         	movff	___ftadd@f1,??___ftadd+1
  9163  00161E  C02F  F036         	movff	___ftadd@f1+1,??___ftadd+2
  9164  001622  C030  F037         	movff	___ftadd@f1+2,??___ftadd+3
  9165  001626  2834               	incf	??___ftadd,w,c
  9166  001628  6E38               	movwf	(??___ftadd+4)& (0+255),c
  9167  00162A  D004               	goto	u5840
  9168  00162C                     u5845:
  9169  00162C  90D8               	bcf	status,0,c
  9170  00162E  3237               	rrcf	??___ftadd+3,f,c
  9171  001630  3236               	rrcf	??___ftadd+2,f,c
  9172  001632  3235               	rrcf	??___ftadd+1,f,c
  9173  001634                     u5840:
  9174  001634  2E38               	decfsz	(??___ftadd+4)& (0+255),f,c
  9175  001636  D7FA               	goto	u5845
  9176  001638  5035               	movf	??___ftadd+1,w,c
  9177  00163A  6E3B               	movwf	___ftadd@exp1,c
  9178  00163C  0E0F               	movlw	15
  9179  00163E  6E34               	movwf	??___ftadd& (0+255),c
  9180  001640  C031  F035         	movff	___ftadd@f2,??___ftadd+1
  9181  001644  C032  F036         	movff	___ftadd@f2+1,??___ftadd+2
  9182  001648  C033  F037         	movff	___ftadd@f2+2,??___ftadd+3
  9183  00164C  2834               	incf	??___ftadd,w,c
  9184  00164E  6E38               	movwf	(??___ftadd+4)& (0+255),c
  9185  001650  D004               	goto	u5850
  9186  001652                     u5855:
  9187  001652  90D8               	bcf	status,0,c
  9188  001654  3237               	rrcf	??___ftadd+3,f,c
  9189  001656  3236               	rrcf	??___ftadd+2,f,c
  9190  001658  3235               	rrcf	??___ftadd+1,f,c
  9191  00165A                     u5850:
  9192  00165A  2E38               	decfsz	(??___ftadd+4)& (0+255),f,c
  9193  00165C  D7FA               	goto	u5855
  9194  00165E  5035               	movf	??___ftadd+1,w,c
  9195  001660  6E3A               	movwf	___ftadd@exp2,c
  9196  001662  503B               	movf	___ftadd@exp1,w,c
  9197  001664  B4D8               	btfsc	status,2,c
  9198  001666  D00B               	goto	l1850
  9199  001668  503A               	movf	___ftadd@exp2,w,c
  9200  00166A  603B               	cpfslt	___ftadd@exp1,c
  9201  00166C  D00F               	goto	l6924
  9202  00166E  503B               	movf	___ftadd@exp1,w,c
  9203  001670  0800               	sublw	0
  9204  001672  243A               	addwf	___ftadd@exp2,w,c
  9205  001674  6E34               	movwf	??___ftadd& (0+255),c
  9206  001676  0E19               	movlw	25
  9207  001678  5C34               	subwf	??___ftadd,w,c
  9208  00167A  A0D8               	btfss	status,0,c
  9209  00167C  D007               	goto	l6924
  9210  00167E                     l1850:
  9211  00167E  C031  F02E         	movff	___ftadd@f2,?___ftadd
  9212  001682  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  9213  001686  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  9214  00168A  D0AA               	goto	l1851
  9215  00168C                     l6924:
  9216  00168C  503A               	movf	___ftadd@exp2,w,c
  9217  00168E  B4D8               	btfsc	status,2,c
  9218  001690  D00B               	goto	l1854
  9219  001692  503B               	movf	___ftadd@exp1,w,c
  9220  001694  603A               	cpfslt	___ftadd@exp2,c
  9221  001696  D00F               	goto	l6930
  9222  001698  503A               	movf	___ftadd@exp2,w,c
  9223  00169A  0800               	sublw	0
  9224  00169C  243B               	addwf	___ftadd@exp1,w,c
  9225  00169E  6E34               	movwf	??___ftadd& (0+255),c
  9226  0016A0  0E19               	movlw	25
  9227  0016A2  5C34               	subwf	??___ftadd,w,c
  9228  0016A4  A0D8               	btfss	status,0,c
  9229  0016A6  D007               	goto	l6930
  9230  0016A8                     l1854:
  9231  0016A8  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  9232  0016AC  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  9233  0016B0  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  9234  0016B4  D095               	goto	l1851
  9235  0016B6                     l6930:
  9236  0016B6  6E34               	movwf	??___ftadd& (0+255),c
  9237  0016B8  0E06               	movlw	6
  9238  0016BA  6E39               	movwf	___ftadd@sign,c
  9239  0016BC  5034               	movf	??___ftadd& (0+255),w,c
  9240  0016BE  BE30               	btfsc	___ftadd@f1+2,7,c
  9241  0016C0  8E39               	bsf	___ftadd@sign,7,c
  9242  0016C2  BE33               	btfsc	___ftadd@f2+2,7,c
  9243  0016C4  8C39               	bsf	___ftadd@sign,6,c
  9244  0016C6  8E2F               	bsf	___ftadd@f1+1,7,c
  9245  0016C8  0EFF               	movlw	255
  9246  0016CA  162E               	andwf	___ftadd@f1,f,c
  9247  0016CC  0EFF               	movlw	255
  9248  0016CE  162F               	andwf	___ftadd@f1+1,f,c
  9249  0016D0  0E00               	movlw	0
  9250  0016D2  1630               	andwf	___ftadd@f1+2,f,c
  9251  0016D4  8E32               	bsf	___ftadd@f2+1,7,c
  9252  0016D6  0EFF               	movlw	255
  9253  0016D8  1631               	andwf	___ftadd@f2,f,c
  9254  0016DA  0EFF               	movlw	255
  9255  0016DC  1632               	andwf	___ftadd@f2+1,f,c
  9256  0016DE  0E00               	movlw	0
  9257  0016E0  1633               	andwf	___ftadd@f2+2,f,c
  9258  0016E2  503A               	movf	___ftadd@exp2,w,c
  9259  0016E4  603B               	cpfslt	___ftadd@exp1,c
  9260  0016E6  D018               	goto	l6956
  9261  0016E8                     l6946:
  9262  0016E8  90D8               	bcf	status,0,c
  9263  0016EA  3631               	rlcf	___ftadd@f2,f,c
  9264  0016EC  3632               	rlcf	___ftadd@f2+1,f,c
  9265  0016EE  3633               	rlcf	___ftadd@f2+2,f,c
  9266  0016F0  063A               	decf	___ftadd@exp2,f,c
  9267  0016F2  503A               	movf	___ftadd@exp2,w,c
  9268  0016F4  183B               	xorwf	___ftadd@exp1,w,c
  9269  0016F6  B4D8               	btfsc	status,2,c
  9270  0016F8  D00B               	goto	l6954
  9271  0016FA  0639               	decf	___ftadd@sign,f,c
  9272  0016FC  5039               	movf	___ftadd@sign& (0+255),w,c
  9273  0016FE  0B07               	andlw	7
  9274  001700  B4D8               	btfsc	status,2,c
  9275  001702  D006               	goto	l6954
  9276  001704  D7F1               	goto	l6946
  9277  001706                     l6952:
  9278  001706  90D8               	bcf	status,0,c
  9279  001708  3230               	rrcf	___ftadd@f1+2,f,c
  9280  00170A  322F               	rrcf	___ftadd@f1+1,f,c
  9281  00170C  322E               	rrcf	___ftadd@f1,f,c
  9282  00170E  2A3B               	incf	___ftadd@exp1,f,c
  9283  001710                     l6954:
  9284  001710  503A               	movf	___ftadd@exp2,w,c
  9285  001712  623B               	cpfseq	___ftadd@exp1,c
  9286  001714  D7F8               	goto	l6952
  9287  001716  D01A               	goto	l1865
  9288  001718                     l6956:
  9289  001718  503B               	movf	___ftadd@exp1,w,c
  9290  00171A  603A               	cpfslt	___ftadd@exp2,c
  9291  00171C  D017               	goto	l1865
  9292  00171E                     l6958:
  9293  00171E  90D8               	bcf	status,0,c
  9294  001720  362E               	rlcf	___ftadd@f1,f,c
  9295  001722  362F               	rlcf	___ftadd@f1+1,f,c
  9296  001724  3630               	rlcf	___ftadd@f1+2,f,c
  9297  001726  063B               	decf	___ftadd@exp1,f,c
  9298  001728  503A               	movf	___ftadd@exp2,w,c
  9299  00172A  183B               	xorwf	___ftadd@exp1,w,c
  9300  00172C  B4D8               	btfsc	status,2,c
  9301  00172E  D00B               	goto	l6966
  9302  001730  0639               	decf	___ftadd@sign,f,c
  9303  001732  5039               	movf	___ftadd@sign& (0+255),w,c
  9304  001734  0B07               	andlw	7
  9305  001736  B4D8               	btfsc	status,2,c
  9306  001738  D006               	goto	l6966
  9307  00173A  D7F1               	goto	l6958
  9308  00173C                     l6964:
  9309  00173C  90D8               	bcf	status,0,c
  9310  00173E  3233               	rrcf	___ftadd@f2+2,f,c
  9311  001740  3232               	rrcf	___ftadd@f2+1,f,c
  9312  001742  3231               	rrcf	___ftadd@f2,f,c
  9313  001744  2A3A               	incf	___ftadd@exp2,f,c
  9314  001746                     l6966:
  9315  001746  503A               	movf	___ftadd@exp2,w,c
  9316  001748  623B               	cpfseq	___ftadd@exp1,c
  9317  00174A  D7F8               	goto	l6964
  9318  00174C                     l1865:
  9319  00174C  AE39               	btfss	___ftadd@sign,7,c
  9320  00174E  D00C               	goto	l1874
  9321  001750  0EFF               	movlw	255
  9322  001752  1A2E               	xorwf	___ftadd@f1,f,c
  9323  001754  0EFF               	movlw	255
  9324  001756  1A2F               	xorwf	___ftadd@f1+1,f,c
  9325  001758  0EFF               	movlw	255
  9326  00175A  1A30               	xorwf	___ftadd@f1+2,f,c
  9327  00175C  0E01               	movlw	1
  9328  00175E  262E               	addwf	___ftadd@f1,f,c
  9329  001760  0E00               	movlw	0
  9330  001762  222F               	addwfc	___ftadd@f1+1,f,c
  9331  001764  0E00               	movlw	0
  9332  001766  2230               	addwfc	___ftadd@f1+2,f,c
  9333  001768                     l1874:
  9334  001768  AC39               	btfss	___ftadd@sign,6,c
  9335  00176A  D00C               	goto	l6972
  9336  00176C  0EFF               	movlw	255
  9337  00176E  1A31               	xorwf	___ftadd@f2,f,c
  9338  001770  0EFF               	movlw	255
  9339  001772  1A32               	xorwf	___ftadd@f2+1,f,c
  9340  001774  0EFF               	movlw	255
  9341  001776  1A33               	xorwf	___ftadd@f2+2,f,c
  9342  001778  0E01               	movlw	1
  9343  00177A  2631               	addwf	___ftadd@f2,f,c
  9344  00177C  0E00               	movlw	0
  9345  00177E  2232               	addwfc	___ftadd@f2+1,f,c
  9346  001780  0E00               	movlw	0
  9347  001782  2233               	addwfc	___ftadd@f2+2,f,c
  9348  001784                     l6972:
  9349  001784  6E34               	movwf	??___ftadd& (0+255),c
  9350  001786  0E00               	movlw	0
  9351  001788  6E39               	movwf	___ftadd@sign,c
  9352  00178A  5034               	movf	??___ftadd& (0+255),w,c
  9353  00178C  502E               	movf	___ftadd@f1,w,c
  9354  00178E  2631               	addwf	___ftadd@f2,f,c
  9355  001790  502F               	movf	___ftadd@f1+1,w,c
  9356  001792  2232               	addwfc	___ftadd@f2+1,f,c
  9357  001794  5030               	movf	___ftadd@f1+2,w,c
  9358  001796  2233               	addwfc	___ftadd@f2+2,f,c
  9359  001798  AE33               	btfss	___ftadd@f2+2,7,c
  9360  00179A  D010               	goto	l6982
  9361  00179C  0EFF               	movlw	255
  9362  00179E  1A31               	xorwf	___ftadd@f2,f,c
  9363  0017A0  0EFF               	movlw	255
  9364  0017A2  1A32               	xorwf	___ftadd@f2+1,f,c
  9365  0017A4  0EFF               	movlw	255
  9366  0017A6  1A33               	xorwf	___ftadd@f2+2,f,c
  9367  0017A8  0E01               	movlw	1
  9368  0017AA  2631               	addwf	___ftadd@f2,f,c
  9369  0017AC  0E00               	movlw	0
  9370  0017AE  2232               	addwfc	___ftadd@f2+1,f,c
  9371  0017B0  0E00               	movlw	0
  9372  0017B2  2233               	addwfc	___ftadd@f2+2,f,c
  9373  0017B4  6E34               	movwf	??___ftadd& (0+255),c
  9374  0017B6  0E01               	movlw	1
  9375  0017B8  6E39               	movwf	___ftadd@sign,c
  9376  0017BA  5034               	movf	??___ftadd& (0+255),w,c
  9377  0017BC                     l6982:
  9378  0017BC  C031  F001         	movff	___ftadd@f2,?___ftpack
  9379  0017C0  C032  F002         	movff	___ftadd@f2+1,?___ftpack+1
  9380  0017C4  C033  F003         	movff	___ftadd@f2+2,?___ftpack+2
  9381  0017C8  C03B  F004         	movff	___ftadd@exp1,?___ftpack+3
  9382  0017CC  C039  F005         	movff	___ftadd@sign,?___ftpack+4
  9383  0017D0  EC2A  F014         	call	___ftpack	;wreg free
  9384  0017D4  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  9385  0017D8  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  9386  0017DC  C001  F02E         	movff	?___ftpack,?___ftadd
  9387  0017E0                     l1851:
  9388  0017E0  0012               	return	
  9389  0017E2                     __end_of___ftadd:
  9390                           	opt stack 0
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           intcon	equ	0xFF2
  9396                           intcon2	equ	0xFF1
  9397                           postinc0	equ	0xFEE
  9398                           wreg	equ	0xFE8
  9399                           postinc1	equ	0xFE6
  9400                           postdec1	equ	0xFE5
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           fsr2h	equ	0xFDA
  9406                           fsr2l	equ	0xFD9
  9407                           status	equ	0xFD8
  9408                           
  9409 ;; *************** function _baroTruePres *****************
  9410 ;; Defined at:
  9411 ;;		line 192 in file "barometer.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  rawPres         2   15[COMRAM] unsigned short 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  pressure        4   48[COMRAM] long 
  9416 ;;  X1              4   44[COMRAM] long 
  9417 ;;  X2              4   40[COMRAM] long 
  9418 ;;  X3              4   32[COMRAM] long 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  4   15[COMRAM] long 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9428 ;;      Params:         4       0       0       0       0       0       0
  9429 ;;      Locals:        20       0       0       0       0       0       0
  9430 ;;      Temps:         13       0       0       0       0       0       0
  9431 ;;      Totals:        37       0       0       0       0       0       0
  9432 ;;Total ram usage:       37 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    1
  9435 ;; This function calls:
  9436 ;;		___aldiv
  9437 ;;		___lmul
  9438 ;;		___lldiv
  9439 ;; This function is called by:
  9440 ;;		_baroCalibrate
  9441 ;;		_updateSensorARData
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text56
  9446  000622                     __ptext56:
  9447                           	opt stack 0
  9448  000622                     _baroTruePres:
  9449                           	opt stack 28
  9450                           
  9451                           ;barometer.c: 193: long pressure;
  9452                           ;barometer.c: 194: long X1;
  9453                           ;barometer.c: 195: long X2;
  9454                           ;barometer.c: 196: long X3;
  9455                           ;barometer.c: 198: B6 = B5 - 4000;
  9456                           
  9457                           ;incstack = 0
  9458                           ;incstack = 0
  9459  000622  0E60               	movlw	96
  9460  000624  0100               	movlb	0	; () banked
  9461  000626  0100               	movlb	0	; () banked
  9462  000628  2588               	addwf	_B5& (0+255),w,b
  9463  00062A  0100               	movlb	0	; () banked
  9464  00062C  0100               	movlb	0	; () banked
  9465  00062E  6F8C               	movwf	_B6& (0+255),b
  9466  000630  0EF0               	movlw	240
  9467  000632  0100               	movlb	0	; () banked
  9468  000634  0100               	movlb	0	; () banked
  9469  000636  2189               	addwfc	(_B5+1)& (0+255),w,b
  9470  000638  0100               	movlb	0	; () banked
  9471  00063A  6F8D               	movwf	(_B6+1)& (0+255),b
  9472  00063C  0EFF               	movlw	255
  9473  00063E  0100               	movlb	0	; () banked
  9474  000640  0100               	movlb	0	; () banked
  9475  000642  218A               	addwfc	(_B5+2)& (0+255),w,b
  9476  000644  0100               	movlb	0	; () banked
  9477  000646  6F8E               	movwf	(_B6+2)& (0+255),b
  9478  000648  0EFF               	movlw	255
  9479  00064A  0100               	movlb	0	; () banked
  9480  00064C  0100               	movlb	0	; () banked
  9481  00064E  218B               	addwfc	(_B5+3)& (0+255),w,b
  9482  000650  0100               	movlb	0	; () banked
  9483  000652  6F8F               	movwf	(_B6+3)& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;barometer.c: 199: X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
  9487  000654  0E0C               	movlw	12
  9488  000656  6E14               	movwf	??_baroTruePres& (0+255),c
  9489  000658  C08C  F005         	movff	_B6,?___lmul+4
  9490  00065C  C08D  F006         	movff	_B6+1,?___lmul+5
  9491  000660  C08E  F007         	movff	_B6+2,?___lmul+6
  9492  000664  C08F  F008         	movff	_B6+3,?___lmul+7
  9493  000668  C08C  F001         	movff	_B6,?___lmul
  9494  00066C  C08D  F002         	movff	_B6+1,?___lmul+1
  9495  000670  C08E  F003         	movff	_B6+2,?___lmul+2
  9496  000674  C08F  F004         	movff	_B6+3,?___lmul+3
  9497  000678  EC2E  F01A         	call	___lmul	;wreg free
  9498  00067C                     u5675:
  9499  00067C  6614               	tstfsz	??_baroTruePres,c
  9500  00067E  D001               	goto	u5676
  9501  000680  D007               	goto	u5677
  9502  000682                     u5676:
  9503  000682  3404               	rlcf	?___lmul+3,w,c
  9504  000684  3204               	rrcf	?___lmul+3,f,c
  9505  000686  3203               	rrcf	?___lmul+2,f,c
  9506  000688  3202               	rrcf	?___lmul+1,f,c
  9507  00068A  3201               	rrcf	?___lmul,f,c
  9508  00068C  2E14               	decfsz	??_baroTruePres,f,c
  9509  00068E  D7F6               	goto	u5675
  9510  000690                     u5677:
  9511  000690  C004  F028         	movff	?___lmul+3,_baroTruePres$4850+3
  9512  000694  C003  F027         	movff	?___lmul+2,_baroTruePres$4850+2
  9513  000698  C002  F026         	movff	?___lmul+1,_baroTruePres$4850+1
  9514  00069C  C001  F025         	movff	?___lmul,_baroTruePres$4850
  9515                           
  9516                           ;barometer.c: 199: X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
  9517  0006A0  0E0B               	movlw	11
  9518  0006A2  6E14               	movwf	??_baroTruePres& (0+255),c
  9519  0006A4  0100               	movlb	0	; () banked
  9520  0006A6  C0AA  F001         	movff	_B2,?___lmul
  9521  0006AA  0100               	movlb	0	; () banked
  9522  0006AC  C0AB  F002         	movff	_B2+1,?___lmul+1
  9523  0006B0  0E00               	movlw	0
  9524  0006B2  BE02               	btfsc	?___lmul+1,7,c
  9525  0006B4  0EFF               	movlw	-1
  9526  0006B6  6E03               	movwf	?___lmul+2,c
  9527  0006B8  6E04               	movwf	?___lmul+3,c
  9528  0006BA  C025  F005         	movff	_baroTruePres$4850,?___lmul+4
  9529  0006BE  C026  F006         	movff	_baroTruePres$4850+1,?___lmul+5
  9530  0006C2  C027  F007         	movff	_baroTruePres$4850+2,?___lmul+6
  9531  0006C6  C028  F008         	movff	_baroTruePres$4850+3,?___lmul+7
  9532  0006CA  EC2E  F01A         	call	___lmul	;wreg free
  9533  0006CE                     u5685:
  9534  0006CE  6614               	tstfsz	??_baroTruePres,c
  9535  0006D0  D001               	goto	u5686
  9536  0006D2  D007               	goto	u5687
  9537  0006D4                     u5686:
  9538  0006D4  3404               	rlcf	?___lmul+3,w,c
  9539  0006D6  3204               	rrcf	?___lmul+3,f,c
  9540  0006D8  3203               	rrcf	?___lmul+2,f,c
  9541  0006DA  3202               	rrcf	?___lmul+1,f,c
  9542  0006DC  3201               	rrcf	?___lmul,f,c
  9543  0006DE  2E14               	decfsz	??_baroTruePres,f,c
  9544  0006E0  D7F6               	goto	u5685
  9545  0006E2                     u5687:
  9546  0006E2  C004  F030         	movff	?___lmul+3,baroTruePres@X1+3
  9547  0006E6  C003  F02F         	movff	?___lmul+2,baroTruePres@X1+2
  9548  0006EA  C002  F02E         	movff	?___lmul+1,baroTruePres@X1+1
  9549  0006EE  C001  F02D         	movff	?___lmul,baroTruePres@X1
  9550                           
  9551                           ;barometer.c: 200: X2 = (AC2 * B6) >> 11;
  9552  0006F2  0E0B               	movlw	11
  9553  0006F4  6E14               	movwf	??_baroTruePres& (0+255),c
  9554  0006F6  0100               	movlb	0	; () banked
  9555  0006F8  C09E  F001         	movff	_AC2,?___lmul
  9556  0006FC  0100               	movlb	0	; () banked
  9557  0006FE  C09F  F002         	movff	_AC2+1,?___lmul+1
  9558  000702  0E00               	movlw	0
  9559  000704  BE02               	btfsc	?___lmul+1,7,c
  9560  000706  0EFF               	movlw	-1
  9561  000708  6E03               	movwf	?___lmul+2,c
  9562  00070A  6E04               	movwf	?___lmul+3,c
  9563  00070C  C08C  F005         	movff	_B6,?___lmul+4
  9564  000710  C08D  F006         	movff	_B6+1,?___lmul+5
  9565  000714  C08E  F007         	movff	_B6+2,?___lmul+6
  9566  000718  C08F  F008         	movff	_B6+3,?___lmul+7
  9567  00071C  EC2E  F01A         	call	___lmul	;wreg free
  9568  000720                     u5695:
  9569  000720  6614               	tstfsz	??_baroTruePres,c
  9570  000722  D001               	goto	u5696
  9571  000724  D007               	goto	u5697
  9572  000726                     u5696:
  9573  000726  3404               	rlcf	?___lmul+3,w,c
  9574  000728  3204               	rrcf	?___lmul+3,f,c
  9575  00072A  3203               	rrcf	?___lmul+2,f,c
  9576  00072C  3202               	rrcf	?___lmul+1,f,c
  9577  00072E  3201               	rrcf	?___lmul,f,c
  9578  000730  2E14               	decfsz	??_baroTruePres,f,c
  9579  000732  D7F6               	goto	u5695
  9580  000734                     u5697:
  9581  000734  C004  F02C         	movff	?___lmul+3,baroTruePres@X2+3
  9582  000738  C003  F02B         	movff	?___lmul+2,baroTruePres@X2+2
  9583  00073C  C002  F02A         	movff	?___lmul+1,baroTruePres@X2+1
  9584  000740  C001  F029         	movff	?___lmul,baroTruePres@X2
  9585                           
  9586                           ;barometer.c: 201: X3 = X1 + X2;
  9587  000744  5029               	movf	baroTruePres@X2,w,c
  9588  000746  242D               	addwf	baroTruePres@X1,w,c
  9589  000748  6E21               	movwf	baroTruePres@X3,c
  9590  00074A  502A               	movf	baroTruePres@X2+1,w,c
  9591  00074C  202E               	addwfc	baroTruePres@X1+1,w,c
  9592  00074E  6E22               	movwf	baroTruePres@X3+1,c
  9593  000750  502B               	movf	baroTruePres@X2+2,w,c
  9594  000752  202F               	addwfc	baroTruePres@X1+2,w,c
  9595  000754  6E23               	movwf	baroTruePres@X3+2,c
  9596  000756  502C               	movf	baroTruePres@X2+3,w,c
  9597  000758  2030               	addwfc	baroTruePres@X1+3,w,c
  9598  00075A  6E24               	movwf	baroTruePres@X3+3,c
  9599                           
  9600                           ;barometer.c: 202: B3 = ((((AC1 * 4) + X3) << 2) + 2) / 4;
  9601  00075C  0100               	movlb	0	; () banked
  9602  00075E  C09C  F014         	movff	_AC1,??_baroTruePres
  9603  000762  0100               	movlb	0	; () banked
  9604  000764  C09D  F015         	movff	_AC1+1,??_baroTruePres+1
  9605  000768  90D8               	bcf	status,0,c
  9606  00076A  3614               	rlcf	??_baroTruePres,f,c
  9607  00076C  3615               	rlcf	??_baroTruePres+1,f,c
  9608  00076E  90D8               	bcf	status,0,c
  9609  000770  3614               	rlcf	??_baroTruePres,f,c
  9610  000772  3615               	rlcf	??_baroTruePres+1,f,c
  9611  000774  C014  F016         	movff	??_baroTruePres,??_baroTruePres+2
  9612  000778  C015  F017         	movff	??_baroTruePres+1,??_baroTruePres+3
  9613  00077C  0E00               	movlw	0
  9614  00077E  BE17               	btfsc	(??_baroTruePres+3)& (0+255),7,c
  9615  000780  0EFF               	movlw	255
  9616  000782  6E18               	movwf	(??_baroTruePres+4)& (0+255),c
  9617  000784  6E19               	movwf	(??_baroTruePres+5)& (0+255),c
  9618  000786  5021               	movf	baroTruePres@X3,w,c
  9619  000788  2416               	addwf	??_baroTruePres+2,w,c
  9620  00078A  6E1A               	movwf	(??_baroTruePres+6)& (0+255),c
  9621  00078C  5022               	movf	baroTruePres@X3+1,w,c
  9622  00078E  2017               	addwfc	??_baroTruePres+3,w,c
  9623  000790  6E1B               	movwf	(??_baroTruePres+7)& (0+255),c
  9624  000792  5023               	movf	baroTruePres@X3+2,w,c
  9625  000794  2018               	addwfc	??_baroTruePres+4,w,c
  9626  000796  6E1C               	movwf	(??_baroTruePres+8)& (0+255),c
  9627  000798  5024               	movf	baroTruePres@X3+3,w,c
  9628  00079A  2019               	addwfc	??_baroTruePres+5,w,c
  9629  00079C  6E1D               	movwf	(??_baroTruePres+9)& (0+255),c
  9630  00079E  0E02               	movlw	2
  9631  0007A0                     u5705:
  9632  0007A0  90D8               	bcf	status,0,c
  9633  0007A2  361A               	rlcf	??_baroTruePres+6,f,c
  9634  0007A4  361B               	rlcf	??_baroTruePres+7,f,c
  9635  0007A6  361C               	rlcf	??_baroTruePres+8,f,c
  9636  0007A8  361D               	rlcf	??_baroTruePres+9,f,c
  9637  0007AA  2EE8               	decfsz	wreg,f,c
  9638  0007AC  D7F9               	goto	u5705
  9639  0007AE  0E02               	movlw	2
  9640  0007B0  241A               	addwf	??_baroTruePres+6,w,c
  9641  0007B2  6E01               	movwf	?___aldiv,c
  9642  0007B4  0E00               	movlw	0
  9643  0007B6  201B               	addwfc	??_baroTruePres+7,w,c
  9644  0007B8  6E02               	movwf	?___aldiv+1,c
  9645  0007BA  0E00               	movlw	0
  9646  0007BC  201C               	addwfc	??_baroTruePres+8,w,c
  9647  0007BE  6E03               	movwf	?___aldiv+2,c
  9648  0007C0  0E00               	movlw	0
  9649  0007C2  201D               	addwfc	??_baroTruePres+9,w,c
  9650  0007C4  6E04               	movwf	?___aldiv+3,c
  9651  0007C6  0E04               	movlw	4
  9652  0007C8  6E05               	movwf	?___aldiv+4,c
  9653  0007CA  0E00               	movlw	0
  9654  0007CC  6E06               	movwf	?___aldiv+5,c
  9655  0007CE  0E00               	movlw	0
  9656  0007D0  6E07               	movwf	?___aldiv+6,c
  9657  0007D2  0E00               	movlw	0
  9658  0007D4  6E08               	movwf	?___aldiv+7,c
  9659  0007D6  EC55  F013         	call	___aldiv	;wreg free
  9660  0007DA  C004  F083         	movff	?___aldiv+3,_B3+3
  9661  0007DE  C003  F082         	movff	?___aldiv+2,_B3+2
  9662  0007E2  C002  F081         	movff	?___aldiv+1,_B3+1
  9663  0007E6  C001  F080         	movff	?___aldiv,_B3
  9664                           
  9665                           ;barometer.c: 203: X1 = (AC3 * B6) >> 13;
  9666  0007EA  0E0D               	movlw	13
  9667  0007EC  6E14               	movwf	??_baroTruePres& (0+255),c
  9668  0007EE  0100               	movlb	0	; () banked
  9669  0007F0  C0A0  F001         	movff	_AC3,?___lmul
  9670  0007F4  0100               	movlb	0	; () banked
  9671  0007F6  C0A1  F002         	movff	_AC3+1,?___lmul+1
  9672  0007FA  0E00               	movlw	0
  9673  0007FC  BE02               	btfsc	?___lmul+1,7,c
  9674  0007FE  0EFF               	movlw	-1
  9675  000800  6E03               	movwf	?___lmul+2,c
  9676  000802  6E04               	movwf	?___lmul+3,c
  9677  000804  C08C  F005         	movff	_B6,?___lmul+4
  9678  000808  C08D  F006         	movff	_B6+1,?___lmul+5
  9679  00080C  C08E  F007         	movff	_B6+2,?___lmul+6
  9680  000810  C08F  F008         	movff	_B6+3,?___lmul+7
  9681  000814  EC2E  F01A         	call	___lmul	;wreg free
  9682  000818                     u5715:
  9683  000818  6614               	tstfsz	??_baroTruePres,c
  9684  00081A  D001               	goto	u5716
  9685  00081C  D007               	goto	u5717
  9686  00081E                     u5716:
  9687  00081E  3404               	rlcf	?___lmul+3,w,c
  9688  000820  3204               	rrcf	?___lmul+3,f,c
  9689  000822  3203               	rrcf	?___lmul+2,f,c
  9690  000824  3202               	rrcf	?___lmul+1,f,c
  9691  000826  3201               	rrcf	?___lmul,f,c
  9692  000828  2E14               	decfsz	??_baroTruePres,f,c
  9693  00082A  D7F6               	goto	u5715
  9694  00082C                     u5717:
  9695  00082C  C004  F030         	movff	?___lmul+3,baroTruePres@X1+3
  9696  000830  C003  F02F         	movff	?___lmul+2,baroTruePres@X1+2
  9697  000834  C002  F02E         	movff	?___lmul+1,baroTruePres@X1+1
  9698  000838  C001  F02D         	movff	?___lmul,baroTruePres@X1
  9699                           
  9700                           ;barometer.c: 204: X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
  9701  00083C  0E0C               	movlw	12
  9702  00083E  6E14               	movwf	??_baroTruePres& (0+255),c
  9703  000840  C08C  F005         	movff	_B6,?___lmul+4
  9704  000844  C08D  F006         	movff	_B6+1,?___lmul+5
  9705  000848  C08E  F007         	movff	_B6+2,?___lmul+6
  9706  00084C  C08F  F008         	movff	_B6+3,?___lmul+7
  9707  000850  C08C  F001         	movff	_B6,?___lmul
  9708  000854  C08D  F002         	movff	_B6+1,?___lmul+1
  9709  000858  C08E  F003         	movff	_B6+2,?___lmul+2
  9710  00085C  C08F  F004         	movff	_B6+3,?___lmul+3
  9711  000860  EC2E  F01A         	call	___lmul	;wreg free
  9712  000864                     u5725:
  9713  000864  6614               	tstfsz	??_baroTruePres,c
  9714  000866  D001               	goto	u5726
  9715  000868  D007               	goto	u5727
  9716  00086A                     u5726:
  9717  00086A  3404               	rlcf	?___lmul+3,w,c
  9718  00086C  3204               	rrcf	?___lmul+3,f,c
  9719  00086E  3203               	rrcf	?___lmul+2,f,c
  9720  000870  3202               	rrcf	?___lmul+1,f,c
  9721  000872  3201               	rrcf	?___lmul,f,c
  9722  000874  2E14               	decfsz	??_baroTruePres,f,c
  9723  000876  D7F6               	goto	u5725
  9724  000878                     u5727:
  9725  000878  C004  F028         	movff	?___lmul+3,_baroTruePres$4850+3
  9726  00087C  C003  F027         	movff	?___lmul+2,_baroTruePres$4850+2
  9727  000880  C002  F026         	movff	?___lmul+1,_baroTruePres$4850+1
  9728  000884  C001  F025         	movff	?___lmul,_baroTruePres$4850
  9729                           
  9730                           ;barometer.c: 204: X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
  9731  000888  0100               	movlb	0	; () banked
  9732  00088A  C0A8  F001         	movff	_B1,?___lmul
  9733  00088E  0100               	movlb	0	; () banked
  9734  000890  C0A9  F002         	movff	_B1+1,?___lmul+1
  9735  000894  0E00               	movlw	0
  9736  000896  BE02               	btfsc	?___lmul+1,7,c
  9737  000898  0EFF               	movlw	-1
  9738  00089A  6E03               	movwf	?___lmul+2,c
  9739  00089C  6E04               	movwf	?___lmul+3,c
  9740  00089E  C025  F005         	movff	_baroTruePres$4850,?___lmul+4
  9741  0008A2  C026  F006         	movff	_baroTruePres$4850+1,?___lmul+5
  9742  0008A6  C027  F007         	movff	_baroTruePres$4850+2,?___lmul+6
  9743  0008AA  C028  F008         	movff	_baroTruePres$4850+3,?___lmul+7
  9744  0008AE  EC2E  F01A         	call	___lmul	;wreg free
  9745  0008B2  C003  F029         	movff	?___lmul+2,baroTruePres@X2
  9746  0008B6  C004  F02A         	movff	?___lmul+3,baroTruePres@X2+1
  9747  0008BA  6A2B               	clrf	baroTruePres@X2+2,c
  9748  0008BC  6A2C               	clrf	baroTruePres@X2+3,c
  9749                           
  9750                           ;barometer.c: 205: X3 = ((X1 + X2) + 2) >> 2;
  9751  0008BE  0E02               	movlw	2
  9752  0008C0  6E14               	movwf	??_baroTruePres& (0+255),c
  9753  0008C2  5029               	movf	baroTruePres@X2,w,c
  9754  0008C4  242D               	addwf	baroTruePres@X1,w,c
  9755  0008C6  6E15               	movwf	(??_baroTruePres+1)& (0+255),c
  9756  0008C8  502A               	movf	baroTruePres@X2+1,w,c
  9757  0008CA  202E               	addwfc	baroTruePres@X1+1,w,c
  9758  0008CC  6E16               	movwf	(??_baroTruePres+2)& (0+255),c
  9759  0008CE  502B               	movf	baroTruePres@X2+2,w,c
  9760  0008D0  202F               	addwfc	baroTruePres@X1+2,w,c
  9761  0008D2  6E17               	movwf	(??_baroTruePres+3)& (0+255),c
  9762  0008D4  502C               	movf	baroTruePres@X2+3,w,c
  9763  0008D6  2030               	addwfc	baroTruePres@X1+3,w,c
  9764  0008D8  6E18               	movwf	(??_baroTruePres+4)& (0+255),c
  9765  0008DA  0E02               	movlw	2
  9766  0008DC  2415               	addwf	??_baroTruePres+1,w,c
  9767  0008DE  6E19               	movwf	(??_baroTruePres+5)& (0+255),c
  9768  0008E0  0E00               	movlw	0
  9769  0008E2  2016               	addwfc	??_baroTruePres+2,w,c
  9770  0008E4  6E1A               	movwf	(??_baroTruePres+6)& (0+255),c
  9771  0008E6  0E00               	movlw	0
  9772  0008E8  2017               	addwfc	??_baroTruePres+3,w,c
  9773  0008EA  6E1B               	movwf	(??_baroTruePres+7)& (0+255),c
  9774  0008EC  0E00               	movlw	0
  9775  0008EE  2018               	addwfc	??_baroTruePres+4,w,c
  9776  0008F0  6E1C               	movwf	(??_baroTruePres+8)& (0+255),c
  9777  0008F2                     u5735:
  9778  0008F2  6614               	tstfsz	??_baroTruePres,c
  9779  0008F4  D001               	goto	u5736
  9780  0008F6  D007               	goto	u5737
  9781  0008F8                     u5736:
  9782  0008F8  341C               	rlcf	??_baroTruePres+8,w,c
  9783  0008FA  321C               	rrcf	??_baroTruePres+8,f,c
  9784  0008FC  321B               	rrcf	??_baroTruePres+7,f,c
  9785  0008FE  321A               	rrcf	??_baroTruePres+6,f,c
  9786  000900  3219               	rrcf	??_baroTruePres+5,f,c
  9787  000902  2E14               	decfsz	??_baroTruePres,f,c
  9788  000904  D7F6               	goto	u5735
  9789  000906                     u5737:
  9790  000906  C01C  F024         	movff	??_baroTruePres+8,baroTruePres@X3+3
  9791  00090A  C01B  F023         	movff	??_baroTruePres+7,baroTruePres@X3+2
  9792  00090E  C01A  F022         	movff	??_baroTruePres+6,baroTruePres@X3+1
  9793  000912  C019  F021         	movff	??_baroTruePres+5,baroTruePres@X3
  9794                           
  9795                           ;barometer.c: 206: B4 = (AC4 * (unsigned long)(X3 + 32768)) >> 15;
  9796  000916  0E00               	movlw	0
  9797  000918  2421               	addwf	baroTruePres@X3,w,c
  9798  00091A  6E01               	movwf	?___lmul,c
  9799  00091C  0E80               	movlw	128
  9800  00091E  2022               	addwfc	baroTruePres@X3+1,w,c
  9801  000920  6E02               	movwf	?___lmul+1,c
  9802  000922  0E00               	movlw	0
  9803  000924  2023               	addwfc	baroTruePres@X3+2,w,c
  9804  000926  6E03               	movwf	?___lmul+2,c
  9805  000928  0E00               	movlw	0
  9806  00092A  2024               	addwfc	baroTruePres@X3+3,w,c
  9807  00092C  6E04               	movwf	?___lmul+3,c
  9808  00092E  0100               	movlb	0	; () banked
  9809  000930  C0A2  F005         	movff	_AC4,?___lmul+4
  9810  000934  0100               	movlb	0	; () banked
  9811  000936  C0A3  F006         	movff	_AC4+1,?___lmul+5
  9812  00093A  6A07               	clrf	?___lmul+6,c
  9813  00093C  6A08               	clrf	?___lmul+7,c
  9814  00093E  EC2E  F01A         	call	___lmul	;wreg free
  9815  000942  0E10               	movlw	16
  9816  000944  D005               	goto	u5740
  9817  000946                     u5745:
  9818  000946  90D8               	bcf	status,0,c
  9819  000948  3204               	rrcf	?___lmul+3,f,c
  9820  00094A  3203               	rrcf	?___lmul+2,f,c
  9821  00094C  3202               	rrcf	?___lmul+1,f,c
  9822  00094E  3201               	rrcf	?___lmul,f,c
  9823  000950                     u5740:
  9824  000950  2EE8               	decfsz	wreg,f,c
  9825  000952  D7F9               	goto	u5745
  9826  000954  C004  F087         	movff	?___lmul+3,_B4+3
  9827  000958  C003  F086         	movff	?___lmul+2,_B4+2
  9828  00095C  C002  F085         	movff	?___lmul+1,_B4+1
  9829  000960  C001  F084         	movff	?___lmul,_B4
  9830                           
  9831                           ;barometer.c: 207: B7 = ((unsigned long) rawPres - B3) * (50000 >> 2);
  9832  000964  0100               	movlb	0	; () banked
  9833  000966  C080  F014         	movff	_B3,??_baroTruePres
  9834  00096A  0100               	movlb	0	; () banked
  9835  00096C  C081  F015         	movff	_B3+1,??_baroTruePres+1
  9836  000970  0100               	movlb	0	; () banked
  9837  000972  C082  F016         	movff	_B3+2,??_baroTruePres+2
  9838  000976  0100               	movlb	0	; () banked
  9839  000978  C083  F017         	movff	_B3+3,??_baroTruePres+3
  9840  00097C  1E14               	comf	??_baroTruePres,f,c
  9841  00097E  1E15               	comf	??_baroTruePres+1,f,c
  9842  000980  1E16               	comf	??_baroTruePres+2,f,c
  9843  000982  1E17               	comf	??_baroTruePres+3,f,c
  9844  000984  2A14               	incf	??_baroTruePres,f,c
  9845  000986  0E00               	movlw	0
  9846  000988  2215               	addwfc	??_baroTruePres+1,f,c
  9847  00098A  2216               	addwfc	??_baroTruePres+2,f,c
  9848  00098C  2217               	addwfc	??_baroTruePres+3,f,c
  9849  00098E  5010               	movf	baroTruePres@rawPres,w,c
  9850  000990  2414               	addwf	??_baroTruePres,w,c
  9851  000992  6E01               	movwf	?___lmul,c
  9852  000994  5011               	movf	baroTruePres@rawPres+1,w,c
  9853  000996  2015               	addwfc	??_baroTruePres+1,w,c
  9854  000998  6E02               	movwf	?___lmul+1,c
  9855  00099A  0E00               	movlw	0
  9856  00099C  2016               	addwfc	??_baroTruePres+2,w,c
  9857  00099E  6E03               	movwf	?___lmul+2,c
  9858  0009A0  0E00               	movlw	0
  9859  0009A2  2017               	addwfc	??_baroTruePres+3,w,c
  9860  0009A4  6E04               	movwf	?___lmul+3,c
  9861  0009A6  0ED4               	movlw	212
  9862  0009A8  6E05               	movwf	?___lmul+4,c
  9863  0009AA  0E30               	movlw	48
  9864  0009AC  6E06               	movwf	?___lmul+5,c
  9865  0009AE  0E00               	movlw	0
  9866  0009B0  6E07               	movwf	?___lmul+6,c
  9867  0009B2  0E00               	movlw	0
  9868  0009B4  6E08               	movwf	?___lmul+7,c
  9869  0009B6  EC2E  F01A         	call	___lmul	;wreg free
  9870  0009BA  C004  F093         	movff	?___lmul+3,_B7+3
  9871  0009BE  C003  F092         	movff	?___lmul+2,_B7+2
  9872  0009C2  C002  F091         	movff	?___lmul+1,_B7+1
  9873  0009C6  C001  F090         	movff	?___lmul,_B7
  9874                           
  9875                           ;barometer.c: 208: (B7 < 0x80000000) ?
  9876                           ;barometer.c: 209: (pressure = (B7 * 2) / B4) :
  9877                           ;barometer.c: 210: (pressure = (B7 / B4) / 2);
  9878  0009CA  0E00               	movlw	0
  9879  0009CC  0100               	movlb	0	; () banked
  9880  0009CE  0100               	movlb	0	; () banked
  9881  0009D0  5D90               	subwf	_B7& (0+255),w,b
  9882  0009D2  0E00               	movlw	0
  9883  0009D4  0100               	movlb	0	; () banked
  9884  0009D6  5991               	subwfb	(_B7+1)& (0+255),w,b
  9885  0009D8  0E00               	movlw	0
  9886  0009DA  0100               	movlb	0	; () banked
  9887  0009DC  5992               	subwfb	(_B7+2)& (0+255),w,b
  9888  0009DE  0E80               	movlw	128
  9889  0009E0  0100               	movlb	0	; () banked
  9890  0009E2  0100               	movlb	0	; () banked
  9891  0009E4  5993               	subwfb	(_B7+3)& (0+255),w,b
  9892  0009E6  B0D8               	btfsc	status,0,c
  9893  0009E8  D01C               	goto	l6846
  9894                           
  9895                           ; BSR set to: 0
  9896  0009EA  90D8               	bcf	status,0,c
  9897  0009EC  0100               	movlb	0	; () banked
  9898  0009EE  0100               	movlb	0	; () banked
  9899  0009F0  3590               	rlcf	_B7& (0+255),w,b
  9900  0009F2  6E01               	movwf	?___lldiv,c
  9901  0009F4  0100               	movlb	0	; () banked
  9902  0009F6  0100               	movlb	0	; () banked
  9903  0009F8  3591               	rlcf	(_B7+1)& (0+255),w,b
  9904  0009FA  6E02               	movwf	?___lldiv+1,c
  9905  0009FC  0100               	movlb	0	; () banked
  9906  0009FE  0100               	movlb	0	; () banked
  9907  000A00  3592               	rlcf	(_B7+2)& (0+255),w,b
  9908  000A02  6E03               	movwf	?___lldiv+2,c
  9909  000A04  0100               	movlb	0	; () banked
  9910  000A06  0100               	movlb	0	; () banked
  9911  000A08  3593               	rlcf	(_B7+3)& (0+255),w,b
  9912  000A0A  6E04               	movwf	?___lldiv+3,c
  9913  000A0C  C084  F005         	movff	_B4,?___lldiv+4
  9914  000A10  C085  F006         	movff	_B4+1,?___lldiv+5
  9915  000A14  C086  F007         	movff	_B4+2,?___lldiv+6
  9916  000A18  C087  F008         	movff	_B4+3,?___lldiv+7
  9917  000A1C  EC3D  F017         	call	___lldiv	;wreg free
  9918  000A20  D017               	goto	L16
  9919  000A22                     l6846:
  9920  000A22  C090  F001         	movff	_B7,?___lldiv
  9921  000A26  C091  F002         	movff	_B7+1,?___lldiv+1
  9922  000A2A  C092  F003         	movff	_B7+2,?___lldiv+2
  9923  000A2E  C093  F004         	movff	_B7+3,?___lldiv+3
  9924  000A32  C084  F005         	movff	_B4,?___lldiv+4
  9925  000A36  C085  F006         	movff	_B4+1,?___lldiv+5
  9926  000A3A  C086  F007         	movff	_B4+2,?___lldiv+6
  9927  000A3E  C087  F008         	movff	_B4+3,?___lldiv+7
  9928  000A42  EC3D  F017         	call	___lldiv	;wreg free
  9929  000A46  90D8               	bcf	status,0,c
  9930  000A48  3204               	rrcf	?___lldiv+3,f,c
  9931  000A4A  3203               	rrcf	?___lldiv+2,f,c
  9932  000A4C  3202               	rrcf	?___lldiv+1,f,c
  9933  000A4E  3201               	rrcf	?___lldiv,f,c
  9934  000A50                     L16:
  9935  000A50  C004  F034         	movff	?___lldiv+3,baroTruePres@pressure+3
  9936  000A54  C003  F033         	movff	?___lldiv+2,baroTruePres@pressure+2
  9937  000A58  C002  F032         	movff	?___lldiv+1,baroTruePres@pressure+1
  9938  000A5C  C001  F031         	movff	?___lldiv,baroTruePres@pressure
  9939                           
  9940                           ;barometer.c: 211: X1 = (pressure >> 8) * (pressure >> 8);
  9941  000A60  C032  F014         	movff	baroTruePres@pressure+1,??_baroTruePres
  9942  000A64  C033  F015         	movff	baroTruePres@pressure+2,??_baroTruePres+1
  9943  000A68  C034  F016         	movff	baroTruePres@pressure+3,??_baroTruePres+2
  9944  000A6C  6A17               	clrf	(??_baroTruePres+3)& (0+255),c
  9945  000A6E  BE16               	btfsc	(??_baroTruePres+2)& (0+255),7,c
  9946  000A70  6817               	setf	(??_baroTruePres+3)& (0+255),c
  9947  000A72  C017  F004         	movff	??_baroTruePres+3,?___lmul+3
  9948  000A76  C016  F003         	movff	??_baroTruePres+2,?___lmul+2
  9949  000A7A  C015  F002         	movff	??_baroTruePres+1,?___lmul+1
  9950  000A7E  C014  F001         	movff	??_baroTruePres,?___lmul
  9951  000A82  C032  F018         	movff	baroTruePres@pressure+1,??_baroTruePres+4
  9952  000A86  C033  F019         	movff	baroTruePres@pressure+2,??_baroTruePres+5
  9953  000A8A  C034  F01A         	movff	baroTruePres@pressure+3,??_baroTruePres+6
  9954  000A8E  6A1B               	clrf	(??_baroTruePres+7)& (0+255),c
  9955  000A90  BE1A               	btfsc	(??_baroTruePres+6)& (0+255),7,c
  9956  000A92  681B               	setf	(??_baroTruePres+7)& (0+255),c
  9957  000A94  C01B  F008         	movff	??_baroTruePres+7,?___lmul+7
  9958  000A98  C01A  F007         	movff	??_baroTruePres+6,?___lmul+6
  9959  000A9C  C019  F006         	movff	??_baroTruePres+5,?___lmul+5
  9960  000AA0  C018  F005         	movff	??_baroTruePres+4,?___lmul+4
  9961  000AA4  EC2E  F01A         	call	___lmul	;wreg free
  9962  000AA8  C004  F030         	movff	?___lmul+3,baroTruePres@X1+3
  9963  000AAC  C003  F02F         	movff	?___lmul+2,baroTruePres@X1+2
  9964  000AB0  C002  F02E         	movff	?___lmul+1,baroTruePres@X1+1
  9965  000AB4  C001  F02D         	movff	?___lmul,baroTruePres@X1
  9966                           
  9967                           ;barometer.c: 212: X1 = (X1 * 3038) >> 16;
  9968  000AB8  C02D  F001         	movff	baroTruePres@X1,?___lmul
  9969  000ABC  C02E  F002         	movff	baroTruePres@X1+1,?___lmul+1
  9970  000AC0  C02F  F003         	movff	baroTruePres@X1+2,?___lmul+2
  9971  000AC4  C030  F004         	movff	baroTruePres@X1+3,?___lmul+3
  9972  000AC8  0EDE               	movlw	222
  9973  000ACA  6E05               	movwf	?___lmul+4,c
  9974  000ACC  0E0B               	movlw	11
  9975  000ACE  6E06               	movwf	?___lmul+5,c
  9976  000AD0  0E00               	movlw	0
  9977  000AD2  6E07               	movwf	?___lmul+6,c
  9978  000AD4  0E00               	movlw	0
  9979  000AD6  6E08               	movwf	?___lmul+7,c
  9980  000AD8  EC2E  F01A         	call	___lmul	;wreg free
  9981  000ADC  C003  F02D         	movff	?___lmul+2,baroTruePres@X1
  9982  000AE0  C004  F02E         	movff	?___lmul+3,baroTruePres@X1+1
  9983  000AE4  6A2F               	clrf	baroTruePres@X1+2,c
  9984  000AE6  6A30               	clrf	baroTruePres@X1+3,c
  9985                           
  9986                           ;barometer.c: 213: X2 = (-7357 * pressure) >> 16;
  9987  000AE8  C031  F001         	movff	baroTruePres@pressure,?___lmul
  9988  000AEC  C032  F002         	movff	baroTruePres@pressure+1,?___lmul+1
  9989  000AF0  C033  F003         	movff	baroTruePres@pressure+2,?___lmul+2
  9990  000AF4  C034  F004         	movff	baroTruePres@pressure+3,?___lmul+3
  9991  000AF8  0E43               	movlw	67
  9992  000AFA  6E05               	movwf	?___lmul+4,c
  9993  000AFC  0EE3               	movlw	227
  9994  000AFE  6E06               	movwf	?___lmul+5,c
  9995  000B00  0EFF               	movlw	255
  9996  000B02  6E07               	movwf	?___lmul+6,c
  9997  000B04  0EFF               	movlw	255
  9998  000B06  6E08               	movwf	?___lmul+7,c
  9999  000B08  EC2E  F01A         	call	___lmul	;wreg free
 10000  000B0C  C003  F029         	movff	?___lmul+2,baroTruePres@X2
 10001  000B10  C004  F02A         	movff	?___lmul+3,baroTruePres@X2+1
 10002  000B14  6A2B               	clrf	baroTruePres@X2+2,c
 10003  000B16  6A2C               	clrf	baroTruePres@X2+3,c
 10004                           
 10005                           ;barometer.c: 214: pressure = pressure + (X1 + X2 + 3971) >> 4;
 10006  000B18  0E04               	movlw	4
 10007  000B1A  6E14               	movwf	??_baroTruePres& (0+255),c
 10008  000B1C  5029               	movf	baroTruePres@X2,w,c
 10009  000B1E  242D               	addwf	baroTruePres@X1,w,c
 10010  000B20  6E15               	movwf	(??_baroTruePres+1)& (0+255),c
 10011  000B22  502A               	movf	baroTruePres@X2+1,w,c
 10012  000B24  202E               	addwfc	baroTruePres@X1+1,w,c
 10013  000B26  6E16               	movwf	(??_baroTruePres+2)& (0+255),c
 10014  000B28  502B               	movf	baroTruePres@X2+2,w,c
 10015  000B2A  202F               	addwfc	baroTruePres@X1+2,w,c
 10016  000B2C  6E17               	movwf	(??_baroTruePres+3)& (0+255),c
 10017  000B2E  502C               	movf	baroTruePres@X2+3,w,c
 10018  000B30  2030               	addwfc	baroTruePres@X1+3,w,c
 10019  000B32  6E18               	movwf	(??_baroTruePres+4)& (0+255),c
 10020  000B34  5031               	movf	baroTruePres@pressure,w,c
 10021  000B36  2415               	addwf	??_baroTruePres+1,w,c
 10022  000B38  6E19               	movwf	(??_baroTruePres+5)& (0+255),c
 10023  000B3A  5032               	movf	baroTruePres@pressure+1,w,c
 10024  000B3C  2016               	addwfc	??_baroTruePres+2,w,c
 10025  000B3E  6E1A               	movwf	(??_baroTruePres+6)& (0+255),c
 10026  000B40  5033               	movf	baroTruePres@pressure+2,w,c
 10027  000B42  2017               	addwfc	??_baroTruePres+3,w,c
 10028  000B44  6E1B               	movwf	(??_baroTruePres+7)& (0+255),c
 10029  000B46  5034               	movf	baroTruePres@pressure+3,w,c
 10030  000B48  2018               	addwfc	??_baroTruePres+4,w,c
 10031  000B4A  6E1C               	movwf	(??_baroTruePres+8)& (0+255),c
 10032  000B4C  0E83               	movlw	131
 10033  000B4E  2419               	addwf	??_baroTruePres+5,w,c
 10034  000B50  6E1D               	movwf	(??_baroTruePres+9)& (0+255),c
 10035  000B52  0E0F               	movlw	15
 10036  000B54  201A               	addwfc	??_baroTruePres+6,w,c
 10037  000B56  6E1E               	movwf	(??_baroTruePres+10)& (0+255),c
 10038  000B58  0E00               	movlw	0
 10039  000B5A  201B               	addwfc	??_baroTruePres+7,w,c
 10040  000B5C  6E1F               	movwf	(??_baroTruePres+11)& (0+255),c
 10041  000B5E  0E00               	movlw	0
 10042  000B60  201C               	addwfc	??_baroTruePres+8,w,c
 10043  000B62  6E20               	movwf	(??_baroTruePres+12)& (0+255),c
 10044  000B64                     u5765:
 10045  000B64  6614               	tstfsz	??_baroTruePres,c
 10046  000B66  D001               	goto	u5766
 10047  000B68  D007               	goto	u5767
 10048  000B6A                     u5766:
 10049  000B6A  3420               	rlcf	??_baroTruePres+12,w,c
 10050  000B6C  3220               	rrcf	??_baroTruePres+12,f,c
 10051  000B6E  321F               	rrcf	??_baroTruePres+11,f,c
 10052  000B70  321E               	rrcf	??_baroTruePres+10,f,c
 10053  000B72  321D               	rrcf	??_baroTruePres+9,f,c
 10054  000B74  2E14               	decfsz	??_baroTruePres,f,c
 10055  000B76  D7F6               	goto	u5765
 10056  000B78                     u5767:
 10057  000B78  C020  F034         	movff	??_baroTruePres+12,baroTruePres@pressure+3
 10058  000B7C  C01F  F033         	movff	??_baroTruePres+11,baroTruePres@pressure+2
 10059  000B80  C01E  F032         	movff	??_baroTruePres+10,baroTruePres@pressure+1
 10060  000B84  C01D  F031         	movff	??_baroTruePres+9,baroTruePres@pressure
 10061                           
 10062                           ;barometer.c: 216: return pressure;
 10063  000B88  C031  F010         	movff	baroTruePres@pressure,?_baroTruePres
 10064  000B8C  C032  F011         	movff	baroTruePres@pressure+1,?_baroTruePres+1
 10065  000B90  C033  F012         	movff	baroTruePres@pressure+2,?_baroTruePres+2
 10066  000B94  C034  F013         	movff	baroTruePres@pressure+3,?_baroTruePres+3
 10067  000B98  0012               	return	
 10068  000B9A                     __end_of_baroTruePres:
 10069                           	opt stack 0
 10070                           tblptru	equ	0xFF8
 10071                           tblptrh	equ	0xFF7
 10072                           tblptrl	equ	0xFF6
 10073                           tablat	equ	0xFF5
 10074                           intcon	equ	0xFF2
 10075                           intcon2	equ	0xFF1
 10076                           postinc0	equ	0xFEE
 10077                           wreg	equ	0xFE8
 10078                           postinc1	equ	0xFE6
 10079                           postdec1	equ	0xFE5
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function ___lldiv *****************
 10089 ;; Defined at:
 10090 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lldiv.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  dividend        4    0[COMRAM] unsigned long 
 10093 ;;  divisor         4    4[COMRAM] unsigned long 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  quotient        4    9[COMRAM] unsigned long 
 10096 ;;  counter         1   13[COMRAM] unsigned char 
 10097 ;; Return value:  Size  Location     Type
 10098 ;;                  4    0[COMRAM] unsigned long 
 10099 ;; Registers used:
 10100 ;;		wreg, status,2, status,0
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10106 ;;      Params:         8       0       0       0       0       0       0
 10107 ;;      Locals:         5       0       0       0       0       0       0
 10108 ;;      Temps:          1       0       0       0       0       0       0
 10109 ;;      Totals:        14       0       0       0       0       0       0
 10110 ;;Total ram usage:       14 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_baroTruePres
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           	psect	text57
 10120  002E7A                     __ptext57:
 10121                           	opt stack 0
 10122  002E7A                     ___lldiv:
 10123                           	opt stack 28
 10124                           
 10125                           ;incstack = 0
 10126                           ;incstack = 0
 10127  002E7A  0E00               	movlw	0
 10128  002E7C  6E0A               	movwf	___lldiv@quotient,c
 10129  002E7E  0E00               	movlw	0
 10130  002E80  6E0B               	movwf	___lldiv@quotient+1,c
 10131  002E82  0E00               	movlw	0
 10132  002E84  6E0C               	movwf	___lldiv@quotient+2,c
 10133  002E86  0E00               	movlw	0
 10134  002E88  6E0D               	movwf	___lldiv@quotient+3,c
 10135  002E8A  5008               	movf	___lldiv@divisor+3,w,c
 10136  002E8C  1005               	iorwf	___lldiv@divisor,w,c
 10137  002E8E  1006               	iorwf	___lldiv@divisor+1,w,c
 10138  002E90  1007               	iorwf	___lldiv@divisor+2,w,c
 10139  002E92  B4D8               	btfsc	status,2,c
 10140  002E94  D02C               	goto	l1956
 10141  002E96  6E09               	movwf	??___lldiv& (0+255),c
 10142  002E98  0E01               	movlw	1
 10143  002E9A  6E0E               	movwf	___lldiv@counter,c
 10144  002E9C  5009               	movf	??___lldiv& (0+255),w,c
 10145  002E9E  D006               	goto	l6704
 10146  002EA0                     l6702:
 10147  002EA0  90D8               	bcf	status,0,c
 10148  002EA2  3605               	rlcf	___lldiv@divisor,f,c
 10149  002EA4  3606               	rlcf	___lldiv@divisor+1,f,c
 10150  002EA6  3607               	rlcf	___lldiv@divisor+2,f,c
 10151  002EA8  3608               	rlcf	___lldiv@divisor+3,f,c
 10152  002EAA  2A0E               	incf	___lldiv@counter,f,c
 10153  002EAC                     l6704:
 10154  002EAC  AE08               	btfss	___lldiv@divisor+3,7,c
 10155  002EAE  D7F8               	goto	l6702
 10156  002EB0                     l6706:
 10157  002EB0  90D8               	bcf	status,0,c
 10158  002EB2  360A               	rlcf	___lldiv@quotient,f,c
 10159  002EB4  360B               	rlcf	___lldiv@quotient+1,f,c
 10160  002EB6  360C               	rlcf	___lldiv@quotient+2,f,c
 10161  002EB8  360D               	rlcf	___lldiv@quotient+3,f,c
 10162  002EBA  5005               	movf	___lldiv@divisor,w,c
 10163  002EBC  5C01               	subwf	___lldiv@dividend,w,c
 10164  002EBE  5006               	movf	___lldiv@divisor+1,w,c
 10165  002EC0  5802               	subwfb	___lldiv@dividend+1,w,c
 10166  002EC2  5007               	movf	___lldiv@divisor+2,w,c
 10167  002EC4  5803               	subwfb	___lldiv@dividend+2,w,c
 10168  002EC6  5008               	movf	___lldiv@divisor+3,w,c
 10169  002EC8  5804               	subwfb	___lldiv@dividend+3,w,c
 10170  002ECA  A0D8               	btfss	status,0,c
 10171  002ECC  D009               	goto	l6714
 10172  002ECE  5005               	movf	___lldiv@divisor,w,c
 10173  002ED0  5E01               	subwf	___lldiv@dividend,f,c
 10174  002ED2  5006               	movf	___lldiv@divisor+1,w,c
 10175  002ED4  5A02               	subwfb	___lldiv@dividend+1,f,c
 10176  002ED6  5007               	movf	___lldiv@divisor+2,w,c
 10177  002ED8  5A03               	subwfb	___lldiv@dividend+2,f,c
 10178  002EDA  5008               	movf	___lldiv@divisor+3,w,c
 10179  002EDC  5A04               	subwfb	___lldiv@dividend+3,f,c
 10180  002EDE  800A               	bsf	___lldiv@quotient,0,c
 10181  002EE0                     l6714:
 10182  002EE0  90D8               	bcf	status,0,c
 10183  002EE2  3208               	rrcf	___lldiv@divisor+3,f,c
 10184  002EE4  3207               	rrcf	___lldiv@divisor+2,f,c
 10185  002EE6  3206               	rrcf	___lldiv@divisor+1,f,c
 10186  002EE8  3205               	rrcf	___lldiv@divisor,f,c
 10187  002EEA  2E0E               	decfsz	___lldiv@counter,f,c
 10188  002EEC  D7E1               	goto	l6706
 10189  002EEE                     l1956:
 10190  002EEE  C00A  F001         	movff	___lldiv@quotient,?___lldiv
 10191  002EF2  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10192  002EF6  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10193  002EFA  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10194  002EFE  0012               	return	
 10195  002F00                     __end_of___lldiv:
 10196                           	opt stack 0
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           intcon	equ	0xFF2
 10202                           intcon2	equ	0xFF1
 10203                           postinc0	equ	0xFEE
 10204                           wreg	equ	0xFE8
 10205                           postinc1	equ	0xFE6
 10206                           postdec1	equ	0xFE5
 10207                           fsr1l	equ	0xFE1
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           postdec2	equ	0xFDD
 10211                           fsr2h	equ	0xFDA
 10212                           fsr2l	equ	0xFD9
 10213                           status	equ	0xFD8
 10214                           
 10215 ;; *************** function ___lmul *****************
 10216 ;; Defined at:
 10217 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\lmul.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  multiplier      4    0[COMRAM] unsigned long 
 10220 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  product         4    8[COMRAM] unsigned long 
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  4    0[COMRAM] unsigned long 
 10225 ;; Registers used:
 10226 ;;		wreg, status,2, status,0
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/0
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10232 ;;      Params:         8       0       0       0       0       0       0
 10233 ;;      Locals:         4       0       0       0       0       0       0
 10234 ;;      Temps:          0       0       0       0       0       0       0
 10235 ;;      Totals:        12       0       0       0       0       0       0
 10236 ;;Total ram usage:       12 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; This function calls:
 10239 ;;		Nothing
 10240 ;; This function is called by:
 10241 ;;		_baroTruePres
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           	psect	text58
 10246  00345C                     __ptext58:
 10247                           	opt stack 0
 10248  00345C                     ___lmul:
 10249                           	opt stack 28
 10250                           
 10251                           ;incstack = 0
 10252                           ;incstack = 0
 10253  00345C  0E00               	movlw	0
 10254  00345E  6E09               	movwf	___lmul@product,c
 10255  003460  0E00               	movlw	0
 10256  003462  6E0A               	movwf	___lmul@product+1,c
 10257  003464  0E00               	movlw	0
 10258  003466  6E0B               	movwf	___lmul@product+2,c
 10259  003468  0E00               	movlw	0
 10260  00346A  6E0C               	movwf	___lmul@product+3,c
 10261  00346C                     l6644:
 10262  00346C  A001               	btfss	___lmul@multiplier,0,c
 10263  00346E  D008               	goto	l6648
 10264  003470  5005               	movf	___lmul@multiplicand,w,c
 10265  003472  2609               	addwf	___lmul@product,f,c
 10266  003474  5006               	movf	___lmul@multiplicand+1,w,c
 10267  003476  220A               	addwfc	___lmul@product+1,f,c
 10268  003478  5007               	movf	___lmul@multiplicand+2,w,c
 10269  00347A  220B               	addwfc	___lmul@product+2,f,c
 10270  00347C  5008               	movf	___lmul@multiplicand+3,w,c
 10271  00347E  220C               	addwfc	___lmul@product+3,f,c
 10272  003480                     l6648:
 10273  003480  90D8               	bcf	status,0,c
 10274  003482  3605               	rlcf	___lmul@multiplicand,f,c
 10275  003484  3606               	rlcf	___lmul@multiplicand+1,f,c
 10276  003486  3607               	rlcf	___lmul@multiplicand+2,f,c
 10277  003488  3608               	rlcf	___lmul@multiplicand+3,f,c
 10278  00348A  90D8               	bcf	status,0,c
 10279  00348C  3204               	rrcf	___lmul@multiplier+3,f,c
 10280  00348E  3203               	rrcf	___lmul@multiplier+2,f,c
 10281  003490  3202               	rrcf	___lmul@multiplier+1,f,c
 10282  003492  3201               	rrcf	___lmul@multiplier,f,c
 10283  003494  5004               	movf	___lmul@multiplier+3,w,c
 10284  003496  1001               	iorwf	___lmul@multiplier,w,c
 10285  003498  1002               	iorwf	___lmul@multiplier+1,w,c
 10286  00349A  1003               	iorwf	___lmul@multiplier+2,w,c
 10287  00349C  A4D8               	btfss	status,2,c
 10288  00349E  D7E6               	goto	l6644
 10289  0034A0  C009  F001         	movff	___lmul@product,?___lmul
 10290  0034A4  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10291  0034A8  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10292  0034AC  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10293  0034B0  0012               	return	
 10294  0034B2                     __end_of___lmul:
 10295                           	opt stack 0
 10296                           tblptru	equ	0xFF8
 10297                           tblptrh	equ	0xFF7
 10298                           tblptrl	equ	0xFF6
 10299                           tablat	equ	0xFF5
 10300                           intcon	equ	0xFF2
 10301                           intcon2	equ	0xFF1
 10302                           postinc0	equ	0xFEE
 10303                           wreg	equ	0xFE8
 10304                           postinc1	equ	0xFE6
 10305                           postdec1	equ	0xFE5
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           postdec2	equ	0xFDD
 10310                           fsr2h	equ	0xFDA
 10311                           fsr2l	equ	0xFD9
 10312                           status	equ	0xFD8
 10313                           
 10314 ;; *************** function ___aldiv *****************
 10315 ;; Defined at:
 10316 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\aldiv.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;  dividend        4    0[COMRAM] long 
 10319 ;;  divisor         4    4[COMRAM] long 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  quotient        4   11[COMRAM] long 
 10322 ;;  sign            1   10[COMRAM] unsigned char 
 10323 ;;  counter         1    9[COMRAM] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  4    0[COMRAM] long 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2, status,0
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10333 ;;      Params:         8       0       0       0       0       0       0
 10334 ;;      Locals:         6       0       0       0       0       0       0
 10335 ;;      Temps:          1       0       0       0       0       0       0
 10336 ;;      Totals:        15       0       0       0       0       0       0
 10337 ;;Total ram usage:       15 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; This function calls:
 10340 ;;		Nothing
 10341 ;; This function is called by:
 10342 ;;		_baroTrueTemp
 10343 ;;		_baroTruePres
 10344 ;;		_baroConvertAlt
 10345 ;; This function uses a non-reentrant model
 10346 ;;
 10347                           
 10348                           	psect	text59
 10349  0026AA                     __ptext59:
 10350                           	opt stack 0
 10351  0026AA                     ___aldiv:
 10352                           	opt stack 28
 10353                           
 10354                           ;incstack = 0
 10355                           ;incstack = 0
 10356  0026AA  6E09               	movwf	??___aldiv& (0+255),c
 10357  0026AC  0E00               	movlw	0
 10358  0026AE  6E0B               	movwf	___aldiv@sign,c
 10359  0026B0  5009               	movf	??___aldiv& (0+255),w,c
 10360  0026B2  AE08               	btfss	___aldiv@divisor+3,7,c
 10361  0026B4  D00C               	goto	l6606
 10362  0026B6  1E08               	comf	___aldiv@divisor+3,f,c
 10363  0026B8  1E07               	comf	___aldiv@divisor+2,f,c
 10364  0026BA  1E06               	comf	___aldiv@divisor+1,f,c
 10365  0026BC  6C05               	negf	___aldiv@divisor,c
 10366  0026BE  0E00               	movlw	0
 10367  0026C0  2206               	addwfc	___aldiv@divisor+1,f,c
 10368  0026C2  2207               	addwfc	___aldiv@divisor+2,f,c
 10369  0026C4  2208               	addwfc	___aldiv@divisor+3,f,c
 10370  0026C6  6E09               	movwf	??___aldiv& (0+255),c
 10371  0026C8  0E01               	movlw	1
 10372  0026CA  6E0B               	movwf	___aldiv@sign,c
 10373  0026CC  5009               	movf	??___aldiv& (0+255),w,c
 10374  0026CE                     l6606:
 10375  0026CE  AE04               	btfss	___aldiv@dividend+3,7,c
 10376  0026D0  D00A               	goto	l6612
 10377  0026D2  1E04               	comf	___aldiv@dividend+3,f,c
 10378  0026D4  1E03               	comf	___aldiv@dividend+2,f,c
 10379  0026D6  1E02               	comf	___aldiv@dividend+1,f,c
 10380  0026D8  6C01               	negf	___aldiv@dividend,c
 10381  0026DA  0E00               	movlw	0
 10382  0026DC  2202               	addwfc	___aldiv@dividend+1,f,c
 10383  0026DE  2203               	addwfc	___aldiv@dividend+2,f,c
 10384  0026E0  2204               	addwfc	___aldiv@dividend+3,f,c
 10385  0026E2  0E01               	movlw	1
 10386  0026E4  1A0B               	xorwf	___aldiv@sign,f,c
 10387  0026E6                     l6612:
 10388  0026E6  0E00               	movlw	0
 10389  0026E8  6E0C               	movwf	___aldiv@quotient,c
 10390  0026EA  0E00               	movlw	0
 10391  0026EC  6E0D               	movwf	___aldiv@quotient+1,c
 10392  0026EE  0E00               	movlw	0
 10393  0026F0  6E0E               	movwf	___aldiv@quotient+2,c
 10394  0026F2  0E00               	movlw	0
 10395  0026F4  6E0F               	movwf	___aldiv@quotient+3,c
 10396  0026F6  5008               	movf	___aldiv@divisor+3,w,c
 10397  0026F8  1005               	iorwf	___aldiv@divisor,w,c
 10398  0026FA  1006               	iorwf	___aldiv@divisor+1,w,c
 10399  0026FC  1007               	iorwf	___aldiv@divisor+2,w,c
 10400  0026FE  B4D8               	btfsc	status,2,c
 10401  002700  D02C               	goto	l6634
 10402  002702  6E09               	movwf	??___aldiv& (0+255),c
 10403  002704  0E01               	movlw	1
 10404  002706  6E0A               	movwf	___aldiv@counter,c
 10405  002708  5009               	movf	??___aldiv& (0+255),w,c
 10406  00270A  D006               	goto	l6620
 10407  00270C                     l6618:
 10408  00270C  90D8               	bcf	status,0,c
 10409  00270E  3605               	rlcf	___aldiv@divisor,f,c
 10410  002710  3606               	rlcf	___aldiv@divisor+1,f,c
 10411  002712  3607               	rlcf	___aldiv@divisor+2,f,c
 10412  002714  3608               	rlcf	___aldiv@divisor+3,f,c
 10413  002716  2A0A               	incf	___aldiv@counter,f,c
 10414  002718                     l6620:
 10415  002718  AE08               	btfss	___aldiv@divisor+3,7,c
 10416  00271A  D7F8               	goto	l6618
 10417  00271C                     l6622:
 10418  00271C  90D8               	bcf	status,0,c
 10419  00271E  360C               	rlcf	___aldiv@quotient,f,c
 10420  002720  360D               	rlcf	___aldiv@quotient+1,f,c
 10421  002722  360E               	rlcf	___aldiv@quotient+2,f,c
 10422  002724  360F               	rlcf	___aldiv@quotient+3,f,c
 10423  002726  5005               	movf	___aldiv@divisor,w,c
 10424  002728  5C01               	subwf	___aldiv@dividend,w,c
 10425  00272A  5006               	movf	___aldiv@divisor+1,w,c
 10426  00272C  5802               	subwfb	___aldiv@dividend+1,w,c
 10427  00272E  5007               	movf	___aldiv@divisor+2,w,c
 10428  002730  5803               	subwfb	___aldiv@dividend+2,w,c
 10429  002732  5008               	movf	___aldiv@divisor+3,w,c
 10430  002734  5804               	subwfb	___aldiv@dividend+3,w,c
 10431  002736  A0D8               	btfss	status,0,c
 10432  002738  D009               	goto	l6630
 10433  00273A  5005               	movf	___aldiv@divisor,w,c
 10434  00273C  5E01               	subwf	___aldiv@dividend,f,c
 10435  00273E  5006               	movf	___aldiv@divisor+1,w,c
 10436  002740  5A02               	subwfb	___aldiv@dividend+1,f,c
 10437  002742  5007               	movf	___aldiv@divisor+2,w,c
 10438  002744  5A03               	subwfb	___aldiv@dividend+2,f,c
 10439  002746  5008               	movf	___aldiv@divisor+3,w,c
 10440  002748  5A04               	subwfb	___aldiv@dividend+3,f,c
 10441  00274A  800C               	bsf	___aldiv@quotient,0,c
 10442  00274C                     l6630:
 10443  00274C  90D8               	bcf	status,0,c
 10444  00274E  3208               	rrcf	___aldiv@divisor+3,f,c
 10445  002750  3207               	rrcf	___aldiv@divisor+2,f,c
 10446  002752  3206               	rrcf	___aldiv@divisor+1,f,c
 10447  002754  3205               	rrcf	___aldiv@divisor,f,c
 10448  002756  2E0A               	decfsz	___aldiv@counter,f,c
 10449  002758  D7E1               	goto	l6622
 10450  00275A                     l6634:
 10451  00275A  500B               	movf	___aldiv@sign,w,c
 10452  00275C  B4D8               	btfsc	status,2,c
 10453  00275E  D008               	goto	l6638
 10454  002760  1E0F               	comf	___aldiv@quotient+3,f,c
 10455  002762  1E0E               	comf	___aldiv@quotient+2,f,c
 10456  002764  1E0D               	comf	___aldiv@quotient+1,f,c
 10457  002766  6C0C               	negf	___aldiv@quotient,c
 10458  002768  0E00               	movlw	0
 10459  00276A  220D               	addwfc	___aldiv@quotient+1,f,c
 10460  00276C  220E               	addwfc	___aldiv@quotient+2,f,c
 10461  00276E  220F               	addwfc	___aldiv@quotient+3,f,c
 10462  002770                     l6638:
 10463  002770  C00C  F001         	movff	___aldiv@quotient,?___aldiv
 10464  002774  C00D  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 10465  002778  C00E  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 10466  00277C  C00F  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 10467  002780  0012               	return	
 10468  002782                     __end_of___aldiv:
 10469                           	opt stack 0
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           intcon	equ	0xFF2
 10475                           intcon2	equ	0xFF1
 10476                           postinc0	equ	0xFEE
 10477                           wreg	equ	0xFE8
 10478                           postinc1	equ	0xFE6
 10479                           postdec1	equ	0xFE5
 10480                           fsr1l	equ	0xFE1
 10481                           indf2	equ	0xFDF
 10482                           postinc2	equ	0xFDE
 10483                           postdec2	equ	0xFDD
 10484                           fsr2h	equ	0xFDA
 10485                           fsr2l	equ	0xFD9
 10486                           status	equ	0xFD8
 10487                           
 10488 ;; *************** function _baroTrueTemp *****************
 10489 ;; Defined at:
 10490 ;;		line 176 in file "barometer.c"
 10491 ;; Parameters:    Size  Location     Type
 10492 ;;  rawTemp         2   15[COMRAM] unsigned short 
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;  X1              4   31[COMRAM] long 
 10495 ;;  X2              4   27[COMRAM] long 
 10496 ;;  temperature     4   23[COMRAM] long 
 10497 ;; Return value:  Size  Location     Type
 10498 ;;                  2   15[COMRAM] unsigned short 
 10499 ;; Registers used:
 10500 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10506 ;;      Params:         2       0       0       0       0       0       0
 10507 ;;      Locals:        12       0       0       0       0       0       0
 10508 ;;      Temps:          6       0       0       0       0       0       0
 10509 ;;      Totals:        20       0       0       0       0       0       0
 10510 ;;Total ram usage:       20 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    1
 10513 ;; This function calls:
 10514 ;;		___aldiv
 10515 ;;		___wmul
 10516 ;; This function is called by:
 10517 ;;		_baroCalibrate
 10518 ;;		_updateSensorARData
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           	psect	text60
 10523  001B0A                     __ptext60:
 10524                           	opt stack 0
 10525  001B0A                     _baroTrueTemp:
 10526                           	opt stack 28
 10527                           
 10528                           ;barometer.c: 177: long temperature;
 10529                           ;barometer.c: 178: long X1 = ((rawTemp - AC6) * AC5) >> 15;
 10530                           
 10531                           ;incstack = 0
 10532                           ;incstack = 0
 10533  001B0A  0100               	movlb	0	; () banked
 10534  001B0C  C0A6  F012         	movff	_AC6,??_baroTrueTemp
 10535  001B10  0100               	movlb	0	; () banked
 10536  001B12  C0A7  F013         	movff	_AC6+1,??_baroTrueTemp+1
 10537  001B16  1E12               	comf	??_baroTrueTemp,f,c
 10538  001B18  1E13               	comf	??_baroTrueTemp+1,f,c
 10539  001B1A  4A12               	infsnz	??_baroTrueTemp,f,c
 10540  001B1C  2A13               	incf	??_baroTrueTemp+1,f,c
 10541  001B1E  5010               	movf	baroTrueTemp@rawTemp,w,c
 10542  001B20  2412               	addwf	??_baroTrueTemp,w,c
 10543  001B22  6E01               	movwf	?___wmul,c
 10544  001B24  5011               	movf	baroTrueTemp@rawTemp+1,w,c
 10545  001B26  2013               	addwfc	??_baroTrueTemp+1,w,c
 10546  001B28  6E02               	movwf	?___wmul+1,c
 10547  001B2A  C0A4  F003         	movff	_AC5,?___wmul+2
 10548  001B2E  C0A5  F004         	movff	_AC5+1,?___wmul+3
 10549  001B32  EC10  F01C         	call	___wmul	;wreg free
 10550  001B36  0E0F               	movlw	15
 10551  001B38  6E14               	movwf	(??_baroTrueTemp+2)& (0+255),c
 10552  001B3A                     u5645:
 10553  001B3A  90D8               	bcf	status,0,c
 10554  001B3C  3202               	rrcf	?___wmul+1,f,c
 10555  001B3E  3201               	rrcf	?___wmul,f,c
 10556  001B40  2E14               	decfsz	(??_baroTrueTemp+2)& (0+255),f,c
 10557  001B42  D7FB               	goto	u5645
 10558  001B44  C001  F020         	movff	?___wmul,baroTrueTemp@X1
 10559  001B48  C002  F021         	movff	?___wmul+1,baroTrueTemp@X1+1
 10560  001B4C  6A22               	clrf	baroTrueTemp@X1+2,c
 10561  001B4E  6A23               	clrf	baroTrueTemp@X1+3,c
 10562                           
 10563                           ;barometer.c: 179: long X2 = (MC << 11) / (X1 + MD);
 10564  001B50  0100               	movlb	0	; () banked
 10565  001B52  C0AE  F012         	movff	_MC,??_baroTrueTemp
 10566  001B56  0100               	movlb	0	; () banked
 10567  001B58  C0AF  F013         	movff	_MC+1,??_baroTrueTemp+1
 10568  001B5C  0E0B               	movlw	11
 10569  001B5E                     u5655:
 10570  001B5E  90D8               	bcf	status,0,c
 10571  001B60  3612               	rlcf	??_baroTrueTemp,f,c
 10572  001B62  3613               	rlcf	??_baroTrueTemp+1,f,c
 10573  001B64  2EE8               	decfsz	wreg,f,c
 10574  001B66  D7FB               	goto	u5655
 10575  001B68  C012  F001         	movff	??_baroTrueTemp,?___aldiv
 10576  001B6C  C013  F002         	movff	??_baroTrueTemp+1,?___aldiv+1
 10577  001B70  0E00               	movlw	0
 10578  001B72  BE02               	btfsc	?___aldiv+1,7,c
 10579  001B74  0EFF               	movlw	-1
 10580  001B76  6E03               	movwf	?___aldiv+2,c
 10581  001B78  6E04               	movwf	?___aldiv+3,c
 10582  001B7A  0100               	movlb	0	; () banked
 10583  001B7C  C0B0  F014         	movff	_MD,??_baroTrueTemp+2
 10584  001B80  0100               	movlb	0	; () banked
 10585  001B82  C0B1  F015         	movff	_MD+1,??_baroTrueTemp+3
 10586  001B86  0E00               	movlw	0
 10587  001B88  BE15               	btfsc	(??_baroTrueTemp+3)& (0+255),7,c
 10588  001B8A  0EFF               	movlw	255
 10589  001B8C  6E16               	movwf	(??_baroTrueTemp+4)& (0+255),c
 10590  001B8E  6E17               	movwf	(??_baroTrueTemp+5)& (0+255),c
 10591  001B90  5020               	movf	baroTrueTemp@X1,w,c
 10592  001B92  2414               	addwf	??_baroTrueTemp+2,w,c
 10593  001B94  6E05               	movwf	?___aldiv+4,c
 10594  001B96  5021               	movf	baroTrueTemp@X1+1,w,c
 10595  001B98  2015               	addwfc	??_baroTrueTemp+3,w,c
 10596  001B9A  6E06               	movwf	?___aldiv+5,c
 10597  001B9C  5022               	movf	baroTrueTemp@X1+2,w,c
 10598  001B9E  2016               	addwfc	??_baroTrueTemp+4,w,c
 10599  001BA0  6E07               	movwf	?___aldiv+6,c
 10600  001BA2  5023               	movf	baroTrueTemp@X1+3,w,c
 10601  001BA4  2017               	addwfc	??_baroTrueTemp+5,w,c
 10602  001BA6  6E08               	movwf	?___aldiv+7,c
 10603  001BA8  EC55  F013         	call	___aldiv	;wreg free
 10604  001BAC  C004  F01F         	movff	?___aldiv+3,baroTrueTemp@X2+3
 10605  001BB0  C003  F01E         	movff	?___aldiv+2,baroTrueTemp@X2+2
 10606  001BB4  C002  F01D         	movff	?___aldiv+1,baroTrueTemp@X2+1
 10607  001BB8  C001  F01C         	movff	?___aldiv,baroTrueTemp@X2
 10608                           
 10609                           ;barometer.c: 180: B5 = X1 + X2;
 10610  001BBC  501C               	movf	baroTrueTemp@X2,w,c
 10611  001BBE  2420               	addwf	baroTrueTemp@X1,w,c
 10612  001BC0  0100               	movlb	0	; () banked
 10613  001BC2  0100               	movlb	0	; () banked
 10614  001BC4  6F88               	movwf	_B5& (0+255),b
 10615  001BC6  501D               	movf	baroTrueTemp@X2+1,w,c
 10616  001BC8  2021               	addwfc	baroTrueTemp@X1+1,w,c
 10617  001BCA  0100               	movlb	0	; () banked
 10618  001BCC  6F89               	movwf	(_B5+1)& (0+255),b
 10619  001BCE  501E               	movf	baroTrueTemp@X2+2,w,c
 10620  001BD0  2022               	addwfc	baroTrueTemp@X1+2,w,c
 10621  001BD2  0100               	movlb	0	; () banked
 10622  001BD4  6F8A               	movwf	(_B5+2)& (0+255),b
 10623  001BD6  501F               	movf	baroTrueTemp@X2+3,w,c
 10624  001BD8  2023               	addwfc	baroTrueTemp@X1+3,w,c
 10625  001BDA  0100               	movlb	0	; () banked
 10626  001BDC  6F8B               	movwf	(_B5+3)& (0+255),b
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;barometer.c: 181: temperature = (B5 + 8) >> 4;
 10630  001BDE  0E04               	movlw	4
 10631  001BE0  6E12               	movwf	??_baroTrueTemp& (0+255),c
 10632  001BE2  0E08               	movlw	8
 10633  001BE4  0100               	movlb	0	; () banked
 10634  001BE6  0100               	movlb	0	; () banked
 10635  001BE8  2588               	addwf	_B5& (0+255),w,b
 10636  001BEA  6E13               	movwf	(??_baroTrueTemp+1)& (0+255),c
 10637  001BEC  0E00               	movlw	0
 10638  001BEE  0100               	movlb	0	; () banked
 10639  001BF0  0100               	movlb	0	; () banked
 10640  001BF2  2189               	addwfc	(_B5+1)& (0+255),w,b
 10641  001BF4  6E14               	movwf	(??_baroTrueTemp+2)& (0+255),c
 10642  001BF6  0E00               	movlw	0
 10643  001BF8  0100               	movlb	0	; () banked
 10644  001BFA  0100               	movlb	0	; () banked
 10645  001BFC  218A               	addwfc	(_B5+2)& (0+255),w,b
 10646  001BFE  6E15               	movwf	(??_baroTrueTemp+3)& (0+255),c
 10647  001C00  0E00               	movlw	0
 10648  001C02  0100               	movlb	0	; () banked
 10649  001C04  0100               	movlb	0	; () banked
 10650  001C06  218B               	addwfc	(_B5+3)& (0+255),w,b
 10651  001C08  6E16               	movwf	(??_baroTrueTemp+4)& (0+255),c
 10652  001C0A                     u5665:
 10653  001C0A  6612               	tstfsz	??_baroTrueTemp,c
 10654  001C0C  D001               	goto	u5666
 10655  001C0E  D007               	goto	u5667
 10656  001C10                     u5666:
 10657  001C10  3416               	rlcf	??_baroTrueTemp+4,w,c
 10658  001C12  3216               	rrcf	??_baroTrueTemp+4,f,c
 10659  001C14  3215               	rrcf	??_baroTrueTemp+3,f,c
 10660  001C16  3214               	rrcf	??_baroTrueTemp+2,f,c
 10661  001C18  3213               	rrcf	??_baroTrueTemp+1,f,c
 10662  001C1A  2E12               	decfsz	??_baroTrueTemp,f,c
 10663  001C1C  D7F6               	goto	u5665
 10664  001C1E                     u5667:
 10665  001C1E  C016  F01B         	movff	??_baroTrueTemp+4,baroTrueTemp@temperature+3
 10666  001C22  C015  F01A         	movff	??_baroTrueTemp+3,baroTrueTemp@temperature+2
 10667  001C26  C014  F019         	movff	??_baroTrueTemp+2,baroTrueTemp@temperature+1
 10668  001C2A  C013  F018         	movff	??_baroTrueTemp+1,baroTrueTemp@temperature
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;barometer.c: 182: return (unsigned short)(temperature);
 10672  001C2E  C018  F010         	movff	baroTrueTemp@temperature,?_baroTrueTemp
 10673  001C32  C019  F011         	movff	baroTrueTemp@temperature+1,?_baroTrueTemp+1
 10674                           
 10675                           ; BSR set to: 0
 10676                           
 10677                           ; BSR set to: 0
 10678  001C36  0012               	return	
 10679  001C38                     __end_of_baroTrueTemp:
 10680                           	opt stack 0
 10681                           tblptru	equ	0xFF8
 10682                           tblptrh	equ	0xFF7
 10683                           tblptrl	equ	0xFF6
 10684                           tablat	equ	0xFF5
 10685                           intcon	equ	0xFF2
 10686                           intcon2	equ	0xFF1
 10687                           postinc0	equ	0xFEE
 10688                           wreg	equ	0xFE8
 10689                           postinc1	equ	0xFE6
 10690                           postdec1	equ	0xFE5
 10691                           fsr1l	equ	0xFE1
 10692                           indf2	equ	0xFDF
 10693                           postinc2	equ	0xFDE
 10694                           postdec2	equ	0xFDD
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function _baroPresStart *****************
 10700 ;; Defined at:
 10701 ;;		line 115 in file "barometer.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;		None               void
 10708 ;; Registers used:
 10709 ;;		wreg, status,2, status,0, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10715 ;;      Params:         0       0       0       0       0       0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0
 10717 ;;      Temps:          1       0       0       0       0       0       0
 10718 ;;      Totals:         1       0       0       0       0       0       0
 10719 ;;Total ram usage:        1 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    2
 10722 ;; This function calls:
 10723 ;;		_IdleI2C
 10724 ;;		_WriteI2C
 10725 ;;		_Delay10TCYx
 10726 ;; This function is called by:
 10727 ;;		_baroCalibrate
 10728 ;;		_updateSensorARData
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text61
 10733  0034B2                     __ptext61:
 10734                           	opt stack 0
 10735  0034B2                     _baroPresStart:
 10736                           	opt stack 27
 10737                           
 10738                           ;barometer.c: 116: IdleI2C();
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;incstack = 0
 10742                           ;incstack = 0
 10743  0034B2  ECA7  F01D         	call	_IdleI2C	;wreg free
 10744                           
 10745                           ;barometer.c: 117: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 10746  0034B6  80C5               	bsf	4037,0,c	;volatile
 10747  0034B8                     l802:
 10748  0034B8  B0C5               	btfsc	4037,0,c	;volatile
 10749  0034BA  D7FE               	goto	l802
 10750  0034BC                     l805:
 10751  0034BC  B0C5               	btfsc	4037,0,c	;volatile
 10752  0034BE  D7FE               	goto	l805
 10753                           
 10754                           ;barometer.c: 120: WriteI2C(0xEE);
 10755  0034C0  6E02               	movwf	??_baroPresStart& (0+255),c
 10756  0034C2  0EEE               	movlw	238
 10757  0034C4  6E01               	movwf	?_WriteI2C,c
 10758  0034C6  5002               	movf	??_baroPresStart& (0+255),w,c
 10759  0034C8  ECAF  F01A         	call	_WriteI2C	;wreg free
 10760                           
 10761                           ;barometer.c: 121: IdleI2C();
 10762  0034CC  ECA7  F01D         	call	_IdleI2C	;wreg free
 10763                           
 10764                           ;barometer.c: 122: WriteI2C(0xF4);
 10765  0034D0  6E02               	movwf	??_baroPresStart& (0+255),c
 10766  0034D2  0EF4               	movlw	244
 10767  0034D4  6E01               	movwf	?_WriteI2C,c
 10768  0034D6  5002               	movf	??_baroPresStart& (0+255),w,c
 10769  0034D8  ECAF  F01A         	call	_WriteI2C	;wreg free
 10770                           
 10771                           ;barometer.c: 123: IdleI2C();
 10772  0034DC  ECA7  F01D         	call	_IdleI2C	;wreg free
 10773                           
 10774                           ;barometer.c: 124: WriteI2C(0xB4);
 10775  0034E0  6E02               	movwf	??_baroPresStart& (0+255),c
 10776  0034E2  0EB4               	movlw	180
 10777  0034E4  6E01               	movwf	?_WriteI2C,c
 10778  0034E6  5002               	movf	??_baroPresStart& (0+255),w,c
 10779  0034E8  ECAF  F01A         	call	_WriteI2C	;wreg free
 10780                           
 10781                           ;barometer.c: 125: IdleI2C();
 10782  0034EC  ECA7  F01D         	call	_IdleI2C	;wreg free
 10783                           
 10784                           ;barometer.c: 127: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 10785  0034F0  84C5               	bsf	4037,2,c	;volatile
 10786  0034F2                     l808:
 10787  0034F2  B4C5               	btfsc	4037,2,c	;volatile
 10788  0034F4  D7FE               	goto	l808
 10789  0034F6                     l811:
 10790  0034F6  B4C5               	btfsc	4037,2,c	;volatile
 10791  0034F8  D7FE               	goto	l811
 10792                           
 10793                           ;barometer.c: 130: Delay10TCYx(1);
 10794  0034FA  6E02               	movwf	??_baroPresStart& (0+255),c
 10795  0034FC  0E01               	movlw	1
 10796  0034FE  6E01               	movwf	?_Delay10TCYx,c
 10797  003500  5002               	movf	??_baroPresStart& (0+255),w,c
 10798  003502  EC93  F01D         	call	_Delay10TCYx	;wreg free
 10799  003506  0012               	return	
 10800  003508                     __end_of_baroPresStart:
 10801                           	opt stack 0
 10802                           tblptru	equ	0xFF8
 10803                           tblptrh	equ	0xFF7
 10804                           tblptrl	equ	0xFF6
 10805                           tablat	equ	0xFF5
 10806                           intcon	equ	0xFF2
 10807                           intcon2	equ	0xFF1
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           postinc1	equ	0xFE6
 10811                           postdec1	equ	0xFE5
 10812                           fsr1l	equ	0xFE1
 10813                           indf2	equ	0xFDF
 10814                           postinc2	equ	0xFDE
 10815                           postdec2	equ	0xFDD
 10816                           fsr2h	equ	0xFDA
 10817                           fsr2l	equ	0xFD9
 10818                           status	equ	0xFD8
 10819                           
 10820 ;; *************** function _baroTempStart *****************
 10821 ;; Defined at:
 10822 ;;		line 90 in file "barometer.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;		None
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;		None               void
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10836 ;;      Params:         0       0       0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0
 10838 ;;      Temps:          1       0       0       0       0       0       0
 10839 ;;      Totals:         1       0       0       0       0       0       0
 10840 ;;Total ram usage:        1 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    2
 10843 ;; This function calls:
 10844 ;;		_IdleI2C
 10845 ;;		_WriteI2C
 10846 ;;		_Delay10TCYx
 10847 ;; This function is called by:
 10848 ;;		_baroCalibrate
 10849 ;;		_updateSensorARData
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           	psect	text62
 10854  003508                     __ptext62:
 10855                           	opt stack 0
 10856  003508                     _baroTempStart:
 10857                           	opt stack 27
 10858                           
 10859                           ;barometer.c: 91: IdleI2C();
 10860                           
 10861                           ;incstack = 0
 10862                           ;incstack = 0
 10863  003508  ECA7  F01D         	call	_IdleI2C	;wreg free
 10864                           
 10865                           ;barometer.c: 92: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 10866  00350C  80C5               	bsf	4037,0,c	;volatile
 10867  00350E                     l787:
 10868  00350E  B0C5               	btfsc	4037,0,c	;volatile
 10869  003510  D7FE               	goto	l787
 10870  003512                     l790:
 10871  003512  B0C5               	btfsc	4037,0,c	;volatile
 10872  003514  D7FE               	goto	l790
 10873                           
 10874                           ;barometer.c: 95: WriteI2C(0xEE);
 10875  003516  6E02               	movwf	??_baroTempStart& (0+255),c
 10876  003518  0EEE               	movlw	238
 10877  00351A  6E01               	movwf	?_WriteI2C,c
 10878  00351C  5002               	movf	??_baroTempStart& (0+255),w,c
 10879  00351E  ECAF  F01A         	call	_WriteI2C	;wreg free
 10880                           
 10881                           ;barometer.c: 96: IdleI2C();
 10882  003522  ECA7  F01D         	call	_IdleI2C	;wreg free
 10883                           
 10884                           ;barometer.c: 97: WriteI2C(0xF4);
 10885  003526  6E02               	movwf	??_baroTempStart& (0+255),c
 10886  003528  0EF4               	movlw	244
 10887  00352A  6E01               	movwf	?_WriteI2C,c
 10888  00352C  5002               	movf	??_baroTempStart& (0+255),w,c
 10889  00352E  ECAF  F01A         	call	_WriteI2C	;wreg free
 10890                           
 10891                           ;barometer.c: 98: IdleI2C();
 10892  003532  ECA7  F01D         	call	_IdleI2C	;wreg free
 10893                           
 10894                           ;barometer.c: 99: WriteI2C(0x2E);
 10895  003536  6E02               	movwf	??_baroTempStart& (0+255),c
 10896  003538  0E2E               	movlw	46
 10897  00353A  6E01               	movwf	?_WriteI2C,c
 10898  00353C  5002               	movf	??_baroTempStart& (0+255),w,c
 10899  00353E  ECAF  F01A         	call	_WriteI2C	;wreg free
 10900                           
 10901                           ;barometer.c: 100: IdleI2C();
 10902  003542  ECA7  F01D         	call	_IdleI2C	;wreg free
 10903                           
 10904                           ;barometer.c: 102: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 10905  003546  84C5               	bsf	4037,2,c	;volatile
 10906  003548                     l793:
 10907  003548  B4C5               	btfsc	4037,2,c	;volatile
 10908  00354A  D7FE               	goto	l793
 10909  00354C                     l796:
 10910  00354C  B4C5               	btfsc	4037,2,c	;volatile
 10911  00354E  D7FE               	goto	l796
 10912                           
 10913                           ;barometer.c: 104: Delay10TCYx(1);
 10914  003550  6E02               	movwf	??_baroTempStart& (0+255),c
 10915  003552  0E01               	movlw	1
 10916  003554  6E01               	movwf	?_Delay10TCYx,c
 10917  003556  5002               	movf	??_baroTempStart& (0+255),w,c
 10918  003558  EC93  F01D         	call	_Delay10TCYx	;wreg free
 10919  00355C  0012               	return	
 10920  00355E                     __end_of_baroTempStart:
 10921                           	opt stack 0
 10922                           tblptru	equ	0xFF8
 10923                           tblptrh	equ	0xFF7
 10924                           tblptrl	equ	0xFF6
 10925                           tablat	equ	0xFF5
 10926                           intcon	equ	0xFF2
 10927                           intcon2	equ	0xFF1
 10928                           postinc0	equ	0xFEE
 10929                           wreg	equ	0xFE8
 10930                           postinc1	equ	0xFE6
 10931                           postdec1	equ	0xFE5
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function _Delay10TCYx *****************
 10941 ;; Defined at:
 10942 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\d10tcyx.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;  unit            1    0[COMRAM] unsigned char 
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;		None               void
 10949 ;; Registers used:
 10950 ;;		wreg
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10956 ;;      Params:         1       0       0       0       0       0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0
 10959 ;;      Totals:         1       0       0       0       0       0       0
 10960 ;;Total ram usage:        1 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; This function calls:
 10963 ;;		Nothing
 10964 ;; This function is called by:
 10965 ;;		_baroTempStart
 10966 ;;		_baroPresStart
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           	psect	text63
 10971  003B26                     __ptext63:
 10972                           	opt stack 0
 10973  003B26                     _Delay10TCYx:
 10974                           	opt stack 28
 10975  003B26                     l1711:
 10976  003B26  0E03               	movlw	3
 10977  003B28                     u7117:
 10978  003B28  2EE8               	decfsz	wreg,f,c
 10979  003B2A  D7FE               	goto	u7117
 10980  003B2C  F000               	nop	
 10981  003B2E  2E01               	decfsz	Delay10TCYx@unit,f,c
 10982  003B30  D7FA               	goto	l1711
 10983  003B32  0012               	return	
 10984  003B34                     __end_of_Delay10TCYx:
 10985                           	opt stack 0
 10986                           tblptru	equ	0xFF8
 10987                           tblptrh	equ	0xFF7
 10988                           tblptrl	equ	0xFF6
 10989                           tablat	equ	0xFF5
 10990                           intcon	equ	0xFF2
 10991                           intcon2	equ	0xFF1
 10992                           postinc0	equ	0xFEE
 10993                           wreg	equ	0xFE8
 10994                           postinc1	equ	0xFE6
 10995                           postdec1	equ	0xFE5
 10996                           fsr1l	equ	0xFE1
 10997                           indf2	equ	0xFDF
 10998                           postinc2	equ	0xFDE
 10999                           postdec2	equ	0xFDD
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function _baroGetVal *****************
 11005 ;; Defined at:
 11006 ;;		line 141 in file "barometer.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  reg             1    1[COMRAM] unsigned char 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  data            2    4[COMRAM] unsigned short 
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  2    1[COMRAM] unsigned short 
 11013 ;; Registers used:
 11014 ;;		wreg, status,2, status,0, cstack
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11020 ;;      Params:         2       0       0       0       0       0       0
 11021 ;;      Locals:         3       0       0       0       0       0       0
 11022 ;;      Temps:          1       0       0       0       0       0       0
 11023 ;;      Totals:         6       0       0       0       0       0       0
 11024 ;;Total ram usage:        6 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    2
 11027 ;; This function calls:
 11028 ;;		_IdleI2C
 11029 ;;		_WriteI2C
 11030 ;;		_ReadI2C
 11031 ;; This function is called by:
 11032 ;;		_baroCalibrate
 11033 ;;		_updateSensorARData
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text64
 11038  002DEE                     __ptext64:
 11039                           	opt stack 0
 11040  002DEE                     _baroGetVal:
 11041                           	opt stack 27
 11042                           
 11043                           ;barometer.c: 142: unsigned short data;
 11044                           ;barometer.c: 144: IdleI2C();
 11045                           
 11046                           ;incstack = 0
 11047                           ;incstack = 0
 11048  002DEE  ECA7  F01D         	call	_IdleI2C	;wreg free
 11049                           
 11050                           ;barometer.c: 145: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 11051  002DF2  80C5               	bsf	4037,0,c	;volatile
 11052  002DF4                     l817:
 11053  002DF4  B0C5               	btfsc	4037,0,c	;volatile
 11054  002DF6  D7FE               	goto	l817
 11055  002DF8                     l820:
 11056  002DF8  B0C5               	btfsc	4037,0,c	;volatile
 11057  002DFA  D7FE               	goto	l820
 11058                           
 11059                           ;barometer.c: 148: WriteI2C(0xEE);
 11060  002DFC  6E04               	movwf	??_baroGetVal& (0+255),c
 11061  002DFE  0EEE               	movlw	238
 11062  002E00  6E01               	movwf	?_WriteI2C,c
 11063  002E02  5004               	movf	??_baroGetVal& (0+255),w,c
 11064  002E04  ECAF  F01A         	call	_WriteI2C	;wreg free
 11065                           
 11066                           ;barometer.c: 149: IdleI2C();
 11067  002E08  ECA7  F01D         	call	_IdleI2C	;wreg free
 11068                           
 11069                           ;barometer.c: 150: WriteI2C(reg);
 11070  002E0C  C002  F001         	movff	baroGetVal@reg,?_WriteI2C
 11071  002E10  ECAF  F01A         	call	_WriteI2C	;wreg free
 11072                           
 11073                           ;barometer.c: 151: IdleI2C();
 11074  002E14  ECA7  F01D         	call	_IdleI2C	;wreg free
 11075                           
 11076                           ;barometer.c: 153: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 11077  002E18  82C5               	bsf	4037,1,c	;volatile
 11078  002E1A                     l823:
 11079  002E1A  B2C5               	btfsc	4037,1,c	;volatile
 11080  002E1C  D7FE               	goto	l823
 11081  002E1E                     l826:
 11082  002E1E  B2C5               	btfsc	4037,1,c	;volatile
 11083  002E20  D7FE               	goto	l826
 11084                           
 11085                           ;barometer.c: 156: WriteI2C(0xEE || 0x01);
 11086  002E22  6E04               	movwf	??_baroGetVal& (0+255),c
 11087  002E24  0E01               	movlw	1
 11088  002E26  6E07               	movwf	_baroGetVal$2559,c
 11089  002E28  5004               	movf	??_baroGetVal& (0+255),w,c
 11090  002E2A  C007  F001         	movff	_baroGetVal$2559,?_WriteI2C
 11091  002E2E  ECAF  F01A         	call	_WriteI2C	;wreg free
 11092  002E32                     l831:
 11093  002E32  A0C7               	btfss	4039,0,c	;volatile
 11094  002E34  D7FE               	goto	l831
 11095                           
 11096                           ;barometer.c: 159: data = ReadI2C();
 11097  002E36  EC20  F01D         	call	_ReadI2C	;wreg free
 11098  002E3A  6E04               	movwf	??_baroGetVal& (0+255),c
 11099  002E3C  5004               	movf	??_baroGetVal,w,c
 11100  002E3E  6E05               	movwf	baroGetVal@data,c
 11101  002E40  6A06               	clrf	baroGetVal@data+1,c
 11102                           
 11103                           ;barometer.c: 160: data <<= 8;
 11104  002E42  5005               	movf	baroGetVal@data,w,c
 11105  002E44  6E06               	movwf	baroGetVal@data+1,c
 11106  002E46  6A05               	clrf	baroGetVal@data,c
 11107                           
 11108                           ;barometer.c: 161: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 11109  002E48  9AC5               	bcf	4037,5,c	;volatile
 11110  002E4A  88C5               	bsf	4037,4,c	;volatile
 11111  002E4C                     l834:
 11112  002E4C  B8C5               	btfsc	4037,4,c	;volatile
 11113  002E4E  D7FE               	goto	l834
 11114  002E50                     l837:
 11115  002E50  A0C7               	btfss	4039,0,c	;volatile
 11116  002E52  D7FE               	goto	l837
 11117                           
 11118                           ;barometer.c: 164: data += ReadI2C();
 11119  002E54  EC20  F01D         	call	_ReadI2C	;wreg free
 11120  002E58  6E04               	movwf	??_baroGetVal& (0+255),c
 11121  002E5A  5004               	movf	??_baroGetVal,w,c
 11122  002E5C  2605               	addwf	baroGetVal@data,f,c
 11123  002E5E  0E00               	movlw	0
 11124  002E60  2206               	addwfc	baroGetVal@data+1,f,c
 11125                           
 11126                           ;barometer.c: 165: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 11127  002E62  8AC5               	bsf	4037,5,c	;volatile
 11128  002E64  88C5               	bsf	4037,4,c	;volatile
 11129  002E66                     l840:
 11130  002E66  B8C5               	btfsc	4037,4,c	;volatile
 11131  002E68  D7FE               	goto	l840
 11132                           
 11133                           ;barometer.c: 166: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 11134  002E6A  84C5               	bsf	4037,2,c	;volatile
 11135  002E6C                     l843:
 11136  002E6C  B4C5               	btfsc	4037,2,c	;volatile
 11137  002E6E  D7FE               	goto	l843
 11138                           
 11139                           ;barometer.c: 168: return data;
 11140  002E70  C005  F002         	movff	baroGetVal@data,?_baroGetVal
 11141  002E74  C006  F003         	movff	baroGetVal@data+1,?_baroGetVal+1
 11142  002E78  0012               	return	
 11143  002E7A                     __end_of_baroGetVal:
 11144                           	opt stack 0
 11145                           tblptru	equ	0xFF8
 11146                           tblptrh	equ	0xFF7
 11147                           tblptrl	equ	0xFF6
 11148                           tablat	equ	0xFF5
 11149                           intcon	equ	0xFF2
 11150                           intcon2	equ	0xFF1
 11151                           postinc0	equ	0xFEE
 11152                           wreg	equ	0xFE8
 11153                           postinc1	equ	0xFE6
 11154                           postdec1	equ	0xFE5
 11155                           fsr1l	equ	0xFE1
 11156                           indf2	equ	0xFDF
 11157                           postinc2	equ	0xFDE
 11158                           postdec2	equ	0xFDD
 11159                           fsr2h	equ	0xFDA
 11160                           fsr2l	equ	0xFD9
 11161                           status	equ	0xFD8
 11162                           
 11163 ;; *************** function _ReadI2C *****************
 11164 ;; Defined at:
 11165 ;;		line 12 in file "i2c/i2c_read.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;		None
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;		None
 11170 ;; Return value:  Size  Location     Type
 11171 ;;                  1    wreg      unsigned char 
 11172 ;; Registers used:
 11173 ;;		wreg, status,2, status,0
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11179 ;;      Params:         0       0       0       0       0       0       0
 11180 ;;      Locals:         0       0       0       0       0       0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0
 11182 ;;      Totals:         0       0       0       0       0       0       0
 11183 ;;Total ram usage:        0 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_baroGetVal
 11189 ;;		_battReadWord
 11190 ;;		_getsI2C
 11191 ;;		_readSMB
 11192 ;;		_ReadI2CByte
 11193 ;;		_ReadI2CWord
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           	psect	text65
 11198  003A40                     __ptext65:
 11199                           	opt stack 0
 11200  003A40                     _ReadI2C:
 11201                           	opt stack 28
 11202                           
 11203                           ;i2c_read.c: 13: if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
 11204                           
 11205                           ;incstack = 0
 11206                           ;incstack = 0
 11207  003A40  50C6               	movf	4038,w,c	;volatile
 11208  003A42  0B0F               	andlw	15
 11209  003A44  0A08               	xorlw	8
 11210  003A46  B4D8               	btfsc	status,2,c
 11211  003A48  D004               	goto	l485
 11212  003A4A  50C6               	movf	4038,w,c	;volatile
 11213  003A4C  0B0F               	andlw	15
 11214  003A4E  0A0B               	xorlw	11
 11215  003A50  B4D8               	btfsc	status,2,c
 11216  003A52                     l485:
 11217                           
 11218                           ;i2c_read.c: 14: SSPCON2bits.RCEN = 1;
 11219  003A52  86C5               	bsf	4037,3,c	;volatile
 11220  003A54                     l486:
 11221  003A54  A0C7               	btfss	4039,0,c	;volatile
 11222  003A56  D7FE               	goto	l486
 11223                           
 11224                           ;i2c_read.c: 16: return ( SSPBUF );
 11225  003A58  50C9               	movf	4041,w,c	;volatile
 11226  003A5A  0012               	return	
 11227  003A5C                     __end_of_ReadI2C:
 11228                           	opt stack 0
 11229                           tblptru	equ	0xFF8
 11230                           tblptrh	equ	0xFF7
 11231                           tblptrl	equ	0xFF6
 11232                           tablat	equ	0xFF5
 11233                           intcon	equ	0xFF2
 11234                           intcon2	equ	0xFF1
 11235                           postinc0	equ	0xFEE
 11236                           wreg	equ	0xFE8
 11237                           postinc1	equ	0xFE6
 11238                           postdec1	equ	0xFE5
 11239                           fsr1l	equ	0xFE1
 11240                           indf2	equ	0xFDF
 11241                           postinc2	equ	0xFDE
 11242                           postdec2	equ	0xFDD
 11243                           fsr2h	equ	0xFDA
 11244                           fsr2l	equ	0xFD9
 11245                           status	equ	0xFD8
 11246                           
 11247 ;; *************** function _WriteI2C *****************
 11248 ;; Defined at:
 11249 ;;		line 13 in file "i2c/i2c_writ.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;  data_out        1    0[COMRAM] unsigned char 
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;		None
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      char 
 11256 ;; Registers used:
 11257 ;;		wreg, status,2, status,0, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11263 ;;      Params:         1       0       0       0       0       0       0
 11264 ;;      Locals:         0       0       0       0       0       0       0
 11265 ;;      Temps:          0       0       0       0       0       0       0
 11266 ;;      Totals:         1       0       0       0       0       0       0
 11267 ;;Total ram usage:        1 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    1
 11270 ;; This function calls:
 11271 ;;		_IdleI2C
 11272 ;; This function is called by:
 11273 ;;		_baroTempStart
 11274 ;;		_baroPresStart
 11275 ;;		_baroGetVal
 11276 ;;		_battConfigByte
 11277 ;;		_battReadWord
 11278 ;;		_EEAckPolling
 11279 ;;		_EEByteWrite
 11280 ;;		_EECurrentAddRead
 11281 ;;		_EEPageWrite
 11282 ;;		_EERandomRead
 11283 ;;		_EESequentialRead
 11284 ;;		_putsI2C
 11285 ;;		_battWriteWord
 11286 ;;		_writeRegSMB
 11287 ;;		_readSMB
 11288 ;;		_ReadI2CByte
 11289 ;;		_ReadI2CWord
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text66
 11294  00355E                     __ptext66:
 11295                           	opt stack 0
 11296  00355E                     _WriteI2C:
 11297                           	opt stack 27
 11298                           
 11299                           ;i2c_writ.c: 14: SSPBUF = data_out;
 11300                           
 11301                           ;incstack = 0
 11302                           ;incstack = 0
 11303  00355E  C001  FFC9         	movff	WriteI2C@data_out,4041	;volatile
 11304                           
 11305                           ;i2c_writ.c: 15: if ( SSPCON1bits.WCOL )
 11306  003562  AEC6               	btfss	4038,7,c	;volatile
 11307  003564  D002               	goto	l6748
 11308                           
 11309                           ;i2c_writ.c: 16: return ( -1 );
 11310  003566  0EFF               	movlw	255
 11311  003568  D024               	goto	l522
 11312  00356A                     l6748:
 11313                           
 11314                           ;i2c_writ.c: 17: else
 11315                           ;i2c_writ.c: 18: {
 11316                           ;i2c_writ.c: 19: if( ((SSPCON1&0x0F)!=0x08) && ((SSPCON1&0x0F)!=0x0B) )
 11317  00356A  50C6               	movf	4038,w,c	;volatile
 11318  00356C  0B0F               	andlw	15
 11319  00356E  0A08               	xorlw	8
 11320  003570  B4D8               	btfsc	status,2,c
 11321  003572  D00C               	goto	l6766
 11322  003574  50C6               	movf	4038,w,c	;volatile
 11323  003576  0B0F               	andlw	15
 11324  003578  0A0B               	xorlw	11
 11325  00357A  B4D8               	btfsc	status,2,c
 11326  00357C  D007               	goto	l6766
 11327                           
 11328                           ;i2c_writ.c: 20: {
 11329                           ;i2c_writ.c: 21: SSPCON1bits.CKP = 1;
 11330  00357E  88C6               	bsf	4038,4,c	;volatile
 11331  003580                     l525:
 11332  003580  A69E               	btfss	3998,3,c	;volatile
 11333  003582  D7FE               	goto	l525
 11334                           
 11335                           ;i2c_writ.c: 24: if ( ( !SSPSTATbits.R_W ) && ( !SSPSTATbits.BF ) )
 11336  003584  A4C7               	btfss	4039,2,c	;volatile
 11337  003586  B0C7               	btfsc	4039,0,c	;volatile
 11338  003588  D013               	goto	l6780
 11339  00358A  D010               	goto	u5600
 11340  00358C                     l6766:
 11341                           
 11342                           ;i2c_writ.c: 33: else if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
 11343  00358C  50C6               	movf	4038,w,c	;volatile
 11344  00358E  0B0F               	andlw	15
 11345  003590  0A08               	xorlw	8
 11346  003592  B4D8               	btfsc	status,2,c
 11347  003594  D005               	goto	l534
 11348  003596  50C6               	movf	4038,w,c	;volatile
 11349  003598  0B0F               	andlw	15
 11350  00359A  0A0B               	xorlw	11
 11351  00359C  A4D8               	btfss	status,2,c
 11352  00359E  D009               	goto	l522
 11353  0035A0                     l534:
 11354  0035A0  B0C7               	btfsc	4039,0,c	;volatile
 11355  0035A2  D7FE               	goto	l534
 11356                           
 11357                           ;i2c_writ.c: 36: IdleI2C();
 11358  0035A4  ECA7  F01D         	call	_IdleI2C	;wreg free
 11359                           
 11360                           ;i2c_writ.c: 37: if ( SSPCON2bits.ACKSTAT )
 11361  0035A8  ACC5               	btfss	4037,6,c	;volatile
 11362  0035AA  D002               	goto	l6780
 11363  0035AC                     u5600:
 11364                           
 11365                           ;i2c_writ.c: 38: return ( -2 );
 11366  0035AC  0EFE               	movlw	254
 11367  0035AE  D001               	goto	l522
 11368  0035B0                     l6780:
 11369                           
 11370                           ;i2c_writ.c: 39: else return ( 0 );
 11371  0035B0  0E00               	movlw	0
 11372  0035B2                     l522:
 11373  0035B2  0012               	return	
 11374  0035B4                     __end_of_WriteI2C:
 11375                           	opt stack 0
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           intcon	equ	0xFF2
 11381                           intcon2	equ	0xFF1
 11382                           postinc0	equ	0xFEE
 11383                           wreg	equ	0xFE8
 11384                           postinc1	equ	0xFE6
 11385                           postdec1	equ	0xFE5
 11386                           fsr1l	equ	0xFE1
 11387                           indf2	equ	0xFDF
 11388                           postinc2	equ	0xFDE
 11389                           postdec2	equ	0xFDD
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394 ;; *************** function _IdleI2C *****************
 11395 ;; Defined at:
 11396 ;;		line 25 in file "i2c/i2c_idle.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;		None
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;		None               void
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11410 ;;      Params:         0       0       0       0       0       0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0
 11412 ;;      Temps:          0       0       0       0       0       0       0
 11413 ;;      Totals:         0       0       0       0       0       0       0
 11414 ;;Total ram usage:        0 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; This function calls:
 11417 ;;		Nothing
 11418 ;; This function is called by:
 11419 ;;		_WriteI2C
 11420 ;;		_baroTempStart
 11421 ;;		_baroPresStart
 11422 ;;		_baroGetVal
 11423 ;;		_EEAckPolling
 11424 ;;		_EEByteWrite
 11425 ;;		_EECurrentAddRead
 11426 ;;		_EEPageWrite
 11427 ;;		_EERandomRead
 11428 ;;		_EESequentialRead
 11429 ;;		_writeRegSMB
 11430 ;;		_readSMB
 11431 ;;		_ReadI2CByte
 11432 ;;		_ReadI2CWord
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text67
 11437  003B4E                     __ptext67:
 11438                           	opt stack 0
 11439  003B4E                     _IdleI2C:
 11440                           	opt stack 27
 11441  003B4E                     l6150:
 11442  003B4E  50C5               	movf	4037,w,c	;volatile
 11443  003B50  0B1F               	andlw	31
 11444  003B52  B4D8               	btfsc	status,2,c
 11445  003B54  B4C7               	btfsc	4039,2,c	;volatile
 11446  003B56  D7FB               	goto	l6150
 11447  003B58  0012               	return	
 11448  003B5A                     __end_of_IdleI2C:
 11449                           	opt stack 0
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           intcon	equ	0xFF2
 11455                           intcon2	equ	0xFF1
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postinc1	equ	0xFE6
 11459                           postdec1	equ	0xFE5
 11460                           fsr1l	equ	0xFE1
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           fsr2h	equ	0xFDA
 11465                           fsr2l	equ	0xFD9
 11466                           status	equ	0xFD8
 11467                           
 11468 ;; *************** function _accelCalibrate *****************
 11469 ;; Defined at:
 11470 ;;		line 81 in file "accelmeter.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;		None
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  i               2   18[COMRAM] int 
 11475 ;;  average         2   16[COMRAM] int 
 11476 ;; Return value:  Size  Location     Type
 11477 ;;		None               void
 11478 ;; Registers used:
 11479 ;;		wreg, status,2, status,0, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11485 ;;      Params:         0       0       0       0       0       0       0
 11486 ;;      Locals:         4       0       0       0       0       0       0
 11487 ;;      Temps:          0       0       0       0       0       0       0
 11488 ;;      Totals:         4       0       0       0       0       0       0
 11489 ;;Total ram usage:        4 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    2
 11492 ;; This function calls:
 11493 ;;		_accelGetADC
 11494 ;;		___awdiv
 11495 ;; This function is called by:
 11496 ;;		_main
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text68
 11501  003608                     __ptext68:
 11502                           	opt stack 0
 11503  003608                     _accelCalibrate:
 11504                           	opt stack 28
 11505                           
 11506                           ;accelmeter.c: 82: int i;
 11507                           ;accelmeter.c: 83: int average = 0;
 11508                           
 11509                           ;incstack = 0
 11510                           ;incstack = 0
 11511  003608  0E00               	movlw	0
 11512  00360A  6E12               	movwf	accelCalibrate@average+1,c
 11513  00360C  0E00               	movlw	0
 11514  00360E  6E11               	movwf	accelCalibrate@average,c
 11515                           
 11516                           ;accelmeter.c: 85: for (i = 0; i < 4; ++i){
 11517  003610  0E00               	movlw	0
 11518  003612  6E14               	movwf	accelCalibrate@i+1,c
 11519  003614  0E00               	movlw	0
 11520  003616  6E13               	movwf	accelCalibrate@i,c
 11521  003618  5014               	movf	accelCalibrate@i+1,w,c
 11522  00361A  0A80               	xorlw	128
 11523  00361C  0F80               	addlw	-128
 11524  00361E  0E04               	movlw	4
 11525  003620  B4D8               	btfsc	status,2,c
 11526  003622  5C13               	subwf	accelCalibrate@i,w,c
 11527  003624  B0D8               	btfsc	status,0,c
 11528  003626  D009               	goto	l7140
 11529                           
 11530                           ;accelmeter.c: 86: average += accelGetADC();
 11531  003628  EC3A  F018         	call	_accelGetADC	;wreg free
 11532  00362C  500A               	movf	?_accelGetADC,w,c
 11533  00362E  2611               	addwf	accelCalibrate@average,f,c
 11534  003630  500B               	movf	?_accelGetADC+1,w,c
 11535  003632  2212               	addwfc	accelCalibrate@average+1,f,c
 11536  003634  4A13               	infsnz	accelCalibrate@i,f,c
 11537  003636  2A14               	incf	accelCalibrate@i+1,f,c
 11538  003638  D7EF               	goto	L17
 11539  00363A                     l7140:
 11540                           
 11541                           ;accelmeter.c: 87: }
 11542                           ;accelmeter.c: 89: accelZero = average / 4;
 11543  00363A  C011  F001         	movff	accelCalibrate@average,?___awdiv
 11544  00363E  C012  F002         	movff	accelCalibrate@average+1,?___awdiv+1
 11545  003642  0E00               	movlw	0
 11546  003644  6E04               	movwf	?___awdiv+3,c
 11547  003646  0E04               	movlw	4
 11548  003648  6E03               	movwf	?___awdiv+2,c
 11549  00364A  EC67  F016         	call	___awdiv	;wreg free
 11550  00364E  C001  F0E9         	movff	?___awdiv,_accelZero
 11551  003652  C002  F0EA         	movff	?___awdiv+1,_accelZero+1
 11552  003656  0012               	return	
 11553  003658                     __end_of_accelCalibrate:
 11554                           	opt stack 0
 11555                           tblptru	equ	0xFF8
 11556                           tblptrh	equ	0xFF7
 11557                           tblptrl	equ	0xFF6
 11558                           tablat	equ	0xFF5
 11559                           intcon	equ	0xFF2
 11560                           intcon2	equ	0xFF1
 11561                           postinc0	equ	0xFEE
 11562                           wreg	equ	0xFE8
 11563                           postinc1	equ	0xFE6
 11564                           postdec1	equ	0xFE5
 11565                           fsr1l	equ	0xFE1
 11566                           indf2	equ	0xFDF
 11567                           postinc2	equ	0xFDE
 11568                           postdec2	equ	0xFDD
 11569                           fsr2h	equ	0xFDA
 11570                           fsr2l	equ	0xFD9
 11571                           status	equ	0xFD8
 11572                           
 11573 ;; *************** function _accelSelfTest *****************
 11574 ;; Defined at:
 11575 ;;		line 52 in file "accelmeter.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;		None
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;  i               2   22[COMRAM] int 
 11580 ;;  accelNew        2   20[COMRAM] int 
 11581 ;;  accelBase       2   18[COMRAM] int 
 11582 ;; Return value:  Size  Location     Type
 11583 ;;		None               void
 11584 ;; Registers used:
 11585 ;;		wreg, status,2, status,0, cstack
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11591 ;;      Params:         0       0       0       0       0       0       0
 11592 ;;      Locals:         6       0       0       0       0       0       0
 11593 ;;      Temps:          1       0       0       0       0       0       0
 11594 ;;      Totals:         7       0       0       0       0       0       0
 11595 ;;Total ram usage:        7 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    3
 11598 ;; This function calls:
 11599 ;;		_accelGetADC
 11600 ;;		_Delay10KTCYx
 11601 ;;		_transmitError
 11602 ;;		_morseCode
 11603 ;; This function is called by:
 11604 ;;		_main
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           	psect	text69
 11609  002C3C                     __ptext69:
 11610                           	opt stack 0
 11611  002C3C                     _accelSelfTest:
 11612                           	opt stack 27
 11613                           
 11614                           ;accelmeter.c: 53: int accelBase = accelGetADC() + 46 - 20;
 11615                           
 11616                           ;incstack = 0
 11617                           ;incstack = 0
 11618  002C3C  EC3A  F018         	call	_accelGetADC	;wreg free
 11619  002C40  0E1A               	movlw	26
 11620  002C42  240A               	addwf	?_accelGetADC,w,c
 11621  002C44  6E13               	movwf	accelSelfTest@accelBase,c
 11622  002C46  0E00               	movlw	0
 11623  002C48  200B               	addwfc	?_accelGetADC+1,w,c
 11624  002C4A  6E14               	movwf	accelSelfTest@accelBase+1,c
 11625                           
 11626                           ;accelmeter.c: 54: int i;
 11627                           ;accelmeter.c: 55: int accelNew;
 11628                           ;accelmeter.c: 57: PORTBbits.RB7 = 1;
 11629  002C4C  8E81               	bsf	3969,7,c	;volatile
 11630                           
 11631                           ;accelmeter.c: 59: for (i = 0 ; i < 4 ; ++i){
 11632  002C4E  0E00               	movlw	0
 11633  002C50  6E18               	movwf	accelSelfTest@i+1,c
 11634  002C52  0E00               	movlw	0
 11635  002C54  6E17               	movwf	accelSelfTest@i,c
 11636  002C56  5018               	movf	accelSelfTest@i+1,w,c
 11637  002C58  0A80               	xorlw	128
 11638  002C5A  0F80               	addlw	-128
 11639  002C5C  0E04               	movlw	4
 11640  002C5E  B4D8               	btfsc	status,2,c
 11641  002C60  5C17               	subwf	accelSelfTest@i,w,c
 11642  002C62  B0D8               	btfsc	status,0,c
 11643  002C64  D009               	goto	l7554
 11644                           
 11645                           ;accelmeter.c: 60: Delay10KTCYx(0);
 11646  002C66  6E12               	movwf	??_accelSelfTest& (0+255),c
 11647  002C68  0E00               	movlw	0
 11648  002C6A  6E01               	movwf	?_Delay10KTCYx,c
 11649  002C6C  5012               	movf	??_accelSelfTest& (0+255),w,c
 11650  002C6E  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 11651  002C72  4A17               	infsnz	accelSelfTest@i,f,c
 11652  002C74  2A18               	incf	accelSelfTest@i+1,f,c
 11653  002C76  D7EF               	goto	L18
 11654  002C78                     l7554:
 11655                           
 11656                           ;accelmeter.c: 61: }
 11657                           ;accelmeter.c: 63: accelNew = accelGetADC();
 11658  002C78  EC3A  F018         	call	_accelGetADC	;wreg free
 11659  002C7C  C00A  F015         	movff	?_accelGetADC,accelSelfTest@accelNew
 11660  002C80  C00B  F016         	movff	?_accelGetADC+1,accelSelfTest@accelNew+1
 11661                           
 11662                           ;accelmeter.c: 65: PORTBbits.RB7 = 0;
 11663  002C84  9E81               	bcf	3969,7,c	;volatile
 11664                           
 11665                           ;accelmeter.c: 67: if (accelNew < accelBase){
 11666  002C86  5016               	movf	accelSelfTest@accelNew+1,w,c
 11667  002C88  0A80               	xorlw	128
 11668  002C8A  6E12               	movwf	??_accelSelfTest& (0+255),c
 11669  002C8C  5013               	movf	accelSelfTest@accelBase,w,c
 11670  002C8E  5C15               	subwf	accelSelfTest@accelNew,w,c
 11671  002C90  5014               	movf	accelSelfTest@accelBase+1,w,c
 11672  002C92  0A80               	xorlw	128
 11673  002C94  5812               	subwfb	??_accelSelfTest& (0+255),w,c
 11674  002C96  B0D8               	btfsc	status,0,c
 11675  002C98  D013               	goto	l7566
 11676                           
 11677                           ;accelmeter.c: 68: accelFail = 1;
 11678  002C9A  6E12               	movwf	??_accelSelfTest& (0+255),c
 11679  002C9C  0E01               	movlw	1
 11680  002C9E  0100               	movlb	0	; () banked
 11681  002CA0  0100               	movlb	0	; () banked
 11682  002CA2  6FB6               	movwf	_accelFail& (0+255),b
 11683  002CA4  5012               	movf	??_accelSelfTest& (0+255),w,c
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;accelmeter.c: 69: transmitError('A');
 11687  002CA6  6E12               	movwf	??_accelSelfTest& (0+255),c
 11688  002CA8  0E41               	movlw	65
 11689  002CAA  6E10               	movwf	?_transmitError,c
 11690  002CAC  5012               	movf	??_accelSelfTest& (0+255),w,c
 11691  002CAE  EC7E  F01C         	call	_transmitError	;wreg free
 11692                           
 11693                           ;accelmeter.c: 70: morseCode('A');
 11694  002CB2  6E12               	movwf	??_accelSelfTest& (0+255),c
 11695  002CB4  0E41               	movlw	65
 11696  002CB6  6E04               	movwf	?_morseCode,c
 11697  002CB8  5012               	movf	??_accelSelfTest& (0+255),w,c
 11698  002CBA  ECFB  F011         	call	_morseCode	;wreg free
 11699                           
 11700                           ;accelmeter.c: 71: }
 11701  002CBE  D006               	goto	l697
 11702  002CC0                     l7566:
 11703                           
 11704                           ;accelmeter.c: 72: else{
 11705                           ;accelmeter.c: 73: accelFail = 0;
 11706  002CC0  6E12               	movwf	??_accelSelfTest& (0+255),c
 11707  002CC2  0E00               	movlw	0
 11708  002CC4  0100               	movlb	0	; () banked
 11709  002CC6  0100               	movlb	0	; () banked
 11710  002CC8  6FB6               	movwf	_accelFail& (0+255),b
 11711  002CCA  5012               	movf	??_accelSelfTest& (0+255),w,c
 11712  002CCC                     l697:
 11713  002CCC  0012               	return	
 11714  002CCE                     __end_of_accelSelfTest:
 11715                           	opt stack 0
 11716                           tblptru	equ	0xFF8
 11717                           tblptrh	equ	0xFF7
 11718                           tblptrl	equ	0xFF6
 11719                           tablat	equ	0xFF5
 11720                           intcon	equ	0xFF2
 11721                           intcon2	equ	0xFF1
 11722                           postinc0	equ	0xFEE
 11723                           wreg	equ	0xFE8
 11724                           postinc1	equ	0xFE6
 11725                           postdec1	equ	0xFE5
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           fsr2h	equ	0xFDA
 11731                           fsr2l	equ	0xFD9
 11732                           status	equ	0xFD8
 11733                           
 11734 ;; *************** function _morseCode *****************
 11735 ;; Defined at:
 11736 ;;		line 29 in file "errors.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;  error           1    3[COMRAM] unsigned char 
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;		None
 11741 ;; Return value:  Size  Location     Type
 11742 ;;		None               void
 11743 ;; Registers used:
 11744 ;;		wreg, status,2, status,0, cstack
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11750 ;;      Params:         1       0       0       0       0       0       0
 11751 ;;      Locals:         0       0       0       0       0       0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0
 11753 ;;      Totals:         1       0       0       0       0       0       0
 11754 ;;Total ram usage:        1 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    2
 11757 ;; This function calls:
 11758 ;;		_morseLong
 11759 ;;		_morseShort
 11760 ;;		_morseStop
 11761 ;; This function is called by:
 11762 ;;		_accelSelfTest
 11763 ;;		_battSafeCheck
 11764 ;;		_gyroSelfTest
 11765 ;;		_main
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text70
 11770  0023F6                     __ptext70:
 11771                           	opt stack 0
 11772  0023F6                     _morseCode:
 11773                           	opt stack 27
 11774                           
 11775                           ;errors.c: 30: switch(error){
 11776                           
 11777                           ;incstack = 0
 11778                           ;incstack = 0
 11779  0023F6  D058               	goto	l7408
 11780  0023F8                     l7388:
 11781                           
 11782                           ;errors.c: 32: morseLong();
 11783  0023F8  ECB3  F01B         	call	_morseLong	;wreg free
 11784                           
 11785                           ;errors.c: 33: morseShort();
 11786  0023FC  ECAA  F01C         	call	_morseShort	;wreg free
 11787                           
 11788                           ;errors.c: 34: morseLong();
 11789  002400  ECB3  F01B         	call	_morseLong	;wreg free
 11790                           
 11791                           ;errors.c: 35: morseShort();
 11792  002404  ECAA  F01C         	call	_morseShort	;wreg free
 11793                           
 11794                           ;errors.c: 36: morseStop();
 11795  002408  EC76  F019         	call	_morseStop	;wreg free
 11796                           
 11797                           ;errors.c: 37: break;
 11798  00240C  D06C               	goto	l980
 11799  00240E                     l7390:
 11800                           
 11801                           ;errors.c: 39: morseShort();
 11802  00240E  ECAA  F01C         	call	_morseShort	;wreg free
 11803                           
 11804                           ;errors.c: 40: morseShort();
 11805  002412  ECAA  F01C         	call	_morseShort	;wreg free
 11806                           
 11807                           ;errors.c: 41: morseLong();
 11808  002416  ECB3  F01B         	call	_morseLong	;wreg free
 11809                           
 11810                           ;errors.c: 42: morseShort();
 11811  00241A  ECAA  F01C         	call	_morseShort	;wreg free
 11812                           
 11813                           ;errors.c: 43: morseStop();
 11814  00241E  EC76  F019         	call	_morseStop	;wreg free
 11815                           
 11816                           ;errors.c: 44: break;
 11817  002422  D061               	goto	l980
 11818  002424                     l7392:
 11819                           
 11820                           ;errors.c: 46: morseShort();
 11821  002424  ECAA  F01C         	call	_morseShort	;wreg free
 11822                           
 11823                           ;errors.c: 47: morseStop();
 11824  002428  EC76  F019         	call	_morseStop	;wreg free
 11825                           
 11826                           ;errors.c: 48: break;
 11827  00242C  D05C               	goto	l980
 11828  00242E                     l7394:
 11829                           
 11830                           ;errors.c: 50: morseLong();
 11831  00242E  ECB3  F01B         	call	_morseLong	;wreg free
 11832                           
 11833                           ;errors.c: 51: morseStop();
 11834  002432  EC76  F019         	call	_morseStop	;wreg free
 11835                           
 11836                           ;errors.c: 52: break;
 11837  002436  D057               	goto	l980
 11838  002438                     l7396:
 11839                           
 11840                           ;errors.c: 54: morseShort();
 11841  002438  ECAA  F01C         	call	_morseShort	;wreg free
 11842                           
 11843                           ;errors.c: 55: morseLong();
 11844  00243C  ECB3  F01B         	call	_morseLong	;wreg free
 11845                           
 11846                           ;errors.c: 56: morseShort();
 11847  002440  ECAA  F01C         	call	_morseShort	;wreg free
 11848                           
 11849                           ;errors.c: 57: morseShort();
 11850  002444  ECAA  F01C         	call	_morseShort	;wreg free
 11851                           
 11852                           ;errors.c: 58: morseStop();
 11853  002448  EC76  F019         	call	_morseStop	;wreg free
 11854                           
 11855                           ;errors.c: 59: break;
 11856  00244C  D04C               	goto	l980
 11857  00244E                     l7398:
 11858                           
 11859                           ;errors.c: 61: morseLong();
 11860  00244E  ECB3  F01B         	call	_morseLong	;wreg free
 11861                           
 11862                           ;errors.c: 62: morseLong();
 11863  002452  ECB3  F01B         	call	_morseLong	;wreg free
 11864                           
 11865                           ;errors.c: 63: morseShort();
 11866  002456  ECAA  F01C         	call	_morseShort	;wreg free
 11867                           
 11868                           ;errors.c: 64: morseShort();
 11869  00245A  ECAA  F01C         	call	_morseShort	;wreg free
 11870                           
 11871                           ;errors.c: 65: morseStop();
 11872  00245E  EC76  F019         	call	_morseStop	;wreg free
 11873                           
 11874                           ;errors.c: 66: break;
 11875  002462  D041               	goto	l980
 11876  002464                     l7400:
 11877                           
 11878                           ;errors.c: 68: morseLong();
 11879  002464  ECB3  F01B         	call	_morseLong	;wreg free
 11880                           
 11881                           ;errors.c: 69: morseLong();
 11882  002468  ECB3  F01B         	call	_morseLong	;wreg free
 11883                           
 11884                           ;errors.c: 70: morseShort();
 11885  00246C  ECAA  F01C         	call	_morseShort	;wreg free
 11886                           
 11887                           ;errors.c: 71: morseStop();
 11888  002470  EC76  F019         	call	_morseStop	;wreg free
 11889                           
 11890                           ;errors.c: 72: break;
 11891  002474  D038               	goto	l980
 11892  002476                     l7402:
 11893                           
 11894                           ;errors.c: 74: morseShort();
 11895  002476  ECAA  F01C         	call	_morseShort	;wreg free
 11896                           
 11897                           ;errors.c: 75: morseLong();
 11898  00247A  ECB3  F01B         	call	_morseLong	;wreg free
 11899                           
 11900                           ;errors.c: 76: morseStop();
 11901  00247E  EC76  F019         	call	_morseStop	;wreg free
 11902                           
 11903                           ;errors.c: 77: break;
 11904  002482  D031               	goto	l980
 11905  002484                     l7404:
 11906                           
 11907                           ;errors.c: 79: morseShort();
 11908  002484  ECAA  F01C         	call	_morseShort	;wreg free
 11909                           
 11910                           ;errors.c: 80: morseShort();
 11911  002488  ECAA  F01C         	call	_morseShort	;wreg free
 11912                           
 11913                           ;errors.c: 81: morseLong();
 11914  00248C  ECB3  F01B         	call	_morseLong	;wreg free
 11915                           
 11916                           ;errors.c: 82: morseStop();
 11917  002490  EC76  F019         	call	_morseStop	;wreg free
 11918                           
 11919                           ;errors.c: 83: break;
 11920  002494  D028               	goto	l980
 11921  002496                     l7406:
 11922                           
 11923                           ;errors.c: 85: morseShort();
 11924  002496  ECAA  F01C         	call	_morseShort	;wreg free
 11925                           
 11926                           ;errors.c: 86: morseLong();
 11927  00249A  ECB3  F01B         	call	_morseLong	;wreg free
 11928                           
 11929                           ;errors.c: 87: morseLong();
 11930  00249E  ECB3  F01B         	call	_morseLong	;wreg free
 11931                           
 11932                           ;errors.c: 88: morseStop();
 11933  0024A2  EC76  F019         	call	_morseStop	;wreg free
 11934                           
 11935                           ;errors.c: 89: }
 11936  0024A6  D01F               	goto	l980
 11937  0024A8                     l7408:
 11938  0024A8  5004               	movf	morseCode@error,w,c
 11939                           
 11940                           ; Switch size 1, requested type "space"
 11941                           ; Number of cases is 10, Range of values is 65 to 90
 11942                           ; switch strategies available:
 11943                           ; Name         Instructions Cycles
 11944                           ; simple_byte           31    16 (average)
 11945                           ;	Chosen strategy is simple_byte
 11946  0024AA  0A41               	xorlw	65	; case 65
 11947  0024AC  B4D8               	btfsc	status,2,c
 11948  0024AE  D7E3               	goto	l7402
 11949  0024B0  0A02               	xorlw	2	; case 67
 11950  0024B2  B4D8               	btfsc	status,2,c
 11951  0024B4  D7A1               	goto	l7388
 11952  0024B6  0A06               	xorlw	6	; case 69
 11953  0024B8  B4D8               	btfsc	status,2,c
 11954  0024BA  D7B4               	goto	l7392
 11955  0024BC  0A03               	xorlw	3	; case 70
 11956  0024BE  B4D8               	btfsc	status,2,c
 11957  0024C0  D7A6               	goto	l7390
 11958  0024C2  0A01               	xorlw	1	; case 71
 11959  0024C4  B4D8               	btfsc	status,2,c
 11960  0024C6  D7CE               	goto	l7400
 11961  0024C8  0A0B               	xorlw	11	; case 76
 11962  0024CA  B4D8               	btfsc	status,2,c
 11963  0024CC  D7B5               	goto	l7396
 11964  0024CE  0A18               	xorlw	24	; case 84
 11965  0024D0  B4D8               	btfsc	status,2,c
 11966  0024D2  D7AD               	goto	l7394
 11967  0024D4  0A01               	xorlw	1	; case 85
 11968  0024D6  B4D8               	btfsc	status,2,c
 11969  0024D8  D7D5               	goto	l7404
 11970  0024DA  0A02               	xorlw	2	; case 87
 11971  0024DC  B4D8               	btfsc	status,2,c
 11972  0024DE  D7DB               	goto	l7406
 11973  0024E0  0A0D               	xorlw	13	; case 90
 11974  0024E2  B4D8               	btfsc	status,2,c
 11975  0024E4  D7B4               	goto	l7398
 11976  0024E6                     l980:
 11977  0024E6  0012               	return	
 11978  0024E8                     __end_of_morseCode:
 11979                           	opt stack 0
 11980                           tblptru	equ	0xFF8
 11981                           tblptrh	equ	0xFF7
 11982                           tblptrl	equ	0xFF6
 11983                           tablat	equ	0xFF5
 11984                           intcon	equ	0xFF2
 11985                           intcon2	equ	0xFF1
 11986                           postinc0	equ	0xFEE
 11987                           wreg	equ	0xFE8
 11988                           postinc1	equ	0xFE6
 11989                           postdec1	equ	0xFE5
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function _morseStop *****************
 11999 ;; Defined at:
 12000 ;;		line 121 in file "errors.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, status,2, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12014 ;;      Params:         0       0       0       0       0       0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0
 12016 ;;      Temps:          1       0       0       0       0       0       0
 12017 ;;      Totals:         1       0       0       0       0       0       0
 12018 ;;Total ram usage:        1 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    1
 12021 ;; This function calls:
 12022 ;;		_Delay10KTCYx
 12023 ;; This function is called by:
 12024 ;;		_morseCode
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           	psect	text71
 12029  0032EC                     __ptext71:
 12030                           	opt stack 0
 12031  0032EC                     _morseStop:
 12032                           	opt stack 27
 12033                           
 12034                           ;errors.c: 122: Delay10KTCYx(0);
 12035                           
 12036                           ;incstack = 0
 12037                           ;incstack = 0
 12038  0032EC  6E03               	movwf	??_morseStop& (0+255),c
 12039  0032EE  0E00               	movlw	0
 12040  0032F0  6E01               	movwf	?_Delay10KTCYx,c
 12041  0032F2  5003               	movf	??_morseStop& (0+255),w,c
 12042  0032F4  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12043                           
 12044                           ;errors.c: 123: Delay10KTCYx(0);
 12045  0032F8  6E03               	movwf	??_morseStop& (0+255),c
 12046  0032FA  0E00               	movlw	0
 12047  0032FC  6E01               	movwf	?_Delay10KTCYx,c
 12048  0032FE  5003               	movf	??_morseStop& (0+255),w,c
 12049  003300  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12050                           
 12051                           ;errors.c: 124: Delay10KTCYx(0);
 12052  003304  6E03               	movwf	??_morseStop& (0+255),c
 12053  003306  0E00               	movlw	0
 12054  003308  6E01               	movwf	?_Delay10KTCYx,c
 12055  00330A  5003               	movf	??_morseStop& (0+255),w,c
 12056  00330C  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12057                           
 12058                           ;errors.c: 125: Delay10KTCYx(0);
 12059  003310  6E03               	movwf	??_morseStop& (0+255),c
 12060  003312  0E00               	movlw	0
 12061  003314  6E01               	movwf	?_Delay10KTCYx,c
 12062  003316  5003               	movf	??_morseStop& (0+255),w,c
 12063  003318  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12064                           
 12065                           ;errors.c: 126: Delay10KTCYx(0);
 12066  00331C  6E03               	movwf	??_morseStop& (0+255),c
 12067  00331E  0E00               	movlw	0
 12068  003320  6E01               	movwf	?_Delay10KTCYx,c
 12069  003322  5003               	movf	??_morseStop& (0+255),w,c
 12070  003324  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12071                           
 12072                           ;errors.c: 127: Delay10KTCYx(0);
 12073  003328  6E03               	movwf	??_morseStop& (0+255),c
 12074  00332A  0E00               	movlw	0
 12075  00332C  6E01               	movwf	?_Delay10KTCYx,c
 12076  00332E  5003               	movf	??_morseStop& (0+255),w,c
 12077  003330  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12078                           
 12079                           ;errors.c: 128: Delay10KTCYx(0);
 12080  003334  6E03               	movwf	??_morseStop& (0+255),c
 12081  003336  0E00               	movlw	0
 12082  003338  6E01               	movwf	?_Delay10KTCYx,c
 12083  00333A  5003               	movf	??_morseStop& (0+255),w,c
 12084  00333C  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12085                           
 12086                           ;errors.c: 129: Delay10KTCYx(0);
 12087  003340  6E03               	movwf	??_morseStop& (0+255),c
 12088  003342  0E00               	movlw	0
 12089  003344  6E01               	movwf	?_Delay10KTCYx,c
 12090  003346  5003               	movf	??_morseStop& (0+255),w,c
 12091  003348  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12092  00334C  0012               	return	
 12093  00334E                     __end_of_morseStop:
 12094                           	opt stack 0
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           intcon	equ	0xFF2
 12100                           intcon2	equ	0xFF1
 12101                           postinc0	equ	0xFEE
 12102                           wreg	equ	0xFE8
 12103                           postinc1	equ	0xFE6
 12104                           postdec1	equ	0xFE5
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           fsr2h	equ	0xFDA
 12110                           fsr2l	equ	0xFD9
 12111                           status	equ	0xFD8
 12112                           
 12113 ;; *************** function _morseShort *****************
 12114 ;; Defined at:
 12115 ;;		line 95 in file "errors.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;		None
 12120 ;; Return value:  Size  Location     Type
 12121 ;;		None               void
 12122 ;; Registers used:
 12123 ;;		wreg, status,2, cstack
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12129 ;;      Params:         0       0       0       0       0       0       0
 12130 ;;      Locals:         0       0       0       0       0       0       0
 12131 ;;      Temps:          1       0       0       0       0       0       0
 12132 ;;      Totals:         1       0       0       0       0       0       0
 12133 ;;Total ram usage:        1 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    1
 12136 ;; This function calls:
 12137 ;;		_Delay10KTCYx
 12138 ;; This function is called by:
 12139 ;;		_morseCode
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           	psect	text72
 12144  003954                     __ptext72:
 12145                           	opt stack 0
 12146  003954                     _morseShort:
 12147                           	opt stack 27
 12148                           
 12149                           ;errors.c: 96: PORTCbits.RC1 = 1;
 12150                           
 12151                           ;incstack = 0
 12152                           ;incstack = 0
 12153  003954  8282               	bsf	3970,1,c	;volatile
 12154                           
 12155                           ;errors.c: 97: Delay10KTCYx(0);
 12156  003956  6E03               	movwf	??_morseShort& (0+255),c
 12157  003958  0E00               	movlw	0
 12158  00395A  6E01               	movwf	?_Delay10KTCYx,c
 12159  00395C  5003               	movf	??_morseShort& (0+255),w,c
 12160  00395E  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12161                           
 12162                           ;errors.c: 98: Delay10KTCYx(0);
 12163  003962  6E03               	movwf	??_morseShort& (0+255),c
 12164  003964  0E00               	movlw	0
 12165  003966  6E01               	movwf	?_Delay10KTCYx,c
 12166  003968  5003               	movf	??_morseShort& (0+255),w,c
 12167  00396A  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12168                           
 12169                           ;errors.c: 99: PORTCbits.RC1 = 0;
 12170  00396E  9282               	bcf	3970,1,c	;volatile
 12171                           
 12172                           ;errors.c: 100: Delay10KTCYx(0);
 12173  003970  6E03               	movwf	??_morseShort& (0+255),c
 12174  003972  0E00               	movlw	0
 12175  003974  6E01               	movwf	?_Delay10KTCYx,c
 12176  003976  5003               	movf	??_morseShort& (0+255),w,c
 12177  003978  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12178  00397C  0012               	return	
 12179  00397E                     __end_of_morseShort:
 12180                           	opt stack 0
 12181                           tblptru	equ	0xFF8
 12182                           tblptrh	equ	0xFF7
 12183                           tblptrl	equ	0xFF6
 12184                           tablat	equ	0xFF5
 12185                           intcon	equ	0xFF2
 12186                           intcon2	equ	0xFF1
 12187                           postinc0	equ	0xFEE
 12188                           wreg	equ	0xFE8
 12189                           postinc1	equ	0xFE6
 12190                           postdec1	equ	0xFE5
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           postdec2	equ	0xFDD
 12195                           fsr2h	equ	0xFDA
 12196                           fsr2l	equ	0xFD9
 12197                           status	equ	0xFD8
 12198                           
 12199 ;; *************** function _morseLong *****************
 12200 ;; Defined at:
 12201 ;;		line 106 in file "errors.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;		None
 12206 ;; Return value:  Size  Location     Type
 12207 ;;		None               void
 12208 ;; Registers used:
 12209 ;;		wreg, status,2, cstack
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12215 ;;      Params:         0       0       0       0       0       0       0
 12216 ;;      Locals:         0       0       0       0       0       0       0
 12217 ;;      Temps:          1       0       0       0       0       0       0
 12218 ;;      Totals:         1       0       0       0       0       0       0
 12219 ;;Total ram usage:        1 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    1
 12222 ;; This function calls:
 12223 ;;		_Delay10KTCYx
 12224 ;; This function is called by:
 12225 ;;		_morseCode
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text73
 12230  003766                     __ptext73:
 12231                           	opt stack 0
 12232  003766                     _morseLong:
 12233                           	opt stack 27
 12234                           
 12235                           ;errors.c: 107: PORTCbits.RC1 = 1;
 12236                           
 12237                           ;incstack = 0
 12238                           ;incstack = 0
 12239  003766  8282               	bsf	3970,1,c	;volatile
 12240                           
 12241                           ;errors.c: 108: Delay10KTCYx(0);
 12242  003768  6E03               	movwf	??_morseLong& (0+255),c
 12243  00376A  0E00               	movlw	0
 12244  00376C  6E01               	movwf	?_Delay10KTCYx,c
 12245  00376E  5003               	movf	??_morseLong& (0+255),w,c
 12246  003770  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12247                           
 12248                           ;errors.c: 109: Delay10KTCYx(0);
 12249  003774  6E03               	movwf	??_morseLong& (0+255),c
 12250  003776  0E00               	movlw	0
 12251  003778  6E01               	movwf	?_Delay10KTCYx,c
 12252  00377A  5003               	movf	??_morseLong& (0+255),w,c
 12253  00377C  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12254                           
 12255                           ;errors.c: 110: Delay10KTCYx(0);
 12256  003780  6E03               	movwf	??_morseLong& (0+255),c
 12257  003782  0E00               	movlw	0
 12258  003784  6E01               	movwf	?_Delay10KTCYx,c
 12259  003786  5003               	movf	??_morseLong& (0+255),w,c
 12260  003788  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12261                           
 12262                           ;errors.c: 111: Delay10KTCYx(0);
 12263  00378C  6E03               	movwf	??_morseLong& (0+255),c
 12264  00378E  0E00               	movlw	0
 12265  003790  6E01               	movwf	?_Delay10KTCYx,c
 12266  003792  5003               	movf	??_morseLong& (0+255),w,c
 12267  003794  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12268                           
 12269                           ;errors.c: 112: PORTCbits.RC1 = 0;
 12270  003798  9282               	bcf	3970,1,c	;volatile
 12271                           
 12272                           ;errors.c: 113: Delay10KTCYx(0);
 12273  00379A  6E03               	movwf	??_morseLong& (0+255),c
 12274  00379C  0E00               	movlw	0
 12275  00379E  6E01               	movwf	?_Delay10KTCYx,c
 12276  0037A0  5003               	movf	??_morseLong& (0+255),w,c
 12277  0037A2  EC53  F01D         	call	_Delay10KTCYx	;wreg free
 12278  0037A6  0012               	return	
 12279  0037A8                     __end_of_morseLong:
 12280                           	opt stack 0
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           intcon	equ	0xFF2
 12286                           intcon2	equ	0xFF1
 12287                           postinc0	equ	0xFEE
 12288                           wreg	equ	0xFE8
 12289                           postinc1	equ	0xFE6
 12290                           postdec1	equ	0xFE5
 12291                           fsr1l	equ	0xFE1
 12292                           indf2	equ	0xFDF
 12293                           postinc2	equ	0xFDE
 12294                           postdec2	equ	0xFDD
 12295                           fsr2h	equ	0xFDA
 12296                           fsr2l	equ	0xFD9
 12297                           status	equ	0xFD8
 12298                           
 12299 ;; *************** function _Delay10KTCYx *****************
 12300 ;; Defined at:
 12301 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic18\d10ktcyx.c"
 12302 ;; Parameters:    Size  Location     Type
 12303 ;;  unit            1    0[COMRAM] unsigned char 
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;		None
 12306 ;; Return value:  Size  Location     Type
 12307 ;;		None               void
 12308 ;; Registers used:
 12309 ;;		wreg
 12310 ;; Tracked objects:
 12311 ;;		On entry : 0/0
 12312 ;;		On exit  : 0/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12315 ;;      Params:         1       0       0       0       0       0       0
 12316 ;;      Locals:         0       0       0       0       0       0       0
 12317 ;;      Temps:          1       0       0       0       0       0       0
 12318 ;;      Totals:         2       0       0       0       0       0       0
 12319 ;;Total ram usage:        2 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; This function calls:
 12322 ;;		Nothing
 12323 ;; This function is called by:
 12324 ;;		_accelSelfTest
 12325 ;;		_morseShort
 12326 ;;		_morseLong
 12327 ;;		_morseStop
 12328 ;;		_gyroSelfTest
 12329 ;;		_main
 12330 ;;		_xBeeSetATMode
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           	psect	text74
 12335  003AA6                     __ptext74:
 12336                           	opt stack 0
 12337  003AA6                     _Delay10KTCYx:
 12338                           	opt stack 28
 12339  003AA6                     l1704:
 12340  003AA6  0E0D               	movlw	13
 12341  003AA8  6E02               	movwf	??_Delay10KTCYx& (0+255),c
 12342  003AAA  0EFB               	movlw	251
 12343  003AAC                     u7127:
 12344  003AAC  2EE8               	decfsz	wreg,f,c
 12345  003AAE  D7FE               	goto	u7127
 12346  003AB0  2E02               	decfsz	??_Delay10KTCYx& (0+255),f,c
 12347  003AB2  D7FC               	goto	u7127
 12348  003AB4  D000               	nop2	
 12349  003AB6  2E01               	decfsz	Delay10KTCYx@unit,f,c
 12350  003AB8  D7F6               	goto	l1704
 12351  003ABA  0012               	return	
 12352  003ABC                     __end_of_Delay10KTCYx:
 12353                           	opt stack 0
 12354                           tblptru	equ	0xFF8
 12355                           tblptrh	equ	0xFF7
 12356                           tblptrl	equ	0xFF6
 12357                           tablat	equ	0xFF5
 12358                           intcon	equ	0xFF2
 12359                           intcon2	equ	0xFF1
 12360                           postinc0	equ	0xFEE
 12361                           wreg	equ	0xFE8
 12362                           postinc1	equ	0xFE6
 12363                           postdec1	equ	0xFE5
 12364                           fsr1l	equ	0xFE1
 12365                           indf2	equ	0xFDF
 12366                           postinc2	equ	0xFDE
 12367                           postdec2	equ	0xFDD
 12368                           fsr2h	equ	0xFDA
 12369                           fsr2l	equ	0xFD9
 12370                           status	equ	0xFD8
 12371                           
 12372 ;; *************** function _transmitError *****************
 12373 ;; Defined at:
 12374 ;;		line 19 in file "errors.c"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;  error           1   15[COMRAM] unsigned char 
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;		None
 12379 ;; Return value:  Size  Location     Type
 12380 ;;		None               void
 12381 ;; Registers used:
 12382 ;;		status,2, cstack
 12383 ;; Tracked objects:
 12384 ;;		On entry : 0/0
 12385 ;;		On exit  : 0/0
 12386 ;;		Unchanged: 0/0
 12387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12388 ;;      Params:         1       0       0       0       0       0       0
 12389 ;;      Locals:         0       0       0       0       0       0       0
 12390 ;;      Temps:          1       0       0       0       0       0       0
 12391 ;;      Totals:         2       0       0       0       0       0       0
 12392 ;;Total ram usage:        2 bytes
 12393 ;; Hardware stack levels used:    1
 12394 ;; Hardware stack levels required when called:    2
 12395 ;; This function calls:
 12396 ;;		_xBeeTxByte
 12397 ;; This function is called by:
 12398 ;;		_accelSelfTest
 12399 ;;		_battSafeCheck
 12400 ;;		_gyroSelfTest
 12401 ;;		_main
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           	psect	text75
 12406  0038FC                     __ptext75:
 12407                           	opt stack 0
 12408  0038FC                     _transmitError:
 12409                           	opt stack 27
 12410                           
 12411                           ;errors.c: 20: xBeeTxByte('E');
 12412                           
 12413                           ;incstack = 0
 12414                           ;incstack = 0
 12415  0038FC  6E11               	movwf	??_transmitError& (0+255),c
 12416  0038FE  0E45               	movlw	69
 12417  003900  6E0F               	movwf	?_xBeeTxByte,c
 12418  003902  5011               	movf	??_transmitError& (0+255),w,c
 12419  003904  EC9A  F01D         	call	_xBeeTxByte	;wreg free
 12420                           
 12421                           ;errors.c: 21: xBeeTxByte('R');
 12422  003908  6E11               	movwf	??_transmitError& (0+255),c
 12423  00390A  0E52               	movlw	82
 12424  00390C  6E0F               	movwf	?_xBeeTxByte,c
 12425  00390E  5011               	movf	??_transmitError& (0+255),w,c
 12426  003910  EC9A  F01D         	call	_xBeeTxByte	;wreg free
 12427                           
 12428                           ;errors.c: 22: xBeeTxByte('R');
 12429  003914  6E11               	movwf	??_transmitError& (0+255),c
 12430  003916  0E52               	movlw	82
 12431  003918  6E0F               	movwf	?_xBeeTxByte,c
 12432  00391A  5011               	movf	??_transmitError& (0+255),w,c
 12433  00391C  EC9A  F01D         	call	_xBeeTxByte	;wreg free
 12434                           
 12435                           ;errors.c: 23: xBeeTxByte(error);
 12436  003920  C010  F00F         	movff	transmitError@error,?_xBeeTxByte
 12437  003924  EC9A  F01D         	call	_xBeeTxByte	;wreg free
 12438  003928  0012               	return	
 12439  00392A                     __end_of_transmitError:
 12440                           	opt stack 0
 12441                           tblptru	equ	0xFF8
 12442                           tblptrh	equ	0xFF7
 12443                           tblptrl	equ	0xFF6
 12444                           tablat	equ	0xFF5
 12445                           intcon	equ	0xFF2
 12446                           intcon2	equ	0xFF1
 12447                           postinc0	equ	0xFEE
 12448                           wreg	equ	0xFE8
 12449                           postinc1	equ	0xFE6
 12450                           postdec1	equ	0xFE5
 12451                           fsr1l	equ	0xFE1
 12452                           indf2	equ	0xFDF
 12453                           postinc2	equ	0xFDE
 12454                           postdec2	equ	0xFDD
 12455                           fsr2h	equ	0xFDA
 12456                           fsr2l	equ	0xFD9
 12457                           status	equ	0xFD8
 12458                           
 12459 ;; *************** function _xBeeTxByte *****************
 12460 ;; Defined at:
 12461 ;;		line 155 in file "telemetry.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;  data            1   14[COMRAM] unsigned char 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;		None
 12466 ;; Return value:  Size  Location     Type
 12467 ;;		None               void
 12468 ;; Registers used:
 12469 ;;		cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12475 ;;      Params:         1       0       0       0       0       0       0
 12476 ;;      Locals:         0       0       0       0       0       0       0
 12477 ;;      Temps:          0       0       0       0       0       0       0
 12478 ;;      Totals:         1       0       0       0       0       0       0
 12479 ;;Total ram usage:        1 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    1
 12482 ;; This function calls:
 12483 ;;		_WriteUSART
 12484 ;; This function is called by:
 12485 ;;		_transmitError
 12486 ;;		_main
 12487 ;;		_xBeeSetATMode
 12488 ;;		_xBeeATCommand
 12489 ;;		_xBeeATCommandUC
 12490 ;;		_xBeeTxString
 12491 ;;		_xBeeTxInt
 12492 ;;		_xBeeTxLong
 12493 ;;		_xBeeTxShort
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text76
 12498  003B34                     __ptext76:
 12499                           	opt stack 0
 12500  003B34                     _xBeeTxByte:
 12501                           	opt stack 28
 12502  003B34                     l1406:
 12503  003B34  A2AC               	btfss	4012,1,c	;volatile
 12504  003B36  D7FE               	goto	l1406
 12505                           
 12506                           ;telemetry.c: 157: WriteUSART(data);
 12507  003B38  C00F  F001         	movff	xBeeTxByte@data,?_WriteUSART
 12508  003B3C  EC8B  F01D         	call	_WriteUSART	;wreg free
 12509  003B40  0012               	return	
 12510  003B42                     __end_of_xBeeTxByte:
 12511                           	opt stack 0
 12512                           tblptru	equ	0xFF8
 12513                           tblptrh	equ	0xFF7
 12514                           tblptrl	equ	0xFF6
 12515                           tablat	equ	0xFF5
 12516                           intcon	equ	0xFF2
 12517                           intcon2	equ	0xFF1
 12518                           postinc0	equ	0xFEE
 12519                           wreg	equ	0xFE8
 12520                           postinc1	equ	0xFE6
 12521                           postdec1	equ	0xFE5
 12522                           fsr1l	equ	0xFE1
 12523                           indf2	equ	0xFDF
 12524                           postinc2	equ	0xFDE
 12525                           postdec2	equ	0xFDD
 12526                           fsr2h	equ	0xFDA
 12527                           fsr2l	equ	0xFD9
 12528                           status	equ	0xFD8
 12529                           
 12530 ;; *************** function _WriteUSART *****************
 12531 ;; Defined at:
 12532 ;;		line 14 in file "USART/uwrite.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;  data            1    0[COMRAM] unsigned char 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;		None               void
 12539 ;; Registers used:
 12540 ;;		None
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12546 ;;      Params:         1       0       0       0       0       0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0
 12548 ;;      Temps:          0       0       0       0       0       0       0
 12549 ;;      Totals:         1       0       0       0       0       0       0
 12550 ;;Total ram usage:        1 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;;		_xBeeTxByte
 12556 ;;		_putrsUSART
 12557 ;;		_putsUSART
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           	psect	text77
 12562  003B16                     __ptext77:
 12563                           	opt stack 0
 12564  003B16                     _WriteUSART:
 12565                           	opt stack 28
 12566                           
 12567                           ;uwrite.c: 15: if(TXSTAbits.TX9)
 12568                           
 12569                           ;incstack = 0
 12570                           ;incstack = 0
 12571  003B16  ACAC               	btfss	4012,6,c	;volatile
 12572  003B18  D003               	goto	l658
 12573                           
 12574                           ;uwrite.c: 16: {
 12575                           ;uwrite.c: 17: TXSTAbits.TX9D = 0;
 12576  003B1A  90AC               	bcf	4012,0,c	;volatile
 12577                           
 12578                           ;uwrite.c: 18: if(USART_Status.TX_NINE)
 12579  003B1C  B27E               	btfsc	_USART_Status,1,c
 12580                           
 12581                           ;uwrite.c: 19: TXSTAbits.TX9D = 1;
 12582  003B1E  80AC               	bsf	4012,0,c	;volatile
 12583  003B20                     l658:
 12584                           
 12585                           ;uwrite.c: 20: }
 12586                           ;uwrite.c: 22: TXREG = data;
 12587  003B20  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
 12588  003B24  0012               	return	
 12589  003B26                     __end_of_WriteUSART:
 12590                           	opt stack 0
 12591                           tblptru	equ	0xFF8
 12592                           tblptrh	equ	0xFF7
 12593                           tblptrl	equ	0xFF6
 12594                           tablat	equ	0xFF5
 12595                           intcon	equ	0xFF2
 12596                           intcon2	equ	0xFF1
 12597                           postinc0	equ	0xFEE
 12598                           wreg	equ	0xFE8
 12599                           postinc1	equ	0xFE6
 12600                           postdec1	equ	0xFE5
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           fsr2h	equ	0xFDA
 12606                           fsr2l	equ	0xFD9
 12607                           status	equ	0xFD8
 12608                           
 12609 ;; *************** function _accelGetADC *****************
 12610 ;; Defined at:
 12611 ;;		line 27 in file "accelmeter.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;		None
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;  accelRaw        2   14[COMRAM] int 
 12616 ;;  i               2   12[COMRAM] int 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  2    9[COMRAM] int 
 12619 ;; Registers used:
 12620 ;;		wreg, status,2, status,0, cstack
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12626 ;;      Params:         2       0       0       0       0       0       0
 12627 ;;      Locals:         4       0       0       0       0       0       0
 12628 ;;      Temps:          1       0       0       0       0       0       0
 12629 ;;      Totals:         7       0       0       0       0       0       0
 12630 ;;Total ram usage:        7 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    1
 12633 ;; This function calls:
 12634 ;;		_BusyADC
 12635 ;;		_ConvertADC
 12636 ;;		_ReadADC
 12637 ;;		_SetChanADC
 12638 ;;		___awdiv
 12639 ;; This function is called by:
 12640 ;;		_accelSelfTest
 12641 ;;		_accelCalibrate
 12642 ;;		_accelGetRoll
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           	psect	text78
 12647  003074                     __ptext78:
 12648                           	opt stack 0
 12649  003074                     _accelGetADC:
 12650                           	opt stack 27
 12651                           
 12652                           ;accelmeter.c: 28: int accelRaw = 0;
 12653                           
 12654                           ;incstack = 0
 12655                           ;incstack = 0
 12656  003074  0E00               	movlw	0
 12657  003076  6E10               	movwf	accelGetADC@accelRaw+1,c
 12658  003078  0E00               	movlw	0
 12659  00307A  6E0F               	movwf	accelGetADC@accelRaw,c
 12660                           
 12661                           ;accelmeter.c: 29: int i;
 12662                           ;accelmeter.c: 31: SetChanADC(0b10000011);
 12663  00307C  6E0C               	movwf	??_accelGetADC& (0+255),c
 12664  00307E  0E83               	movlw	131
 12665  003080  6E01               	movwf	?_SetChanADC,c
 12666  003082  500C               	movf	??_accelGetADC& (0+255),w,c
 12667  003084  EC5E  F01D         	call	_SetChanADC	;wreg free
 12668                           
 12669                           ;accelmeter.c: 33: for (i = 0 ; i < 4 ; ++i){
 12670  003088  0E00               	movlw	0
 12671  00308A  6E0E               	movwf	accelGetADC@i+1,c
 12672  00308C  0E00               	movlw	0
 12673  00308E  6E0D               	movwf	accelGetADC@i,c
 12674  003090  500E               	movf	accelGetADC@i+1,w,c
 12675  003092  0A80               	xorlw	128
 12676  003094  0F80               	addlw	-128
 12677  003096  0E04               	movlw	4
 12678  003098  B4D8               	btfsc	status,2,c
 12679  00309A  5C0D               	subwf	accelGetADC@i,w,c
 12680  00309C  B0D8               	btfsc	status,0,c
 12681  00309E  D010               	goto	l6804
 12682                           
 12683                           ;accelmeter.c: 34: ConvertADC();
 12684  0030A0  ECBA  F01D         	call	_ConvertADC	;wreg free
 12685  0030A4                     l6796:
 12686  0030A4  ECB7  F01D         	call	_BusyADC	;wreg free
 12687  0030A8  0900               	iorlw	0
 12688  0030AA  A4D8               	btfss	status,2,c
 12689  0030AC  D7FB               	goto	l6796
 12690                           
 12691                           ;accelmeter.c: 36: accelRaw += ReadADC();
 12692  0030AE  ECB2  F01D         	call	_ReadADC	;wreg free
 12693  0030B2  5001               	movf	?_ReadADC,w,c
 12694  0030B4  260F               	addwf	accelGetADC@accelRaw,f,c
 12695  0030B6  5002               	movf	?_ReadADC+1,w,c
 12696  0030B8  2210               	addwfc	accelGetADC@accelRaw+1,f,c
 12697  0030BA  4A0D               	infsnz	accelGetADC@i,f,c
 12698  0030BC  2A0E               	incf	accelGetADC@i+1,f,c
 12699  0030BE  D7E8               	goto	L19
 12700  0030C0                     l6804:
 12701                           
 12702                           ;accelmeter.c: 37: }
 12703                           ;accelmeter.c: 39: accelRaw /= 4;
 12704  0030C0  C00F  F001         	movff	accelGetADC@accelRaw,?___awdiv
 12705  0030C4  C010  F002         	movff	accelGetADC@accelRaw+1,?___awdiv+1
 12706  0030C8  0E00               	movlw	0
 12707  0030CA  6E04               	movwf	?___awdiv+3,c
 12708  0030CC  0E04               	movlw	4
 12709  0030CE  6E03               	movwf	?___awdiv+2,c
 12710  0030D0  EC67  F016         	call	___awdiv	;wreg free
 12711  0030D4  C001  F00F         	movff	?___awdiv,accelGetADC@accelRaw
 12712  0030D8  C002  F010         	movff	?___awdiv+1,accelGetADC@accelRaw+1
 12713                           
 12714                           ;accelmeter.c: 41: return accelRaw;
 12715  0030DC  C00F  F00A         	movff	accelGetADC@accelRaw,?_accelGetADC
 12716  0030E0  C010  F00B         	movff	accelGetADC@accelRaw+1,?_accelGetADC+1
 12717  0030E4  0012               	return	
 12718  0030E6                     __end_of_accelGetADC:
 12719                           	opt stack 0
 12720                           tblptru	equ	0xFF8
 12721                           tblptrh	equ	0xFF7
 12722                           tblptrl	equ	0xFF6
 12723                           tablat	equ	0xFF5
 12724                           intcon	equ	0xFF2
 12725                           intcon2	equ	0xFF1
 12726                           postinc0	equ	0xFEE
 12727                           wreg	equ	0xFE8
 12728                           postinc1	equ	0xFE6
 12729                           postdec1	equ	0xFE5
 12730                           fsr1l	equ	0xFE1
 12731                           indf2	equ	0xFDF
 12732                           postinc2	equ	0xFDE
 12733                           postdec2	equ	0xFDD
 12734                           fsr2h	equ	0xFDA
 12735                           fsr2l	equ	0xFD9
 12736                           status	equ	0xFD8
 12737                           
 12738 ;; *************** function ___awdiv *****************
 12739 ;; Defined at:
 12740 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\awdiv.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;  dividend        2    0[COMRAM] int 
 12743 ;;  divisor         2    2[COMRAM] int 
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;  quotient        2    7[COMRAM] int 
 12746 ;;  sign            1    6[COMRAM] unsigned char 
 12747 ;;  counter         1    5[COMRAM] unsigned char 
 12748 ;; Return value:  Size  Location     Type
 12749 ;;                  2    0[COMRAM] int 
 12750 ;; Registers used:
 12751 ;;		wreg, status,2, status,0
 12752 ;; Tracked objects:
 12753 ;;		On entry : 0/0
 12754 ;;		On exit  : 0/0
 12755 ;;		Unchanged: 0/0
 12756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12757 ;;      Params:         4       0       0       0       0       0       0
 12758 ;;      Locals:         4       0       0       0       0       0       0
 12759 ;;      Temps:          1       0       0       0       0       0       0
 12760 ;;      Totals:         9       0       0       0       0       0       0
 12761 ;;Total ram usage:        9 bytes
 12762 ;; Hardware stack levels used:    1
 12763 ;; This function calls:
 12764 ;;		Nothing
 12765 ;; This function is called by:
 12766 ;;		_accelGetADC
 12767 ;;		_accelCalibrate
 12768 ;;		_gyroGetADC
 12769 ;;		_gyroCalibrate
 12770 ;;		_getArrayVoltage
 12771 ;;		_getArrayCurrent
 12772 ;; This function uses a non-reentrant model
 12773 ;;
 12774                           
 12775                           	psect	text79
 12776  002CCE                     __ptext79:
 12777                           	opt stack 0
 12778  002CCE                     ___awdiv:
 12779                           	opt stack 27
 12780                           
 12781                           ;incstack = 0
 12782                           ;incstack = 0
 12783  002CCE  6E05               	movwf	??___awdiv& (0+255),c
 12784  002CD0  0E00               	movlw	0
 12785  002CD2  6E07               	movwf	___awdiv@sign,c
 12786  002CD4  5005               	movf	??___awdiv& (0+255),w,c
 12787  002CD6  AE04               	btfss	___awdiv@divisor+1,7,c
 12788  002CD8  D008               	goto	l6660
 12789  002CDA  6C03               	negf	___awdiv@divisor,c
 12790  002CDC  1E04               	comf	___awdiv@divisor+1,f,c
 12791  002CDE  B0D8               	btfsc	status,0,c
 12792  002CE0  2A04               	incf	___awdiv@divisor+1,f,c
 12793  002CE2  6E05               	movwf	??___awdiv& (0+255),c
 12794  002CE4  0E01               	movlw	1
 12795  002CE6  6E07               	movwf	___awdiv@sign,c
 12796  002CE8  5005               	movf	??___awdiv& (0+255),w,c
 12797  002CEA                     l6660:
 12798  002CEA  AE02               	btfss	___awdiv@dividend+1,7,c
 12799  002CEC  D006               	goto	l6666
 12800  002CEE  6C01               	negf	___awdiv@dividend,c
 12801  002CF0  1E02               	comf	___awdiv@dividend+1,f,c
 12802  002CF2  B0D8               	btfsc	status,0,c
 12803  002CF4  2A02               	incf	___awdiv@dividend+1,f,c
 12804  002CF6  0E01               	movlw	1
 12805  002CF8  1A07               	xorwf	___awdiv@sign,f,c
 12806  002CFA                     l6666:
 12807  002CFA  0E00               	movlw	0
 12808  002CFC  6E09               	movwf	___awdiv@quotient+1,c
 12809  002CFE  0E00               	movlw	0
 12810  002D00  6E08               	movwf	___awdiv@quotient,c
 12811  002D02  5004               	movf	___awdiv@divisor+1,w,c
 12812  002D04  1003               	iorwf	___awdiv@divisor,w,c
 12813  002D06  B4D8               	btfsc	status,2,c
 12814  002D08  D01E               	goto	l6688
 12815  002D0A  6E05               	movwf	??___awdiv& (0+255),c
 12816  002D0C  0E01               	movlw	1
 12817  002D0E  6E06               	movwf	___awdiv@counter,c
 12818  002D10  5005               	movf	??___awdiv& (0+255),w,c
 12819  002D12  D004               	goto	l6674
 12820  002D14                     l6672:
 12821  002D14  90D8               	bcf	status,0,c
 12822  002D16  3603               	rlcf	___awdiv@divisor,f,c
 12823  002D18  3604               	rlcf	___awdiv@divisor+1,f,c
 12824  002D1A  2A06               	incf	___awdiv@counter,f,c
 12825  002D1C                     l6674:
 12826  002D1C  AE04               	btfss	___awdiv@divisor+1,7,c
 12827  002D1E  D7FA               	goto	l6672
 12828  002D20                     l6676:
 12829  002D20  90D8               	bcf	status,0,c
 12830  002D22  3608               	rlcf	___awdiv@quotient,f,c
 12831  002D24  3609               	rlcf	___awdiv@quotient+1,f,c
 12832  002D26  5003               	movf	___awdiv@divisor,w,c
 12833  002D28  5C01               	subwf	___awdiv@dividend,w,c
 12834  002D2A  5004               	movf	___awdiv@divisor+1,w,c
 12835  002D2C  5802               	subwfb	___awdiv@dividend+1,w,c
 12836  002D2E  A0D8               	btfss	status,0,c
 12837  002D30  D005               	goto	l6684
 12838  002D32  5003               	movf	___awdiv@divisor,w,c
 12839  002D34  5E01               	subwf	___awdiv@dividend,f,c
 12840  002D36  5004               	movf	___awdiv@divisor+1,w,c
 12841  002D38  5A02               	subwfb	___awdiv@dividend+1,f,c
 12842  002D3A  8008               	bsf	___awdiv@quotient,0,c
 12843  002D3C                     l6684:
 12844  002D3C  90D8               	bcf	status,0,c
 12845  002D3E  3204               	rrcf	___awdiv@divisor+1,f,c
 12846  002D40  3203               	rrcf	___awdiv@divisor,f,c
 12847  002D42  2E06               	decfsz	___awdiv@counter,f,c
 12848  002D44  D7ED               	goto	l6676
 12849  002D46                     l6688:
 12850  002D46  5007               	movf	___awdiv@sign,w,c
 12851  002D48  B4D8               	btfsc	status,2,c
 12852  002D4A  D004               	goto	l6692
 12853  002D4C  6C08               	negf	___awdiv@quotient,c
 12854  002D4E  1E09               	comf	___awdiv@quotient+1,f,c
 12855  002D50  B0D8               	btfsc	status,0,c
 12856  002D52  2A09               	incf	___awdiv@quotient+1,f,c
 12857  002D54                     l6692:
 12858  002D54  C008  F001         	movff	___awdiv@quotient,?___awdiv
 12859  002D58  C009  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 12860  002D5C  0012               	return	
 12861  002D5E                     __end_of___awdiv:
 12862                           	opt stack 0
 12863                           tblptru	equ	0xFF8
 12864                           tblptrh	equ	0xFF7
 12865                           tblptrl	equ	0xFF6
 12866                           tablat	equ	0xFF5
 12867                           intcon	equ	0xFF2
 12868                           intcon2	equ	0xFF1
 12869                           postinc0	equ	0xFEE
 12870                           wreg	equ	0xFE8
 12871                           postinc1	equ	0xFE6
 12872                           postdec1	equ	0xFE5
 12873                           fsr1l	equ	0xFE1
 12874                           indf2	equ	0xFDF
 12875                           postinc2	equ	0xFDE
 12876                           postdec2	equ	0xFDD
 12877                           fsr2h	equ	0xFDA
 12878                           fsr2l	equ	0xFD9
 12879                           status	equ	0xFD8
 12880                           
 12881 ;; *************** function _SetChanADC *****************
 12882 ;; Defined at:
 12883 ;;		line 31 in file "ADC/adcsetch.c"
 12884 ;; Parameters:    Size  Location     Type
 12885 ;;  channel         1    0[COMRAM] unsigned char 
 12886 ;; Auto vars:     Size  Location     Type
 12887 ;;		None
 12888 ;; Return value:  Size  Location     Type
 12889 ;;		None               void
 12890 ;; Registers used:
 12891 ;;		wreg, status,2, status,0
 12892 ;; Tracked objects:
 12893 ;;		On entry : 0/0
 12894 ;;		On exit  : 0/0
 12895 ;;		Unchanged: 0/0
 12896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12897 ;;      Params:         1       0       0       0       0       0       0
 12898 ;;      Locals:         0       0       0       0       0       0       0
 12899 ;;      Temps:          1       0       0       0       0       0       0
 12900 ;;      Totals:         2       0       0       0       0       0       0
 12901 ;;Total ram usage:        2 bytes
 12902 ;; Hardware stack levels used:    1
 12903 ;; This function calls:
 12904 ;;		Nothing
 12905 ;; This function is called by:
 12906 ;;		_accelGetADC
 12907 ;;		_gyroGetADC
 12908 ;;		_main
 12909 ;;		_getArrayVoltage
 12910 ;;		_getArrayCurrent
 12911 ;; This function uses a non-reentrant model
 12912 ;;
 12913                           
 12914                           	psect	text80
 12915  003ABC                     __ptext80:
 12916                           	opt stack 0
 12917  003ABC                     _SetChanADC:
 12918                           	opt stack 27
 12919                           
 12920                           ;adcsetch.c: 33: ADCON0 = ((channel >> 1) & 0b00111100) |
 12921                           ;adcsetch.c: 34: (ADCON0 & 0b11000011);
 12922                           
 12923                           ;incstack = 0
 12924                           ;incstack = 0
 12925  003ABC  CFC2 F002          	movff	4034,??_SetChanADC	;volatile
 12926  003AC0  0EC3               	movlw	195
 12927  003AC2  1602               	andwf	??_SetChanADC,f,c
 12928  003AC4  90D8               	bcf	status,0,c
 12929  003AC6  3001               	rrcf	SetChanADC@channel,w,c
 12930  003AC8  0B3C               	andlw	60
 12931  003ACA  1002               	iorwf	??_SetChanADC,w,c
 12932  003ACC  6EC2               	movwf	4034,c	;volatile
 12933  003ACE  0012               	return	
 12934  003AD0                     __end_of_SetChanADC:
 12935                           	opt stack 0
 12936                           tblptru	equ	0xFF8
 12937                           tblptrh	equ	0xFF7
 12938                           tblptrl	equ	0xFF6
 12939                           tablat	equ	0xFF5
 12940                           intcon	equ	0xFF2
 12941                           intcon2	equ	0xFF1
 12942                           postinc0	equ	0xFEE
 12943                           wreg	equ	0xFE8
 12944                           postinc1	equ	0xFE6
 12945                           postdec1	equ	0xFE5
 12946                           fsr1l	equ	0xFE1
 12947                           indf2	equ	0xFDF
 12948                           postinc2	equ	0xFDE
 12949                           postdec2	equ	0xFDD
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _ReadADC *****************
 12955 ;; Defined at:
 12956 ;;		line 25 in file "ADC/adcread.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;		None
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;		None
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  2    0[COMRAM] int 
 12963 ;; Registers used:
 12964 ;;		wreg, status,2
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12970 ;;      Params:         2       0       0       0       0       0       0
 12971 ;;      Locals:         0       0       0       0       0       0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0
 12973 ;;      Totals:         2       0       0       0       0       0       0
 12974 ;;Total ram usage:        2 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_accelGetADC
 12980 ;;		_gyroGetADC
 12981 ;;		_main
 12982 ;;		_getArrayVoltage
 12983 ;;		_getArrayCurrent
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text81
 12988  003B64                     __ptext81:
 12989                           	opt stack 0
 12990  003B64                     _ReadADC:
 12991                           	opt stack 27
 12992                           
 12993                           ;adcread.c: 26: return (((unsigned int)ADRESH)<<8)|(ADRESL);
 12994                           
 12995                           ;incstack = 0
 12996                           ;incstack = 0
 12997  003B64  50C4               	movf	4036,w,c	;volatile
 12998  003B66  6E02               	movwf	?_ReadADC+1,c
 12999  003B68  50C3               	movf	4035,w,c	;volatile
 13000  003B6A  6E01               	movwf	?_ReadADC,c
 13001  003B6C  0012               	return	
 13002  003B6E                     __end_of_ReadADC:
 13003                           	opt stack 0
 13004                           tblptru	equ	0xFF8
 13005                           tblptrh	equ	0xFF7
 13006                           tblptrl	equ	0xFF6
 13007                           tablat	equ	0xFF5
 13008                           intcon	equ	0xFF2
 13009                           intcon2	equ	0xFF1
 13010                           postinc0	equ	0xFEE
 13011                           wreg	equ	0xFE8
 13012                           postinc1	equ	0xFE6
 13013                           postdec1	equ	0xFE5
 13014                           fsr1l	equ	0xFE1
 13015                           indf2	equ	0xFDF
 13016                           postinc2	equ	0xFDE
 13017                           postdec2	equ	0xFDD
 13018                           fsr2h	equ	0xFDA
 13019                           fsr2l	equ	0xFD9
 13020                           status	equ	0xFD8
 13021                           
 13022 ;; *************** function _ConvertADC *****************
 13023 ;; Defined at:
 13024 ;;		line 23 in file "ADC/adcconv.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;		None
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;		None
 13029 ;; Return value:  Size  Location     Type
 13030 ;;		None               void
 13031 ;; Registers used:
 13032 ;;		None
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13038 ;;      Params:         0       0       0       0       0       0       0
 13039 ;;      Locals:         0       0       0       0       0       0       0
 13040 ;;      Temps:          0       0       0       0       0       0       0
 13041 ;;      Totals:         0       0       0       0       0       0       0
 13042 ;;Total ram usage:        0 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; This function calls:
 13045 ;;		Nothing
 13046 ;; This function is called by:
 13047 ;;		_accelGetADC
 13048 ;;		_gyroGetADC
 13049 ;;		_main
 13050 ;;		_getArrayVoltage
 13051 ;;		_getArrayCurrent
 13052 ;; This function uses a non-reentrant model
 13053 ;;
 13054                           
 13055                           	psect	text82
 13056  003B74                     __ptext82:
 13057                           	opt stack 0
 13058  003B74                     _ConvertADC:
 13059                           	opt stack 27
 13060                           
 13061                           ;adcconv.c: 24: ADCON0bits.GO = 1;
 13062                           
 13063                           ;incstack = 0
 13064                           ;incstack = 0
 13065  003B74  82C2               	bsf	4034,1,c	;volatile
 13066  003B76  0012               	return	
 13067  003B78                     __end_of_ConvertADC:
 13068                           	opt stack 0
 13069                           tblptru	equ	0xFF8
 13070                           tblptrh	equ	0xFF7
 13071                           tblptrl	equ	0xFF6
 13072                           tablat	equ	0xFF5
 13073                           intcon	equ	0xFF2
 13074                           intcon2	equ	0xFF1
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postinc1	equ	0xFE6
 13078                           postdec1	equ	0xFE5
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8
 13086                           
 13087 ;; *************** function _BusyADC *****************
 13088 ;; Defined at:
 13089 ;;		line 27 in file "ADC/adcbusy.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;		None
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;		None
 13094 ;; Return value:  Size  Location     Type
 13095 ;;                  1    wreg      unsigned char 
 13096 ;; Registers used:
 13097 ;;		wreg, status,2, status,0
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/0
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13103 ;;      Params:         0       0       0       0       0       0       0
 13104 ;;      Locals:         0       0       0       0       0       0       0
 13105 ;;      Temps:          0       0       0       0       0       0       0
 13106 ;;      Totals:         0       0       0       0       0       0       0
 13107 ;;Total ram usage:        0 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; This function calls:
 13110 ;;		Nothing
 13111 ;; This function is called by:
 13112 ;;		_accelGetADC
 13113 ;;		_gyroGetADC
 13114 ;;		_main
 13115 ;;		_getArrayVoltage
 13116 ;;		_getArrayCurrent
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text83
 13121  003B6E                     __ptext83:
 13122                           	opt stack 0
 13123  003B6E                     _BusyADC:
 13124                           	opt stack 27
 13125                           
 13126                           ;adcbusy.c: 28: return(ADCON0bits.GO);
 13127                           
 13128                           ;incstack = 0
 13129                           ;incstack = 0
 13130  003B6E  30C2               	rrcf	4034,w,c	;volatile
 13131  003B70  0B01               	andlw	1
 13132  003B72  0012               	return	
 13133  003B74                     __end_of_BusyADC:
 13134                           	opt stack 0
 13135                           tblptru	equ	0xFF8
 13136                           tblptrh	equ	0xFF7
 13137                           tblptrl	equ	0xFF6
 13138                           tablat	equ	0xFF5
 13139                           intcon	equ	0xFF2
 13140                           intcon2	equ	0xFF1
 13141                           postinc0	equ	0xFEE
 13142                           wreg	equ	0xFE8
 13143                           postinc1	equ	0xFE6
 13144                           postdec1	equ	0xFE5
 13145                           fsr1l	equ	0xFE1
 13146                           indf2	equ	0xFDF
 13147                           postinc2	equ	0xFDE
 13148                           postdec2	equ	0xFDD
 13149                           fsr2h	equ	0xFDA
 13150                           fsr2l	equ	0xFD9
 13151                           status	equ	0xFD8
 13152                           
 13153 ;; *************** function _OpenADC *****************
 13154 ;; Defined at:
 13155 ;;		line 71 in file "ADC/adcopen.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  config          1    0[COMRAM] unsigned char 
 13158 ;;  config2         1    1[COMRAM] unsigned char 
 13159 ;;  portconfig      1    2[COMRAM] unsigned char 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;		None
 13162 ;; Return value:  Size  Location     Type
 13163 ;;		None               void
 13164 ;; Registers used:
 13165 ;;		wreg, status,2, status,0
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13171 ;;      Params:         3       0       0       0       0       0       0
 13172 ;;      Locals:         0       0       0       0       0       0       0
 13173 ;;      Temps:          2       0       0       0       0       0       0
 13174 ;;      Totals:         5       0       0       0       0       0       0
 13175 ;;Total ram usage:        5 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; This function calls:
 13178 ;;		Nothing
 13179 ;; This function is called by:
 13180 ;;		_main
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	text84
 13185  0033AA                     __ptext84:
 13186                           	opt stack 0
 13187  0033AA                     _OpenADC:
 13188                           	opt stack 30
 13189                           
 13190                           ;adcopen.c: 72: ADCON0 = 0;
 13191                           
 13192                           ;incstack = 0
 13193                           ;incstack = 0
 13194  0033AA  0E00               	movlw	0
 13195  0033AC  6EC2               	movwf	4034,c	;volatile
 13196                           
 13197                           ;adcopen.c: 73: ADCON2 = 0;
 13198  0033AE  0E00               	movlw	0
 13199  0033B0  6EC0               	movwf	4032,c	;volatile
 13200                           
 13201                           ;adcopen.c: 75: ADCON0 = (config2 >> 1) & 0b00111100;
 13202  0033B2  90D8               	bcf	status,0,c
 13203  0033B4  3002               	rrcf	OpenADC@config2,w,c
 13204  0033B6  0B3C               	andlw	60
 13205  0033B8  6EC2               	movwf	4034,c	;volatile
 13206                           
 13207                           ;adcopen.c: 76: ADCON1 = (portconfig & 0b00001111) |
 13208                           ;adcopen.c: 77: ((config2 << 4) & 0b00110000);
 13209  0033BA  C002  F004         	movff	OpenADC@config2,??_OpenADC
 13210  0033BE  3A04               	swapf	??_OpenADC,f,c
 13211  0033C0  0EF0               	movlw	240
 13212  0033C2  1604               	andwf	??_OpenADC,f,c
 13213  0033C4  0E30               	movlw	48
 13214  0033C6  1604               	andwf	??_OpenADC,f,c
 13215  0033C8  5003               	movf	OpenADC@portconfig,w,c
 13216  0033CA  0B0F               	andlw	15
 13217  0033CC  1004               	iorwf	??_OpenADC,w,c
 13218  0033CE  6EC1               	movwf	4033,c	;volatile
 13219                           
 13220                           ;adcopen.c: 78: ADCON2 = (config & 0b10000000) |
 13221                           ;adcopen.c: 79: ((config >> 4) & 0b00000111) |
 13222                           ;adcopen.c: 80: ((config << 2) & 0b00111000);
 13223  0033D0  C001  F004         	movff	OpenADC@config,??_OpenADC
 13224  0033D4  90D8               	bcf	status,0,c
 13225  0033D6  3604               	rlcf	??_OpenADC,f,c
 13226  0033D8  90D8               	bcf	status,0,c
 13227  0033DA  3604               	rlcf	??_OpenADC,f,c
 13228  0033DC  0E38               	movlw	56
 13229  0033DE  1604               	andwf	??_OpenADC,f,c
 13230  0033E0  C001  F005         	movff	OpenADC@config,??_OpenADC+1
 13231  0033E4  3A05               	swapf	??_OpenADC+1,f,c
 13232  0033E6  0E0F               	movlw	15
 13233  0033E8  1605               	andwf	??_OpenADC+1,f,c
 13234  0033EA  0E07               	movlw	7
 13235  0033EC  1605               	andwf	??_OpenADC+1,f,c
 13236  0033EE  5001               	movf	OpenADC@config,w,c
 13237  0033F0  0B80               	andlw	128
 13238  0033F2  1005               	iorwf	??_OpenADC+1,w,c
 13239  0033F4  1004               	iorwf	??_OpenADC,w,c
 13240  0033F6  6EC0               	movwf	4032,c	;volatile
 13241                           
 13242                           ;adcopen.c: 82: if( config2 & 0b10000000 )
 13243  0033F8  AE02               	btfss	OpenADC@config2,7,c
 13244  0033FA  D003               	goto	l34
 13245                           
 13246                           ;adcopen.c: 83: {
 13247                           ;adcopen.c: 84: PIR1bits.ADIF = 0;
 13248  0033FC  9C9E               	bcf	3998,6,c	;volatile
 13249                           
 13250                           ;adcopen.c: 85: PIE1bits.ADIE = 1;
 13251  0033FE  8C9D               	bsf	3997,6,c	;volatile
 13252                           
 13253                           ;adcopen.c: 86: INTCONbits.PEIE = 1;
 13254  003400  8CF2               	bsf	intcon,6,c	;volatile
 13255  003402                     l34:
 13256                           
 13257                           ;adcopen.c: 87: }
 13258                           ;adcopen.c: 88: ADCON0bits.ADON = 1;
 13259  003402  80C2               	bsf	4034,0,c	;volatile
 13260  003404  0012               	return	
 13261  003406                     __end_of_OpenADC:
 13262                           	opt stack 0
 13263                           tblptru	equ	0xFF8
 13264                           tblptrh	equ	0xFF7
 13265                           tblptrl	equ	0xFF6
 13266                           tablat	equ	0xFF5
 13267                           intcon	equ	0xFF2
 13268                           intcon2	equ	0xFF1
 13269                           postinc0	equ	0xFEE
 13270                           wreg	equ	0xFE8
 13271                           postinc1	equ	0xFE6
 13272                           postdec1	equ	0xFE5
 13273                           fsr1l	equ	0xFE1
 13274                           indf2	equ	0xFDF
 13275                           postinc2	equ	0xFDE
 13276                           postdec2	equ	0xFDD
 13277                           fsr2h	equ	0xFDA
 13278                           fsr2l	equ	0xFD9
 13279                           status	equ	0xFD8
 13280                           
 13281 ;; *************** function ___wmul *****************
 13282 ;; Defined at:
 13283 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\wmul.c"
 13284 ;; Parameters:    Size  Location     Type
 13285 ;;  multiplier      2    0[COMRAM] unsigned int 
 13286 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13287 ;; Auto vars:     Size  Location     Type
 13288 ;;  product         2    4[COMRAM] unsigned int 
 13289 ;; Return value:  Size  Location     Type
 13290 ;;                  2    0[COMRAM] unsigned int 
 13291 ;; Registers used:
 13292 ;;		wreg, status,2, status,0, prodl, prodh
 13293 ;; Tracked objects:
 13294 ;;		On entry : 0/0
 13295 ;;		On exit  : 0/0
 13296 ;;		Unchanged: 0/0
 13297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13298 ;;      Params:         4       0       0       0       0       0       0
 13299 ;;      Locals:         2       0       0       0       0       0       0
 13300 ;;      Temps:          0       0       0       0       0       0       0
 13301 ;;      Totals:         6       0       0       0       0       0       0
 13302 ;;Total ram usage:        6 bytes
 13303 ;; Hardware stack levels used:    1
 13304 ;; This function calls:
 13305 ;;		Nothing
 13306 ;; This function is called by:
 13307 ;;		_baroTrueTemp
 13308 ;;		_eval_poly
 13309 ;; This function uses a non-reentrant model
 13310 ;;
 13311                           
 13312                           	psect	text85
 13313  003820                     __ptext85:
 13314                           	opt stack 0
 13315  003820                     ___wmul:
 13316                           	opt stack 28
 13317                           
 13318                           ;incstack = 0
 13319                           ;incstack = 0
 13320  003820  5001               	movf	___wmul@multiplier,w,c
 13321  003822  0203               	mulwf	___wmul@multiplicand,c
 13322  003824  CFF3 F005          	movff	prodl,___wmul@product
 13323  003828  CFF4 F006          	movff	prodh,___wmul@product+1
 13324  00382C  5001               	movf	___wmul@multiplier,w,c
 13325  00382E  0204               	mulwf	___wmul@multiplicand+1,c
 13326  003830  CFF3 FFF4          	movff	prodl,prodh
 13327  003834  6AF3               	clrf	prodl,c
 13328  003836  50F3               	movf	prodl,w,c
 13329  003838  2605               	addwf	___wmul@product,f,c
 13330  00383A  50F4               	movf	prodh,w,c
 13331  00383C  2206               	addwfc	___wmul@product+1,f,c
 13332  00383E  5002               	movf	___wmul@multiplier+1,w,c
 13333  003840  0203               	mulwf	___wmul@multiplicand,c
 13334  003842  CFF3 FFF4          	movff	prodl,prodh
 13335  003846  6AF3               	clrf	prodl,c
 13336  003848  50F3               	movf	prodl,w,c
 13337  00384A  2605               	addwf	___wmul@product,f,c
 13338  00384C  50F4               	movf	prodh,w,c
 13339  00384E  2206               	addwfc	___wmul@product+1,f,c
 13340  003850  C005  F001         	movff	___wmul@product,?___wmul
 13341  003854  C006  F002         	movff	___wmul@product+1,?___wmul+1
 13342  003858  0012               	return	
 13343  00385A                     __end_of___wmul:
 13344                           	opt stack 0
 13345                           tblptru	equ	0xFF8
 13346                           tblptrh	equ	0xFF7
 13347                           tblptrl	equ	0xFF6
 13348                           tablat	equ	0xFF5
 13349                           prodh	equ	0xFF4
 13350                           prodl	equ	0xFF3
 13351                           intcon	equ	0xFF2
 13352                           intcon2	equ	0xFF1
 13353                           postinc0	equ	0xFEE
 13354                           wreg	equ	0xFE8
 13355                           postinc1	equ	0xFE6
 13356                           postdec1	equ	0xFE5
 13357                           fsr1l	equ	0xFE1
 13358                           indf2	equ	0xFDF
 13359                           postinc2	equ	0xFDE
 13360                           postdec2	equ	0xFDD
 13361                           fsr2h	equ	0xFDA
 13362                           fsr2l	equ	0xFD9
 13363                           status	equ	0xFD8
 13364                           
 13365 ;; *************** function ___ftge *****************
 13366 ;; Defined at:
 13367 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\ftge.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;  ff1             3   11[COMRAM] float 
 13370 ;;  ff2             3   14[COMRAM] float 
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;		None               void
 13375 ;; Registers used:
 13376 ;;		wreg, status,2, status,0
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13382 ;;      Params:         6       0       0       0       0       0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0
 13384 ;;      Temps:          3       0       0       0       0       0       0
 13385 ;;      Totals:         9       0       0       0       0       0       0
 13386 ;;Total ram usage:        9 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_accelGetRoll
 13392 ;;		_asin
 13393 ;;		_atan
 13394 ;;		_sqrt
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398                           	psect	text86
 13399  002D5E                     __ptext86:
 13400                           	opt stack 0
 13401  002D5E                     ___ftge:
 13402                           	opt stack 28
 13403                           
 13404                           ;incstack = 0
 13405                           ;incstack = 0
 13406  002D5E  AE0E               	btfss	___ftge@ff1+2,7,c
 13407  002D60  D016               	goto	l7038
 13408  002D62  C00C  F012         	movff	___ftge@ff1,??___ftge
 13409  002D66  C00D  F013         	movff	___ftge@ff1+1,??___ftge+1
 13410  002D6A  C00E  F014         	movff	___ftge@ff1+2,??___ftge+2
 13411  002D6E  1E12               	comf	??___ftge,f,c
 13412  002D70  1E13               	comf	??___ftge+1,f,c
 13413  002D72  1E14               	comf	??___ftge+2,f,c
 13414  002D74  2A12               	incf	??___ftge,f,c
 13415  002D76  0E00               	movlw	0
 13416  002D78  2213               	addwfc	??___ftge+1,f,c
 13417  002D7A  2214               	addwfc	??___ftge+2,f,c
 13418  002D7C  0E00               	movlw	0
 13419  002D7E  2412               	addwf	??___ftge,w,c
 13420  002D80  6E0C               	movwf	___ftge@ff1,c
 13421  002D82  0E00               	movlw	0
 13422  002D84  2013               	addwfc	??___ftge+1,w,c
 13423  002D86  6E0D               	movwf	___ftge@ff1+1,c
 13424  002D88  0E80               	movlw	128
 13425  002D8A  2014               	addwfc	??___ftge+2,w,c
 13426  002D8C  6E0E               	movwf	___ftge@ff1+2,c
 13427  002D8E                     l7038:
 13428  002D8E  AE11               	btfss	___ftge@ff2+2,7,c
 13429  002D90  D016               	goto	l7042
 13430  002D92  C00F  F012         	movff	___ftge@ff2,??___ftge
 13431  002D96  C010  F013         	movff	___ftge@ff2+1,??___ftge+1
 13432  002D9A  C011  F014         	movff	___ftge@ff2+2,??___ftge+2
 13433  002D9E  1E12               	comf	??___ftge,f,c
 13434  002DA0  1E13               	comf	??___ftge+1,f,c
 13435  002DA2  1E14               	comf	??___ftge+2,f,c
 13436  002DA4  2A12               	incf	??___ftge,f,c
 13437  002DA6  0E00               	movlw	0
 13438  002DA8  2213               	addwfc	??___ftge+1,f,c
 13439  002DAA  2214               	addwfc	??___ftge+2,f,c
 13440  002DAC  0E00               	movlw	0
 13441  002DAE  2412               	addwf	??___ftge,w,c
 13442  002DB0  6E0F               	movwf	___ftge@ff2,c
 13443  002DB2  0E00               	movlw	0
 13444  002DB4  2013               	addwfc	??___ftge+1,w,c
 13445  002DB6  6E10               	movwf	___ftge@ff2+1,c
 13446  002DB8  0E80               	movlw	128
 13447  002DBA  2014               	addwfc	??___ftge+2,w,c
 13448  002DBC  6E11               	movwf	___ftge@ff2+2,c
 13449  002DBE                     l7042:
 13450  002DBE  0E00               	movlw	0
 13451  002DC0  1A0C               	xorwf	___ftge@ff1,f,c
 13452  002DC2  0E00               	movlw	0
 13453  002DC4  1A0D               	xorwf	___ftge@ff1+1,f,c
 13454  002DC6  0E80               	movlw	128
 13455  002DC8  1A0E               	xorwf	___ftge@ff1+2,f,c
 13456  002DCA  0E00               	movlw	0
 13457  002DCC  1A0F               	xorwf	___ftge@ff2,f,c
 13458  002DCE  0E00               	movlw	0
 13459  002DD0  1A10               	xorwf	___ftge@ff2+1,f,c
 13460  002DD2  0E80               	movlw	128
 13461  002DD4  1A11               	xorwf	___ftge@ff2+2,f,c
 13462  002DD6  500F               	movf	___ftge@ff2,w,c
 13463  002DD8  5C0C               	subwf	___ftge@ff1,w,c
 13464  002DDA  5010               	movf	___ftge@ff2+1,w,c
 13465  002DDC  580D               	subwfb	___ftge@ff1+1,w,c
 13466  002DDE  5011               	movf	___ftge@ff2+2,w,c
 13467  002DE0  580E               	subwfb	___ftge@ff1+2,w,c
 13468  002DE2  B0D8               	btfsc	status,0,c
 13469  002DE4  D002               	goto	l7048
 13470  002DE6  90D8               	bcf	status,0,c
 13471  002DE8  D001               	goto	l1891
 13472  002DEA                     l7048:
 13473  002DEA  80D8               	bsf	status,0,c
 13474  002DEC                     l1891:
 13475  002DEC  0012               	return	
 13476  002DEE                     __end_of___ftge:
 13477                           	opt stack 0
 13478                           tblptru	equ	0xFF8
 13479                           tblptrh	equ	0xFF7
 13480                           tblptrl	equ	0xFF6
 13481                           tablat	equ	0xFF5
 13482                           prodh	equ	0xFF4
 13483                           prodl	equ	0xFF3
 13484                           intcon	equ	0xFF2
 13485                           intcon2	equ	0xFF1
 13486                           postinc0	equ	0xFEE
 13487                           wreg	equ	0xFE8
 13488                           postinc1	equ	0xFE6
 13489                           postdec1	equ	0xFE5
 13490                           fsr1l	equ	0xFE1
 13491                           indf2	equ	0xFDF
 13492                           postinc2	equ	0xFDE
 13493                           postdec2	equ	0xFDD
 13494                           fsr2h	equ	0xFDA
 13495                           fsr2l	equ	0xFD9
 13496                           status	equ	0xFD8
 13497                           tblptru	equ	0xFF8
 13498                           tblptrh	equ	0xFF7
 13499                           tblptrl	equ	0xFF6
 13500                           tablat	equ	0xFF5
 13501                           prodh	equ	0xFF4
 13502                           prodl	equ	0xFF3
 13503                           intcon	equ	0xFF2
 13504                           intcon2	equ	0xFF1
 13505                           postinc0	equ	0xFEE
 13506                           wreg	equ	0xFE8
 13507                           postinc1	equ	0xFE6
 13508                           postdec1	equ	0xFE5
 13509                           fsr1l	equ	0xFE1
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           fsr2h	equ	0xFDA
 13514                           fsr2l	equ	0xFD9
 13515                           status	equ	0xFD8
 13516                           
 13517                           	psect	rparam
 13518  0000                     tblptru	equ	0xFF8
 13519                           tblptrh	equ	0xFF7
 13520                           tblptrl	equ	0xFF6
 13521                           tablat	equ	0xFF5
 13522                           prodh	equ	0xFF4
 13523                           prodl	equ	0xFF3
 13524                           intcon	equ	0xFF2
 13525                           intcon2	equ	0xFF1
 13526                           postinc0	equ	0xFEE
 13527                           wreg	equ	0xFE8
 13528                           postinc1	equ	0xFE6
 13529                           postdec1	equ	0xFE5
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           fsr2h	equ	0xFDA
 13535                           fsr2l	equ	0xFD9
 13536                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    33
    Data        43
    BSS         113
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    125     127
    BANK0           128     42     117
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_eval_poly	 size(2) Largest target is 3
		 -> atan@val(COMRAM[3]), 

    ?_atan	 size(2) Largest target is 3
		 -> atan@val(COMRAM[3]), 

    ?___ftneg	float  size(2) Largest target is 3
		 -> atan@val(COMRAM[3]), 

    ?_sqrt	float  size(2) Largest target is 0

    ?_fabs	float  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?___ftsub	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 3
		 -> atan@val(COMRAM[3]), 

    ?___ftpack	float  size(2) Largest target is 0

    ?_xBeeRxLong	long  size(2) Largest target is 0

    ?_xBeeRxInt	int  size(2) Largest target is 0

    ?_getArrayPower	int  size(2) Largest target is 0

    ?_getArrayCurrent	int  size(2) Largest target is 0

    ?_getArrayVoltage	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_gyroGetADC	int  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___lmul	unsigned long  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?_baroConvertAlt	long  size(2) Largest target is 3
		 -> baroConvertAlt@ratio(COMRAM[3]), 

    ?___ftadd	float  size(2) Largest target is 0

    ?___altoft	float  size(2) Largest target is 0

    ?_baroTruePres	long  size(2) Largest target is 0

    ?_baroTrueTemp	unsigned short  size(2) Largest target is 0

    ?_baroGetVal	unsigned short  size(2) Largest target is 0

    ?_accelGetRoll	int  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?_asin	float  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___awtoft	float  size(2) Largest target is 0

    ?_accelGetADC	int  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?_ReadADC	int  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sqrt@x(COMRAM[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sqrt@q(COMRAM[3]), sqrt@x(COMRAM[3]), atan@val(COMRAM[3]), 

    updateSensorARData@ptr	PTR struct . size(2) Largest target is 14
		 -> sensorData(BANK1[14]), 

    xBeeTxXBee@ptr	PTR struct . size(2) Largest target is 16
		 -> xBeeData(BANK1[16]), 

    xBeeTxString@data	PTR unsigned char  size(2) Largest target is 18
		 -> main@message2(BANK0[18]), main@message1(BANK0[13]), 

    updateXBeeData@data	PTR struct . size(2) Largest target is 16
		 -> xBeeData(BANK1[16]), 

    updatePwrData@ptr	PTR struct . size(2) Largest target is 6
		 -> powerData(BANK0[6]), 

    xBeePtr	PTR struct . size(2) Largest target is 16
		 -> xBeeData(BANK1[16]), 

    sensorPtr	PTR struct . size(2) Largest target is 14
		 -> sensorData(BANK1[14]), 

    battPtr	PTR struct . size(2) Largest target is 18
		 -> battData(BANK1[18]), 

    powerPtr	PTR struct . size(2) Largest target is 6
		 -> powerData(BANK0[6]), 

    battSafeCheck@ptr	PTR struct . size(2) Largest target is 18
		 -> battData(BANK1[18]), 

    updateBattData@data	PTR struct . size(2) Largest target is 18
		 -> battData(BANK1[18]), 


Critical Paths under _main in COMRAM

    _main->_updateSensorARData
    ___lwdiv->___lwmod
    _xBeeTxString->_xBeeTxByte
    _updateSensorARData->_accelGetRoll
    _accelGetRoll->_asin
    _asin->_atan
    _atan->_eval_poly
    _eval_poly->___ftadd
    _fabs->___ftge
    ___ftneg->___ftpack
    _sqrt->___asftsub
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftdiv
    ___asftmul->___ftmul
    _xBeeTxXBee->_xBeeTxLong
    _xBeeTxLong->_xBeeTxByte
    _xBeeTxInt->_xBeeTxByte
    _updateXBeeData->_xBeeSetATMode
    _xBeeRxByte->_ReadUSART
    _xBeeConfig->_xBeeEndATMode
    _xBeeEndATMode->_xBeeATCommand
    _xBeeATCommand->_xBeeTxByte
    _xBeeATCommandUC->_xBeeTxByte
    _xBeeSetATMode->_xBeeTxByte
    _openRS232->_OpenUSART
    _updatePwrData->_getArrayPower
    _getArrayPower->___ftdiv
    _getArrayPower->___ftmul
    ___ftdiv->___awtoft
    _getArrayCurrent->___ftmul
    ___awtoft->___fttol
    _getArrayVoltage->___ftmul
    _gyroSelfTest->_transmitError
    _gyroCalibrate->_gyroGetADC
    _gyroGetADC->___awdiv
    _battSafeCheck->_transmitError
    _updateBattData->_battReadWord
    _battReadWord->_WriteI2C
    _openSMBus->_OpenI2C
    _battConfig->_battConfigByte
    _battConfigByte->_WriteI2C
    _baroCalibrate->_baroConvertAlt
    ___fttol->___ftpack
    ___altoft->___aldiv
    _baroConvertAlt->___ftadd
    ___ftmul->___awtoft
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _baroTruePres->___aldiv
    _baroTrueTemp->___aldiv
    _baroPresStart->_WriteI2C
    _baroPresStart->_Delay10TCYx
    _baroTempStart->_WriteI2C
    _baroTempStart->_Delay10TCYx
    _baroGetVal->_WriteI2C
    _accelCalibrate->_accelGetADC
    _accelSelfTest->_transmitError
    _morseCode->_morseLong
    _morseCode->_morseShort
    _morseCode->_morseStop
    _morseStop->_Delay10KTCYx
    _morseShort->_Delay10KTCYx
    _morseLong->_Delay10KTCYx
    _transmitError->_xBeeTxByte
    _xBeeTxByte->___lwdiv
    _accelGetADC->___awdiv
    ___ftge->___ftneg

Critical Paths under _main in BANK0

    _main->_updateSensorARData

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   35631
                                              4 BANK0     38    38      0
                            _BusyADC
                         _ConvertADC
                            _OpenADC
                            _ReadADC
                         _SetChanADC
                      _accelSelfTest
                       _Delay10KTCYx
                      _transmitError
                          _morseCode
                     _accelCalibrate
                      _baroCalibrate
                         _battConfig
                          _openSMBus
                     _updateBattData
                      _battSafeCheck
                         _xBeeTxByte
                      _gyroCalibrate
                     _gyroTimerStart
                       _gyroSelfTest
                      _updatePwrData
                          _openRS232
                         _xBeeConfig
                     _updateXBeeData
                         _xBeeTxXBee
                    _telemTimerStart
                 _updateSensorARData
                           _blinkLED
                       _xBeeTxString
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     162
                                              6 COMRAM     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _xBeeTxString                                         4     2      2     134
                                             15 COMRAM     4     2      2
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (1) _blinkLED                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSensorARData                                   7     5      2   17829
                                            122 COMRAM     3     1      2
                                              0 BANK0      4     4      0
                       _accelGetRoll
                         _baroGetVal
                      _baroTempStart
                      _baroPresStart
                       _baroTrueTemp
                       _baroTruePres
                     _baroConvertAlt
 ---------------------------------------------------------------------------------
 (2) _accelGetRoll                                        11     9      2   13335
                                            111 COMRAM    11     9      2
                        _accelGetADC
                               _asin
                            ___ftdiv
                            ___ftmul
                           ___awtoft
                             ___ftge
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _asin                                                30    27      3   11003
                                             90 COMRAM    21    18      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _fabs
                               _sqrt
                               _atan
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) _atan                                                16    13      3    5227
                                             74 COMRAM    16    13      3
                            ___ftadd
                            ___ftdiv
                          ___asftmul
                            ___ftmul
                               _fabs
                          _eval_poly
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           15     8      7    1921
                                             59 COMRAM    15     8      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _fabs                                                 3     0      3     111
                                             20 COMRAM     3     0      3
                             ___ftge (ARG)
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3      45
                                              8 COMRAM     3     0      3
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) _sqrt                                                19    16      3    2822
                                             70 COMRAM    19    16      3
                          ___asftmul
                            ___ftmul
                          ___asftsub
                             ___ftge
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (5) ___asftsub                                            5     0      5    1160
                                             65 COMRAM     5     0      5
                            ___ftsub
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    1094
                                             59 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___asftmul                                            5     0      5     601
                                             45 COMRAM     5     0      5
                            ___ftdiv (ARG)
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _telemTimerStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _xBeeTxXBee                                           2     0      2     400
                                             26 COMRAM     2     0      2
                          _xBeeTxInt
                         _xBeeTxLong
 ---------------------------------------------------------------------------------
 (2) _xBeeTxLong                                          11     7      4     180
                                             15 COMRAM    11     7      4
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (2) _xBeeTxInt                                            2     0      2      88
                                             15 COMRAM     2     0      2
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (1) _updateXBeeData                                       4     2      2     474
                                             18 COMRAM     4     2      2
                      _xBeeSetATMode
                      _xBeeATCommand
                         _xBeeRxLong
                          _xBeeRxInt
 ---------------------------------------------------------------------------------
 (2) _xBeeRxInt                                            5     3      2      47
                                              1 COMRAM     5     3      2
                         _xBeeRxByte
 ---------------------------------------------------------------------------------
 (2) _xBeeRxLong                                          15    11      4      49
                                              1 COMRAM    15    11      4
                         _xBeeRxByte
 ---------------------------------------------------------------------------------
 (3) _xBeeRxByte                                           0     0      0      23
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _xBeeConfig                                           3     3      0     356
                                             19 COMRAM     3     3      0
                      _xBeeSetATMode
                    _xBeeATCommandUC
                      _xBeeEndATMode
 ---------------------------------------------------------------------------------
 (2) _xBeeEndATMode                                        2     2      0      88
                                             17 COMRAM     2     2      0
                      _xBeeATCommand
 ---------------------------------------------------------------------------------
 (2) _xBeeATCommand                                        2     0      2      88
                                             15 COMRAM     2     0      2
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (2) _xBeeATCommandUC                                      3     0      3     110
                                             15 COMRAM     3     0      3
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (2) _xBeeSetATMode                                        3     3      0     158
                                             15 COMRAM     3     3      0
                       _Delay10KTCYx
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (1) _openRS232                                            1     1      0     220
                                              3 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     0      3     220
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _updatePwrData                                        2     0      2    4617
                                             54 COMRAM     2     0      2
                    _getArrayVoltage
                    _getArrayCurrent
                      _getArrayPower
 ---------------------------------------------------------------------------------
 (2) _getArrayPower                                        9     5      4    1666
                                             45 COMRAM     9     5      4
                            ___ftdiv
                            ___ftmul
                           ___awtoft
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             17    11      6     489
                                             28 COMRAM    17    11      6
                           ___ftpack
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (2) _getArrayCurrent                                      7     5      2    1525
                                             45 COMRAM     7     5      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                         _SetChanADC
                            ___ftmul
                            ___awdiv
                           ___awtoft
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             5     2      3     300
                                             23 COMRAM     5     2      3
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getArrayVoltage                                      7     5      2    1316
                                             45 COMRAM     7     5      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                         _SetChanADC
                            ___ftmul
                            ___awdiv
                           ___awtoft
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _gyroSelfTest                                         7     7      0     684
                                             17 COMRAM     7     7      0
                       _Delay10KTCYx
                      _transmitError
                          _morseCode
                         _gyroGetADC
 ---------------------------------------------------------------------------------
 (1) _gyroCalibrate                                        4     4      0     785
                                             16 COMRAM     4     4      0
                         _gyroGetADC
                     _gyroTimerStart
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _gyroTimerStart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gyroGetADC                                           7     5      2     415
                                              9 COMRAM     7     5      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                         _SetChanADC
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _battSafeCheck                                        5     3      2     405
                                             17 COMRAM     5     3      2
                      _transmitError
                          _morseCode
 ---------------------------------------------------------------------------------
 (1) _updateBattData                                       3     1      2     244
                                              8 COMRAM     3     1      2
                       _battReadWord
 ---------------------------------------------------------------------------------
 (2) _battReadWord                                         7     5      2      46
                                              1 COMRAM     7     5      2
                           _WriteI2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (1) _openSMBus                                            2     2      0      44
                                              2 COMRAM     2     2      0
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     0      2      44
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _battConfig                                           2     2      0      66
                                              4 COMRAM     2     2      0
                     _battConfigByte
 ---------------------------------------------------------------------------------
 (2) _battConfigByte                                       3     1      2      66
                                              1 COMRAM     3     1      2
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (1) _baroCalibrate                                       15    15      0    6960
                                             77 COMRAM    15    15      0
                         _baroGetVal
                      _baroTempStart
                      _baroPresStart
                       _baroTrueTemp
                       _baroTruePres
                     _baroConvertAlt
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     252
                                              8 COMRAM    15    11      4
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4     347
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _baroConvertAlt                                      18    14      4    2597
                                             59 COMRAM    18    14      4
                            ___aldiv
                           ___altoft
                            ___ftadd
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             17    11      6     535
                                             28 COMRAM    17    11      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             14     8      6    1049
                                             45 COMRAM    14     8      6
                           ___ftpack
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _baroTruePres                                        41    37      4     988
                                             15 COMRAM    37    33      4
                            ___aldiv
                             ___lmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     162
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8      92
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     300
                                              0 COMRAM    15     7      8
 ---------------------------------------------------------------------------------
 (2) _baroTrueTemp                                        20    18      2     572
                                             15 COMRAM    20    18      2
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _baroPresStart                                        1     1      0      44
                                              1 COMRAM     1     1      0
                            _IdleI2C
                           _WriteI2C
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (2) _baroTempStart                                        1     1      0      44
                                              1 COMRAM     1     1      0
                            _IdleI2C
                           _WriteI2C
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _baroGetVal                                           6     4      2      93
                                              1 COMRAM     6     4      2
                            _IdleI2C
                           _WriteI2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             1     0      1      22
                                              0 COMRAM     1     0      1
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _accelCalibrate                                       4     4      0     785
                                             16 COMRAM     4     4      0
                        _accelGetADC
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _accelSelfTest                                        7     7      0     683
                                             17 COMRAM     7     7      0
                        _accelGetADC
                       _Delay10KTCYx
                      _transmitError
                          _morseCode
 ---------------------------------------------------------------------------------
 (2) _morseCode                                            1     0      1      88
                                              3 COMRAM     1     0      1
                          _morseLong
                         _morseShort
                          _morseStop
 ---------------------------------------------------------------------------------
 (3) _morseStop                                            1     1      0      22
                                              2 COMRAM     1     1      0
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (3) _morseShort                                           1     1      0      22
                                              2 COMRAM     1     1      0
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (3) _morseLong                                            1     1      0      22
                                              2 COMRAM     1     1      0
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     1      1      22
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _transmitError                                        2     1      1      66
                                             15 COMRAM     2     1      1
                         _xBeeTxByte
 ---------------------------------------------------------------------------------
 (2) _xBeeTxByte                                           1     0      1      44
                                             14 COMRAM     1     0      1
                         _WriteUSART
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _accelGetADC                                          7     5      2     415
                                              9 COMRAM     7     5      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                         _SetChanADC
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     300
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (4) _SetChanADC                                           2     1      1      22
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadADC                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              5     2      3     154
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     136
                                             11 COMRAM     9     3      6
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _OpenADC
   _ReadADC
   _SetChanADC
   _accelSelfTest
     _accelGetADC
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___awdiv
     _Delay10KTCYx
     _transmitError
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _morseCode
       _morseLong
         _Delay10KTCYx
       _morseShort
         _Delay10KTCYx
       _morseStop
         _Delay10KTCYx
   _Delay10KTCYx
   _transmitError
     _xBeeTxByte
       _WriteUSART
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
   _morseCode
     _morseLong
       _Delay10KTCYx
     _morseShort
       _Delay10KTCYx
     _morseStop
       _Delay10KTCYx
   _accelCalibrate
     _accelGetADC
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___awdiv
     ___awdiv
   _baroCalibrate
     _baroGetVal
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
     _baroTempStart
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _Delay10TCYx
     _baroPresStart
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _Delay10TCYx
     _baroTrueTemp
       ___aldiv
       ___wmul
     _baroTruePres
       ___aldiv
       ___lmul
       ___lldiv
     _baroConvertAlt
       ___aldiv
       ___altoft
         ___ftpack
         ___aldiv (ARG)
       ___ftadd
         ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___aldiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
     ___altoft
       ___ftpack
       ___aldiv (ARG)
     ___ftadd
       ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___ftpack
       ___altoft (ARG)
         ___ftpack
         ___aldiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
     ___ftmul
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftpack (ARG)
     ___fttol
       ___ftpack (ARG)
   _battConfig
     _battConfigByte
       _WriteI2C
         _IdleI2C
   _openSMBus
     _OpenI2C
   _updateBattData
     _battReadWord
       _WriteI2C
         _IdleI2C
       _ReadI2C
   _battSafeCheck
     _transmitError
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _morseCode
       _morseLong
         _Delay10KTCYx
       _morseShort
         _Delay10KTCYx
       _morseStop
         _Delay10KTCYx
   _xBeeTxByte
     _WriteUSART
     ___lwdiv (ARG)
       ___lwmod (ARG)
     ___lwmod (ARG)
   _gyroCalibrate
     _gyroGetADC
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___awdiv
     _gyroTimerStart
     ___awdiv
   _gyroTimerStart
   _gyroSelfTest
     _Delay10KTCYx
     _transmitError
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _morseCode
       _morseLong
         _Delay10KTCYx
       _morseShort
         _Delay10KTCYx
       _morseStop
         _Delay10KTCYx
     _gyroGetADC
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___awdiv
   _updatePwrData
     _getArrayVoltage
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___awdiv
       ___awtoft
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
     _getArrayCurrent
       _BusyADC
       _ConvertADC
       _ReadADC
       _SetChanADC
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___awdiv
       ___awtoft
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
     _getArrayPower
       ___ftdiv
         ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___awtoft
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
   _openRS232
     _OpenUSART
   _xBeeConfig
     _xBeeSetATMode
       _Delay10KTCYx
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _xBeeATCommandUC
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _xBeeEndATMode
       _xBeeATCommand
         _xBeeTxByte
           _WriteUSART
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
   _updateXBeeData
     _xBeeSetATMode
       _Delay10KTCYx
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _xBeeATCommand
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _xBeeRxLong
       _xBeeRxByte
         _ReadUSART
     _xBeeRxInt
       _xBeeRxByte
         _ReadUSART
   _xBeeTxXBee
     _xBeeTxInt
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _xBeeTxLong
       _xBeeTxByte
         _WriteUSART
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
   _telemTimerStart
   _updateSensorARData
     _accelGetRoll
       _accelGetADC
         _BusyADC
         _ConvertADC
         _ReadADC
         _SetChanADC
         ___awdiv
       _asin
         ___ftadd
           ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___aldiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv
           ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___aldiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
         _fabs
           ___ftge (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         _sqrt
           ___asftmul
             ___ftdiv (ARG)
               ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___aldiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___altoft (ARG)
                     ___ftpack
                     ___aldiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                 ___wmul (ARG)
           ___ftge
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         _atan
           ___ftadd
             ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___aldiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv
             ___ftpack
             ___altoft (ARG)
               ___ftpack
               ___aldiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___asftmul
             ___ftdiv (ARG)
               ___ftpack
               ___altoft (ARG)
                 ___ftpack
                 ___aldiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
           _fabs
             ___ftge (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           _eval_poly
             ___ftadd
               ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___altoft (ARG)
                   ___ftpack
                   ___aldiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___wmul
           ___ftge
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftneg
             ___ftpack (ARG)
         ___ftge
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftneg
           ___ftpack (ARG)
       ___ftdiv
         ___ftpack
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___awtoft
         ___ftpack
         ___fttol (ARG)
           ___ftpack (ARG)
       ___ftge
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
     _baroGetVal
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
     _baroTempStart
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _Delay10TCYx
     _baroPresStart
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _Delay10TCYx
     _baroTrueTemp
       ___aldiv
       ___wmul
     _baroTruePres
       ___aldiv
       ___lmul
       ___lldiv
     _baroConvertAlt
       ___aldiv
       ___altoft
         ___ftpack
         ___aldiv (ARG)
       ___ftadd
         ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___altoft (ARG)
             ___ftpack
             ___aldiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
       ___fttol
         ___ftpack (ARG)
   _blinkLED
   _xBeeTxString
     _xBeeTxByte
       _WriteUSART
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
   ___lwdiv
     ___lwmod (ARG)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7D      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       8       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     143      15        0.0%
DATA                 0      0     14B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Wed Oct 16 13:01:58 2013

     __end_of_battConfigByte 38FC         __end_of_baroTrueTemp 1C38         __end_of_baroTruePres 0B9A  
               ___altoft@exp 0018               baroCalibrate@b 0052               baroCalibrate@m 004F  
       __size_of_accelGetADC 0072       __end_of_updateBattData 21E8                  _SSPSTATbits 000FC7  
              ___altoft@sign 0019                           _B1 00A8                           _B2 00AA  
                         _B3 0080                           _B4 0084                           _B5 0088  
                         _B6 008C                           _B7 0090                           l34 3402  
                         _MB 00AC                           _MC 00AE       __end_of_updateXBeeData 1FAC  
                         _MD 00B0                 ___awdiv@sign 0007            xBeeATCommand@cmd1 0010  
          xBeeATCommand@cmd2 0011         __end_of_battReadWord 3152          ___wmul@multiplicand 0003  
               ___asftmul@f2 0030      __size_of_gyroTimerStart 0010                 ___asftsub@f2 0044  
               ___ftadd@exp1 003B                 ___ftadd@exp2 003A                 ___ftadd@sign 0039  
      __size_of_accelGetRoll 012A                          _AC1 009C                          _AC2 009E  
                        _AC3 00A0                          _AC4 00A2                          _AC5 00A4  
                        _AC6 00A6        __end_of_battSafeCheck 20CA                          l601 3362  
                        l522 35B2                          l610 3390                          l603 336E  
                        l612 33A8                          l604 3370                          l525 3580  
                        l534 35A0                          l607 3382                          l608 3384  
                        l609 338E                          l802 34B8                          l811 34F6  
                        l820 2DF8                          l900 38C8                          l485 3A52  
                        l805 34BC                          l645 39F8                          l486 3A54  
                        l831 2E32                          l823 2E1A                          l903 38F6  
                        l840 2E66                          l808 34F2                          l912 3102  
                        l817 2DF4                          l921 312A                          l658 3B20  
                        l834 2E4C                          l826 2E1E                          l843 2E6C  
                        l915 3112                          l924 3146                          l837 2E50  
                        l781 12A8                          l909 30E8                          l790 3512  
                        l918 3126                          l950 20C8                          l927 314C  
                        l697 2CCC                          l793 3548                          l778 128C  
                        l787 350E                          l980 24E6                          l796 354C  
      accelCalibrate@average 0011                          fsr2 000FD9        __end_of_xBeeEndATMode 3954  
                        wreg 000FE8                ___asftmul@f1p 002E                ___asftsub@f1p 0042  
               __CFG_LVP$OFF 000000             battSafeCheck@ptr 0012                 ___ftdiv@cntr 0028  
               ___ftdiv@sign 002D                 __CFG_WDT$OFF 000000                         l1035 2BA6  
                       l2025 3452                         l2035 3694                         l1406 3B34  
                       l2057 19F4                         l2058 19E6                         l1443 3B5A  
                       l2059 1B08                         l1611 19A0                         l1612 186E  
                       l1711 3B26                         l1704 3AA6                         l1379 3286  
                       l1813 290A                         l1741 3716                         l1742 3722  
                       l1592 11AA                         l1850 167E                         l1851 17E0  
                       l1907 39BC                         l1917 26A8                         l1854 16A8  
                       l1865 174C                         l1874 1768                         l1882 23F4  
                       l1891 2DEC                         l1956 2EEE                         l7012 2282  
                       l1884 239E                         l1885 23C4                         l6150 3B4E  
                       l7022 22AE                         l7110 3428                         l7016 2292  
                       l7120 3448                         l7112 342C                         l1897 22F6  
                       l7042 2DBE                         l7026 22BE                         l7140 363A  
                       l7108 3420                         l7038 2D8E                         l7062 25F6  
                       l7048 2DEA                         l7400 2464                         l7080 264A  
                       l7304 325C                         l7402 2476                         l7090 2672  
                       l7404 2484                         l6620 2718                         l6612 26E6  
                       l7092 267E                         l7084 265A                         l7252 35E6  
                       l7406 2496                         l6630 274C                         l6622 271C  
                       l6606 26CE                         l6702 2EA0                         l7094 2682  
                       l7502 235C                         l7262 387C                         l7408 24A8  
                       l6704 2EAC                         l7600 20AA                         l7352 2C2A  
                       l7344 2BF4                         l6618 270C                         l6634 275A  
                       l6714 2EE0                         l6706 2EB0                         l7098 2698  
                       l7370 2530                         l7258 3864                         l6730 368A  
                       l6722 366A                         l6660 2CEA                         l6804 30C0  
                       l6644 346C                         l6580 28B0                         l6572 2872  
                       l7276 29EE                         l7284 2A0A                         l7372 25B4  
                       l7700 1818                         l6724 3672                         l7390 240E  
                       l6638 2770                         l6582 28CE                         l6574 287C  
                       l6910 2F3A                         l7382 36BA                         l6726 3676  
                       l6672 2D14                         l7392 2424                         l6648 3480  
                       l6584 28D8                         l6576 289A                         l6568 2864  
                       l6674 2D1C                         l6666 2CFA                         l7394 242E  
                       l7554 2C78                         l6930 16B6                         l7626 2B52  
                       l7474 293C                         l7482 2958                         l7714 1960  
                       l6692 2D54                         l6684 2D3C                         l6676 2D20  
                       l7396 2438                         l7388 23F8                         l6780 35B0  
                       l6748 356A                         l6924 168C                         l6908 2F2E  
                       l7398 244E                         l7566 2CC0                         l6766 358C  
                       l6846 0A22                         l7582 200E                         l7574 1FD2  
                       l7638 2B9A                         l7718 1984                         l7742 106E  
                       l6688 2D46                         l6952 1706                         l7592 2068  
                       l7496 2324                         l7728 0F7C                         l6954 1710  
                       l6946 16E8                         l7586 2044                         l7578 1FF0  
                       l7754 112E                         l6796 30A4                         l6972 1784  
                       l6964 173C                         l6956 1718                         l7596 2086  
                       l7588 204A                         l7676 1A48                         l7916 0E56  
                       l6982 17BC                         l6966 1746                         l6958 171E  
                       l6878 3032                         l6886 304E                         l6992 2214  
                       l7866 0CBC                         l7858 0CA0                         l6998 224C  
                       l7878 0D12                         l7898 0D7C                baroGetVal@reg 0002  
                       u5020 3988                         _PIE1 000F9D                         u5026 398A  
                       u6200 2660                         u6050 2206                         u6070 2232  
                       u6150 25E8                         u6055 21FE                         u7015 1972  
                       u5600 35AC                         u6080 223E                         u6170 2614  
                       u6075 222A                         u6155 25E0                         u7117 3B28  
                       u7045 1080                         u7127 3AAC                         u6175 260C  
                       u7071 0CC6                         u5705 07A0                         u7081 0CD8  
                       u5715 0818                         u5740 0950                         u5716 081E  
                       u5645 1B3A                         u5725 0864                         u5717 082C  
                       u5726 086A                         u5655 1B5E                         u5735 08F2  
                       u5727 0878                         u5736 08F8                         u5840 1634  
                       u5665 1C0A                         u5745 0946                         u5737 0906  
                       u5666 1C10                         u5850 165A                         u5667 1C1E  
                       u5675 067C                         u5676 0682                         u5765 0B64  
                       u5685 06CE                         u5677 0690                         u5845 162C  
                       u6645 2BCC                         u5766 0B6A                         u5686 06D4  
                       u6750 2316                         u6646 2BD2                         u5767 0B78  
                       u5695 0720                         u5687 06E2                         u5855 1652  
                       u6647 2BE0                         u5696 0726                         u5697 0734  
                       u6770 2342                         u6755 230E                         u6675 36F4  
                       u6780 234E                         u6775 233A                         u6980 183C  
                       u6965 19D4                         u6986 183E        __end_of_gyroCalibrate 3608  
        xBeeATCommandUC@cmd1 0010          xBeeATCommandUC@cmd2 0011        accelGetRoll@accelTemp 0078  
                       _fabs 36E2                         _atan 17E2                         _asin 0F30  
                       _main 0B9A                 ___ftpack@arg 0001                 ___ftpack@exp 0004  
     baroConvertAlt@pressure 003C                         fsr2h 000FDA                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         _sqrt 19A2  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
    __size_of_accelCalibrate 0050               ?_updatePwrData 0037              battReadWord@reg 0002  
            __end_of_IdleI2C 3B5A         getArrayPower@current 0030       __size_of_accelSelfTest 0092  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 002C         __end_of_xBeeTxString 3890  
               ___ftmul@sign 002D              __end_of_BusyADC 3B74              __end_of_ReadI2C 3A5C  
            __end_of_ReadADC 3B6E              ?_battConfigByte 0002   baroCalibrate@presLocalTrue 0059  
               _accelGetRoll 1C38           updateBattData@data 0009                  _Delay10TCYx 3B26  
            __end_of_OpenI2C 3A40              __end_of_OpenADC 3406                 ___fttol@exp1 0017  
               ___fttol@lval 0013              ?_updateBattData 0009         getArrayPower@voltage 002E  
            ?_updateXBeeData 0013                        ?_fabs 0015              __end_of___aldiv 2782  
                      ?_atan 004B                        ?_asin 005B                        ?_main 0001  
      __end_of_xBeeSetATMode 3288              __end_of___awdiv 2D5E              __end_of___ftadd 17E2  
            __end_of___ftdiv 23F6               baroGetVal@data 0005              __end_of___ftneg 39CA  
            __end_of___lldiv 2F00                        ?_sqrt 0047              __end_of___ftmul 22F8  
            ___awdiv@divisor 0003              __end_of___ftsub 38C6              __end_of___fttol 26AA  
              _transmitError 38FC              __end_of___lwdiv 345C              __end_of___lwmod 369E  
            ___awdiv@counter 0006                        _RCREG 000FAE                        _RCSTA 000FAB  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94             ?_getArrayCurrent 002E                        _TXREG 000FAD  
      __size_of_Delay10KTCYx 0016                        _TXSTA 000FAC          ___lmul@multiplicand 0005  
               main@message1 00D8                 main@message2 00C6         xBeeATCommandUC@param 0012  
              ___awtoft@sign 001C         gyroCalibrate@average 0011                        fabs@d 0015  
                      _errno 00B2                        atan@f 004B                        atan@x 0051  
                      atan@y 004E                ___ftpack@sign 0005                        asin@x 005B  
                      asin@y 006A             ?_getArrayVoltage 002E              accelCalibrate@i 0013  
                 _ConvertADC 3B74                        tablat 000FF5             updatePwrData@ptr 0037  
                      sqrt@i 0053                        sqrt@q 0054                        sqrt@x 0057  
                      sqrt@y 0047                        sqrt@z 0050                        status 000FD8  
             WriteUSART@data 0001           updateXBeeData@data 0013              __initialization 31BC  
          getArrayPower@temp 0032                 __end_of_fabs 3724                 __end_of_atan 19A2  
               __end_of_asin 11AC                 __end_of_main 0F30                 __end_of_sqrt 1B0A  
               _Delay10KTCYx 3AA6               __CFG_OSC$HSPLL 000000                       ??_fabs 0018  
                     ??_atan 004E                       ??_asin 005E               ?_transmitError 0010  
                     ??_main 00C3                ___fttol@sign1 0012        accelGetRoll@rollAngle 0074  
         battSafeCheck@error 0016                       ??_sqrt 004A                __activetblptr 000002  
                 _SetChanADC 3ABC                _accelSelfTest 2C3C                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ADCON2 000FC0             __end_of___altoft 2F84  
                     _ADRESH 000FC4                       _ADRESL 000FC3             ___awdiv@dividend 0001  
           __end_of_WriteI2C 35B4             __end_of___awtoft 36E2             __end_of___ftpack 290C  
                OpenI2C@slew 0002                    ??_IdleI2C 0001           __size_of_ReadUSART 001E  
             __CFG_WDTPS$256 000000                       _SPBRGH 000FB0                       _SSPADD 000FC8  
            ??_updatePwrData 0039                       _SSPBUF 000FC9                    ??_BusyADC 0001  
                  ??_ReadI2C 0001                    ??_ReadADC 0003        __size_of_baroTrueTemp 012E  
      __size_of_baroTruePres 0578             ??_baroConvertAlt 0040             __end_of_blinkLED 39A4  
                  ??_OpenI2C 0003                    ??_OpenADC 0004               accelSelfTest@i 0017  
      __size_of_battReadWord 006C           __size_of_OpenUSART 005C                       ___ftge 2D5E  
                     ___lmul 345C                    ??___aldiv 0009                       ___wmul 3820  
                  ??___awdiv 0005                    ??___ftadd 0034                    ??___ftdiv 0023  
                  ??___ftneg 000C                    ??___lldiv 0009                    ??___ftmul 0023  
                  ??___ftsub 0042                    ??___fttol 000D                    ??___lwdiv 000B  
                  ??___lwmod 0005               _gyroTimerStart 3B06                       clear_0 31C2  
                     clear_1 31CE             ___awdiv@quotient 0008        ___ftmul@f3_as_product 0029  
             ?_accelSelfTest 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                       sqrt@og 004D  
               _baroTrueTemp 1B0A                 _baroTruePres 0622        __end_of_getArrayPower 3002  
                ?_ConvertADC 0001            battReadWord@value 0007        updateSensorARData@ptr 007B  
         __size_of___asftmul 003C           __size_of___asftsub 003C                 _battReadWord 30E6  
                 __accesstop 0080      __end_of__initialization 3218                   ___altoft@c 0010  
      __size_of_xBeeTxString 0036                   ___ftadd@f1 002E                   ___ftadd@f2 0031  
                 ___ftge@ff1 000C                   ___ftge@ff2 000F          baroConvertAlt@ratio 0044  
             _accelCalibrate 3608                 eval_poly@res 0048                   ___ftdiv@f1 001D  
                 ___ftdiv@f2 0020                   ___ftdiv@f3 0029                   ___ftneg@f1 0009  
               accelGetADC@i 000D                   ___awtoft@c 0018  __size_of_updateSensorARData 00D2  
                 ___ftmul@f1 001D                   ___ftmul@f2 0020                   ___ftsub@f1 003C  
                 ___ftsub@f2 003F                   ___fttol@f1 0009       __size_of_baroCalibrate 024C  
         getArrayPower@power 0035                   _WriteUSART 3B16               __pcstackCOMRAM 0001  
baroCalibrate@temperatureRaw 0057                 __pidataBANK0 3B42                 __pidataBANK1 39CA  
     __end_of_gyroTimerStart 3B16              ??_transmitError 0011           __size_of_xBeeRxInt 001C  
         __size_of_xBeeTxInt 0012            __end_of_ReadUSART 3A08                  ?_SetChanADC 0001  
                 _baroGetVal 2DEE                 _xBeeTxString 385A                ReadUSART@data 0001  
          __end_of_OpenUSART 33AA                   _battConfig 13F8                   __pbssBANK0 0080  
                 __pbssBANK1 0100            baroConvertAlt@val 004A           __size_of_eval_poly 00E2  
               _onLEDBlinker 007F       __end_of_accelCalibrate 3658                   _xBeeConfig 3724  
   __size_of_xBeeATCommandUC 001A               morseCode@error 0004             ??_battConfigByte 0004  
                 _xBeeTxXBee 2A70                   _xBeeRxByte 3B5A                   _xBeeRxLong 3288  
                 _xBeeTxByte 3B34                   _xBeeTxLong 2BA8                  gyroGetADC@i 000D  
              ?_gyroSelfTest 0001             ??_updateBattData 000B                ??_accelGetADC 000C  
     __size_of_xBeeATCommand 0012             ??_updateXBeeData 0015           __size_of_openRS232 0016  
                    ?___ftge 000C                      ?___lmul 0001          baroTrueTemp@rawTemp 0010  
         __size_of_openSMBus 001A                 ?_Delay10TCYx 0001                      ?___wmul 0001  
            ?_gyroTimerStart 0001     __size_of_telemTimerStart 0012              _xBeeTxLong$3946 0019  
            _xBeeTxLong$3947 001A                    ?___altoft 0010                      _BAUDCON 000FB8  
             ___lmul@product 0009            __end_of___asftmul 3820            __end_of___asftsub 37E4  
        __size_of_ConvertADC 0004                    ?_WriteI2C 0001                    ?___awtoft 0018  
                  ?___ftpack 0001       __size_of_baroTempStart 0056           __size_of_morseCode 00F2  
         __size_of_morseLong 0042              ??_accelSelfTest 0012           __size_of_morseStop 0062  
     __size_of_baroPresStart 0056           transmitError@error 0010                    ?_blinkLED 0001  
              _baroCalibrate 11AC          baroTruePres@rawPres 0010                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_xBeeRxInt 3A24  
                    _IdleI2C 3B4E            __end_of_xBeeTxInt 3AF4              ?_accelCalibrate 0001  
                    _BusyADC 3B6E               ??_gyroSelfTest 0012                      _ReadI2C 3A40  
                    _ReadADC 3B64       __size_of_battSafeCheck 011E                      _OpenI2C 3A24  
                    _OpenADC 33AA                      __Hparam 0000          __size_of_SetChanADC 0014  
                    __Lparam 0000                  ?_WriteUSART 0001       __size_of_xBeeEndATMode 002A  
                    ___aldiv 26AA              __size_of___ftge 0090                      ___awdiv 2CCE  
            __size_of___lmul 0056                      ___ftadd 1616                      ___ftdiv 22F8  
                    ___ftneg 39A4                      ___lldiv 2E7A              __size_of___wmul 003A  
                    ___ftmul 21E8                      ___ftsub 3890                      ___fttol 25CA  
                    ___lwdiv 3406                      ___lwmod 3658                 __psmallconst 0600  
                 ??___altoft 0014          __end_of_accelGetADC 30E6                      _battPtr 00EB  
                    __pcinit 31BC                   ??_WriteI2C 0002                   ??___awtoft 001B  
                    _xBeePtr 00F3                   ??___ftpack 0006            __end_of_eval_poly 25CA  
            Delay10TCYx@unit 0001                      __ramtop 0600                      __ptext0 0B9A  
                    __ptext1 3658                      __ptext2 3406                      __ptext3 385A  
                    __ptext4 397E                      __ptext5 2782                      __ptext6 1C38  
                    __ptext7 0F30                      __ptext8 17E2                      __ptext9 24E8  
     __size_of_gyroCalibrate 0054            battConfigByte@reg 0002                    _T0CONbits 000FD5  
                  _T1CONbits 000FCD                xBeeTxXBee@ptr 001B              atan@val_squared 0055  
              _xBeeATCommand 3AF4               ?_baroCalibrate 0001             ___aldiv@dividend 0001  
                    atan@val 0058                  ?_baroGetVal 0002                   ??_blinkLED 0001  
                    asin@sgn 005E            __end_of_openRS232 3AA6                   _gyroGetADC 3002  
             OpenADC@config2 0002            __end_of_openSMBus 3A90                  ?_battConfig 0001  
              xBeeTxInt@data 0010         end_of_initialization 3218                gyroSelfTest@i 0017  
             baroTrueTemp@X1 0020               baroTrueTemp@X2 001C     __size_of_getArrayCurrent 00B2  
             baroTruePres@X1 002D               baroTruePres@X2 0029               baroTruePres@X3 0021  
              _baroTempStart 3508                  ?_xBeeConfig 0001            __end_of_morseCode 24E8  
              _baroPresStart 34B2                __Lmediumconst 0000            __end_of_morseLong 37A8  
          __end_of_morseStop 334E                  ?_xBeeTxXBee 001B                  ?_xBeeRxByte 0001  
                ?_xBeeRxLong 0002                  ?_xBeeTxByte 000F                  ?_xBeeTxLong 0010  
     __size_of_xBeeSetATMode 0066              ___lldiv@divisor 0005     __size_of_getArrayVoltage 00B2  
            ___lldiv@counter 000E                   _morseShort 3954            ??_xBeeATCommandUC 0013  
                  _RCSTAbits 000FAB             ___aldiv@quotient 000C                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc1 000FE6  
                    postinc2 000FDE                   _sensorData 0122                xBeeTxString@i 0012  
                  _PORTAbits 000F80                    _PORTBbits 000F81                    _PORTCbits 000F82  
             ?_xBeeATCommand 0010            ??_telemTimerStart 0001                _battSafeCheck 1FAC  
        accelGetADC@accelRaw 000F                    _TRISCbits 000F94                _xBeeEndATMode 392A  
    baroTrueTemp@temperature 0018          __size_of_WriteUSART 0010                 ??_ConvertADC 0001  
             ?_baroTempStart 0001               ?_baroPresStart 0001                _gyroCalibrate 35B4  
  updateSensorARData@rawTemp 00BF    updateSensorARData@rawPres 00C1                  ___ftdiv@exp 002C  
                  _TXSTAbits 000FAC                   main@input1 00E5                   main@input2 00E7  
       accelGetRoll@accelRaw 0076        __end_of_updatePwrData 31BC             getArrayCurrent@i 0031  
            _baroGetVal$2559 0007                  _accelGetADC 3074                  ___ftmul@exp 0028  
        __size_of_baroGetVal 008C               __end_of___ftge 2DEE               __end_of___lmul 34B2  
             __end_of___wmul 385A          __size_of_battConfig 021E         __size_of_Delay10TCYx 000E  
         __end_of_ConvertADC 3B78          __size_of_xBeeConfig 0042               ?_battSafeCheck 0012  
            ??_baroCalibrate 004E                 ??_SetChanADC 0002                _xBeeSetATMode 3222  
       __end_of_gyroSelfTest 2BA8          __size_of_xBeeTxXBee 009E          __size_of_xBeeRxByte 000A  
        __size_of_xBeeRxLong 0064          __size_of_xBeeTxByte 000E          __size_of_xBeeTxLong 0094  
        start_initialization 31BC               ?_xBeeEndATMode 0001                    _ReadUSART 39EA  
           gyroSelfTest@base 0013                   eval_poly@d 003F                   eval_poly@n 0041  
                 eval_poly@x 003C       getArrayVoltage@average 0033                  ?_gyroGetADC 000A  
           WriteI2C@data_out 0001               ?_gyroCalibrate 0001                    _OpenUSART 334E  
           getArrayVoltage@i 0031   __end_of_updateSensorARData 2854            gyroscope@gyroFail 00B8  
           ??_gyroTimerStart 0001            gyroscope@gyroZero 00B4            ??_getArrayCurrent 0030  
                ?_morseShort 0001           __end_of_SetChanADC 3AD0                ?_accelGetRoll 0070  
                   ??___ftge 0012                     ??___lmul 0009                     ??___wmul 0005  
                __pdataBANK0 00E9                  __pdataBANK1 0130               gyroCalibrate@i 0013  
          ??_getArrayVoltage 0030            _baroTruePres$4850 0025       __size_of_getArrayPower 007E  
    __size_of_baroConvertAlt 0128              ??_xBeeATCommand 0012        __end_of_transmitError 392A  
             ?_xBeeSetATMode 0001            __size_of___altoft 0084            __size_of_WriteI2C 0056  
          __size_of___awtoft 0044            __size_of___ftpack 00B8                    ___asftmul 37E4  
                  ___asftsub 37A8                  __pbssCOMRAM 007E                   ?_ReadUSART 0001  
              __pcstackBANK0 00BF                    _accelFail 00B6             ??_accelCalibrate 0011  
                  _accelZero 00E9              ??_baroTempStart 0002              ??_baroPresStart 0002  
          __size_of_blinkLED 0026                     ?_IdleI2C 0001                   ?_OpenUSART 0001  
                  _asin$4852 0061                    _asin$4853 006D                    _asin$4854 0067  
                  _asin$4855 0064                     ?_BusyADC 0001                     ?_ReadI2C 0001  
                   ?_ReadADC 0001            OpenADC@portconfig 0003                     ?_OpenI2C 0001  
                   ?_OpenADC 0001                    _xBeeRxInt 3A08                    _xBeeTxInt 3AE2  
                  _altOffset 0094             ___lwdiv@dividend 0007               ??_accelGetRoll 0072  
               ??_WriteUSART 0002                     ?___aldiv 0001                     ?___awdiv 0001  
                   ?___ftadd 002E                     ?___ftdiv 001D                     ?___ftneg 0009  
                   ?___lldiv 0001                     ?___ftmul 001D                     ?___ftsub 003C  
                   ?___fttol 0009                ?_Delay10KTCYx 0001                     ?___lwdiv 0007  
                   ?___lwmod 0001          __size_of_gyroGetADC 0072              ??_battSafeCheck 0014  
            ??_xBeeEndATMode 0012                  __smallconst 0600        __end_of_accelSelfTest 2CCE  
                 ?___asftmul 002E                   ?___asftsub 0042                    _eval_poly 24E8  
               ??_baroGetVal 0004          __size_of_morseShort 002A             ___lwdiv@quotient 000C  
            ??_gyroCalibrate 0011                 ??_battConfig 0005           __end_of_WriteUSART 3B26  
            _xBeeATCommandUC 3A5C                _getArrayPower 2F84                 ??_xBeeConfig 0014  
                  _openRS232 3A90              ___aldiv@divisor 0005              ___aldiv@counter 000A  
                  _openSMBus 3A76               ___wmul@product 0005                OpenADC@config 0001  
               ??_xBeeTxXBee 001D                 ??_xBeeRxByte 0002                 ??_xBeeRxLong 0006  
               ??_xBeeTxByte 0010                 ??_xBeeTxLong 0014                    atan@recip 0054  
                   _IPR1bits 000F9F                     _PIE1bits 000F9D                   ?_xBeeRxInt 0002  
                 ?_xBeeTxInt 0010                    _morseCode 23F6                     _PIR1bits 000F9E  
                   _PIR2bits 000FA1                    _morseLong 3766                    _morseStop 32EC  
                   _RCONbits 000FD0              _telemTimerStart 3AD0                    main@F4036 0142  
                  main@F4038 0130               ??_Delay10KTCYx 0002                    _sensorPtr 00F1  
  baroCalibrate@presLocalRaw 0055           __end_of_baroGetVal 2E7A        __size_of_gyroSelfTest 009A  
                  _powerData 00B9              ??_xBeeSetATMode 0010      __size_of_battConfigByte 0036  
            xBeeRxLong@value 000D           __end_of_battConfig 1616         baroTruePres@pressure 0031  
                 _ADCON0bits 000FC2      __size_of_updateBattData 011E            ___wmul@multiplier 0001  
    __size_of_updateXBeeData 0122           __end_of_xBeeConfig 3766       getArrayCurrent@average 0033  
                 ?_eval_poly 003C                  ??_ReadUSART 0001           __end_of_xBeeTxXBee 2B0E  
         __end_of_xBeeRxByte 3B64           __end_of_xBeeRxLong 32EC           __end_of_xBeeTxByte 3B42  
         __end_of_xBeeTxLong 2C3C             Delay10KTCYx@unit 0001          __end_ofatan@coeff_a 0612  
        __end_ofatan@coeff_b 0621               xBeeSetATMode@i 0011                ?_baroTrueTemp 0010  
              ?_baroTruePres 0010            gyroGetADC@average 000F            ___lmul@multiplier 0001  
                _INTCON2bits 000FF1                    copy_data0 31EC                    copy_data1 320C  
             ?_getArrayPower 002E                ?_battReadWord 0002             OpenI2C@sync_mode 0001  
                 ?_openRS232 0001              gyroSelfTest@new 0015                  ??_OpenUSART 0004  
                 ?_openSMBus 0001             __size_of_IdleI2C 000C              OpenUSART@config 0001  
           __size_of_BusyADC 0006             __size_of_ReadI2C 001C             __size_of_ReadADC 000A  
               _gyroSelfTest 2B0E                     __Hrparam 0000                   ?_morseCode 0004  
               ?_accelGetADC 000A             __size_of_OpenI2C 001C             __size_of_OpenADC 005C  
                 ?_morseLong 0001                     __Lrparam 0000                   ?_morseStop 0001  
           __size_of___aldiv 00D8             __size_of___awdiv 0090             __size_of___ftadd 01CC  
             _baroConvertAlt 1D62             __size_of___ftdiv 00FE             __size_of___ftneg 0026  
           __size_of___lldiv 0086                     ___altoft 2F00             __size_of___ftmul 0110  
           __size_of___ftsub 0036             __size_of___fttol 00E0             __size_of___lwdiv 0056  
           __size_of___lwmod 0046                     _WriteI2C 355E                     ___awtoft 369E  
                   ___ftpack 2854                     _battData 0100                  ??___asftmul 0033  
                ??___asftsub 0047                     _xBeeData 0112      __end_of_xBeeATCommandUC 3A76  
                   _blinkLED 397E               ??_baroTrueTemp 0012               ??_baroTruePres 0014  
            ___lwdiv@divisor 0009                ?_xBeeTxString 0010         __end_of_accelGetRoll 1D62  
            ___lwdiv@counter 000E                     __ptext10 36E2                     __ptext11 39A4  
                   __ptext20 1E8A                     __ptext12 19A2                     __ptext21 3A08  
                   __ptext13 37A8                     __ptext30 3A90                     __ptext22 3288  
                   __ptext14 3890                     __ptext31 334E                     __ptext23 3B5A  
                   __ptext15 37E4                     __ptext40 3B06                     __ptext32 3152  
                   __ptext24 39EA                     __ptext16 3AD0                     __ptext41 3002  
                   __ptext33 2F84                     __ptext25 3724                     __ptext17 2A70  
                   __ptext50 25CA                     __ptext42 1FAC                     __ptext34 22F8  
                   __ptext26 392A                     __ptext18 2BA8                     __ptext51 2F00  
                   __ptext43 20CA                     __ptext35 290C                     __ptext27 3AF4  
                   __ptext19 3AE2                     __ptext60 1B0A                     __ptext52 2854  
                   __ptext44 30E6                     __ptext36 369E                     __ptext28 3A5C  
                   __ptext61 34B2                     __ptext53 1D62                     __ptext45 3A76  
                   __ptext37 29BE                     __ptext29 3222                     __ptext70 23F6  
                   __ptext62 3508                     __ptext54 21E8                     __ptext46 3A24  
                   __ptext38 2B0E                     __ptext71 32EC                     __ptext63 3B26  
                   __ptext55 1616                     __ptext47 13F8                     __ptext39 35B4  
                   __ptext80 3ABC                     __ptext72 3954                     __ptext64 2DEE  
                   __ptext56 0622                     __ptext48 38C6                     __ptext81 3B64  
                   __ptext73 3766                     __ptext65 3A40                     __ptext57 2E7A  
                   __ptext49 11AC                     __ptext82 3B74                     __ptext74 3AA6  
                   __ptext66 355E                     __ptext58 345C                     __ptext83 3B6E  
                   __ptext75 38FC                     __ptext67 3B4E                     __ptext59 26AA  
                   __ptext84 33AA                     __ptext76 3B34                     __ptext68 3608  
                   __ptext85 3820                     __ptext77 3B16                     __ptext69 2C3C  
                   __ptext86 2D5E                     __ptext78 3074                     __ptext79 2CCE  
               ??_gyroGetADC 000C           battConfigByte@data 0003              _getArrayCurrent 290C  
           xBeeTxString@data 0010               ??_battReadWord 0004                __size_of_fabs 0042  
              __size_of_atan 01C0                __size_of_asin 027C      __end_of_telemTimerStart 3AE2  
              __size_of_main 0396                __size_of_sqrt 0168              _getArrayVoltage 29BE  
             xBeeRxInt@value 0005                     _gyroFail 00B7                  ??_xBeeRxInt 0004  
                ??_xBeeTxInt 0012                     _gyroZero 00ED                 ??_morseShort 0003  
              ??_Delay10TCYx 0002       __end_of_baroConvertAlt 1E8A                     _powerPtr 00EF  
               _presSeaLevel 0098           __end_of_gyroGetADC 3074       accelSelfTest@accelBase 0013  
         _updateSensorARData 2782                  atan@coeff_a 0600                  atan@coeff_b 0612  
             xBeeTxByte@data 000F                   _INTCONbits 000FF2                  ??_eval_poly 0043  
      __end_of_baroCalibrate 13F8               ??_xBeeTxString 0012          ?_updateSensorARData 007B  
             OpenUSART@spbrg 0002       __size_of_updatePwrData 006A              ??_getArrayPower 0032  
             xBeeTxLong@data 0010           __end_of_morseShort 397E         __end_of_Delay10KTCYx 3ABC  
                ??_openRS232 0004             ___lwmod@dividend 0001                  ??_openSMBus 0003  
           ___lldiv@dividend 0001            SetChanADC@channel 0001         ??_updateSensorARData 007D  
                ??_morseCode 0005                  ??_morseLong 0003                  ??_morseStop 0003  
            ?_baroConvertAlt 003C        accelSelfTest@accelNew 0015               _battConfigByte 38C6  
             _updateBattData 20CA               _updateXBeeData 1E8A          __end_of_Delay10TCYx 3B34  
      __end_of_xBeeATCommand 3B06      __end_of_getArrayCurrent 29BE             ___lldiv@quotient 000A  
            ___lwmod@divisor 0003              ___lwmod@counter 0006             ?_xBeeATCommandUC 0010  
        _baroConvertAlt$4851 0047                 ___aldiv@sign 000B                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5      __end_of_getArrayVoltage 2A70        __end_of_baroTempStart 355E  
      __end_of_baroPresStart 3508             ?_telemTimerStart 0001       __size_of_transmitError 002E  
               _USART_Status 007E                _updatePwrData 3152  
